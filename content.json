{"pages":[{"title":"","text":"个人简介 分享很喜欢的**老罗**的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"","text":"嗨，请准确无误地输入密码查看哟！ 12ba64a021bd805a33ee7c093e08fc8512775b88070f6a216824e0e22d9255e8f45e64665ccdc065383b62c2e88f3275db51fd964cb3eaabe89ca8472dc3afada0175be6b98ba449a23e62d3a324cf15377478a9d65c9ad361acd5c1b92919e458b18498c8acd6b8747e4696ed6025e6da60c2ca47a244a5feda77969aae8da5ae54fb3106f97d39019b3873568ea16e5762e10eaaa77d7c8213532ab71cb9b8ec16f40ea2fc44b06f0064098408886c10ba14e5438617920c00b2d4e9bcc2cde9cea88bd8b1af989e86c6ae111bfc54c4f037707d25fa2692134e5b85a54ac021390b7344e0d8c3aa6e0c7a89087589c6c939eb3ebe6f02b179ecab0dd05880f5816f9ce2c1ad4312a57431d42d2cf1e10fee86c4a53fdf110e3331129dd77e9a07f4a8132950aa7c04b43db8fbc556fc1a064c5b8292d9619ba18d9b300001453422a60cc30a89b8e28c31d8a47618374c4e8cd2feadadd54ec071e7a118c1ddeedc5e803d76a0e8da05cc54e6372e3003ddfdd895db0caa813caf4bcb60a9591797a0edd4ec5f4cc6fbcc82196518cbf2444ff4b2b304a55c950730197939fc06d5b4e86da3f6bcbc23461fa452ea05b48d86e8ef5bda49438a79161a8a72bda949921f365cf57786a430025f2f4221da010a35db88a38e21706b20a8a378e1ce0f4e71f59ce368505e7e623401f58ca1594b6a3f545e40381cce70b29a8e67c7869d5c450061a1e887f51e70316814e3a451808f01419c511dc1eb8b7fee48ba7d2d563202aa13e1cdad0ebce40717f939988e20e735d5344217e01920e6765eac353c4f5c84a7c3cb540eb3ab7c1ce1b75f30a3a0e132c06aeb91cb833be993617501149eec62337db19fe30d5558fa7d9b20e7d24a1fe8193067e84c3be0d67e442b86bff80cd286490485c3585825d23305357df855b5a5af4170b370cd2f0aab45e6b8398476d28b6f93996a0e6f70aaa93cd7cf420f985a4dc1e257abbf494687227d392578cb97de43ea47ca7902cd17a8f7458062e52dc9c1f0b7d10ea911e81e265f95dfe992f701182b","link":"/album/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: 'e2be3865225154dcbde7', clientSecret: 'fa6d41df234107bc28f5a6eadbd4f9e3f18eb4d7', id: '66666678', repo: 'gengyuchao.github.io', owner: 'gengyuchao', admin: \"gengyuchao\", createIssueManually: true, distractionFreeMode: true }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"},{"title":"音乐歌单收藏","text":"--- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/08/07/hello-world/"},{"title":"加密测试","text":"嗨，请准确无误地输入密码查看哟！ 30f9441527159f8159e2d4625ba88cec4610fb964a4efc54c5dbbb1ffba01fa59c338013fa05bcfbec8b59b5e6a9fb2fd20da0c17f7b9795f0943b8085d614b0a52eff59008b167faf4d835269fbca055666789069c3feb377ba4e22bd86f228e2f9ddd52411c8f2f355df6aaa4b64ce4232ba58448cf9ea5c85b5a60638c7f125497845cb1750f32052820c15758bffeb3b7c01eba610e125330a179b1256e0d25b85b86610153dfff9c7d1edfededebad5998f980ec26cf463fab484306d101a5a2f31ea160007a9d58865e5ccb881da19c7d5e63a985fb5abb509d8247d1edbc038bc77bd38288ec878da40a1e3e71ac151e41a20789f921b94a7c418fdd922e3e2d11f66cf4c39b10479f573dbf443193c847b0ba43fb5e4cc10b0c4b2fca4ef8f5fc2bd431f46fd09fc413ac3946ab1716c2dd401d1172474e0a5f9334e","link":"/2022/03/22/%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/"},{"title":"博客初生小记","text":"一直以来，我都希望能够有一个自己的博客，一个能够完全由自己掌控的博客，来记录自己的兴趣和知识。但是小时候的我没有这样的能力，而长大之后又被各种各样的忙碌所侵占，没有再深入研究。今天发现了 Hexo 这样一个可以方便的搭建漂亮博客的工具，可以让我用自己的代码能力任意的发挥自己的想象，这真是太酷了。所以，今天我在这里搭建了自己的第一个小站，来实现自己曾经的愿望。 以后，我也打算在这个平台上发布自己的博客，记录自己的日常生活和学到的知识，希望感兴趣的朋友来和我多多交流呀～","link":"/2020/08/08/%E5%8D%9A%E5%AE%A2%E5%88%9D%E7%94%9F%E5%B0%8F%E8%AE%B0/"},{"title":"不停更新的学习资料网站","text":"PyQtPyQt5中文教程，翻译自 zetcode 这个教程比较好的地方是，能讲解每一段代码的含义。 https://maicss.gitbooks.io/pyqt5/content/ 博客技巧https://anclark.github.io/2019/03/28/Hexo/%E6%8E%A8%E8%8D%90%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/ 背景图 https://www.toptal.com/designers/subtlepatterns/https://www.zhihu.com/question/19573039 优秀的笔记https://wujun234.github.io/ 蓝牙学习经典蓝牙 LMP https://www.cnblogs.com/libs-liu/p/9496440.html 跳频算法 http://news.eeworld.com.cn/mp/BLE5CODER/a51082.jspx FreeRTOS 学习https://suda-morris.github.io/2018/05/30/freertos/","link":"/2022/03/22/%E4%B8%8D%E5%81%9C%E6%9B%B4%E6%96%B0%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E7%BD%91%E7%AB%99/"},{"title":"博客常用操作","text":"这里记录 Hexo 博客日常维护用到的指令。 博客维护指令 生成hexo g 启动本地服务hexo s 上传hexo d 工具包 npm install hexo-generator-index –save #索引生成器 npm install hexo-hide-posts –save #隐藏文章 npm install hexo-generator-index-pin-top –save #置顶文章","link":"/2022/07/07/%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"},{"title":"Bluetooth学习笔记_BLE_基础知识点1","text":"Bluetooth学习笔记 【BLE 基础知识点 1】 这里是我搜集的一些关于 BLE 的基本概念 和 说明。 BLE 知识点1、蓝牙协议栈层次 2、BLE低功耗蓝牙核心协议层详解（Bluetooth Core） 1、物理层（Physical Layer，简写 PHY）：PHY层用来指定BLE所用的无线频段，调制解调方式和方法等。是1Mbps自适应跳频的GFSK射频，工作于免许可证的2.4GHz ISM（工业、科学与医疗）频段。PHY层做得好不好，直接决定整个BLE芯片的功耗，灵敏度以及selectivity等射频指标。 2、链路层（Link Layer，简写 LL）：LL层是整个BLE协议栈的核心，也是BLE协议栈的难点和重点。LL层要做的事情非常多，比如具体选择哪程度 个射频通道进行通信，怎么识别空中数据包，具体在哪个时间点把数据包发送出去，怎么保证数据的完整性，ACK如何接收，如何进行重传，以及如何对链路进行管理和控制等等。LL层只负责把数据发出去或者收回来，对数据进行怎样的解析则交给上面的GAP或者ATT。 3、主机控制接口层（Host Controller Interface，简写 HCI）：HCI是可选的，HCI主要用于2颗芯片实现BLE协议栈的场合，用来规范两者之间的通信协议和通信命令等。 4、通用访问配置文件层（Generic access profile，简写GAP）：GAP是对LL层payload（有效数据包）如何进行解析的两种方式中的一种，而且是最简单的那一种。GAP简单的对LL payload进行一些规范和定义，因此GAP能实现的功能极其有限。GAP目前主要用来进行广播，扫描和发起连接等。 5、逻辑链路控制及自适应协议层（Logical Link Control and Adaptation Protocol，简写 L2CAP）：L2CAP对LL进行了一次简单封装，LL只关心传输的数据本身，L2CAP就要区分是加密通道还是普通通道，同时还要对连接间隔进行管理。 6、安全管理层（Security Manager，简写 SM）：SMP用来管理BLE连接的加密和安全的，如何保证连接的安全性，同时不影响用户的体验，这些都是SMP要考虑的工作。 7、属性协议层（Attribute protocol，简写 ATT）：简单来说，ATT层用来定义用户命令及命令操作的数据，比如读取某个数据或者写某个数据。BLE协议栈中，开发者接触最多的就是ATT。BLE引入了attribute概念，用来描述一条一条的数据。Attribute除了定义数据，同时定义该数据可以使用的ATT命令，因此这一层被称为ATT层。 8、通用属性配置文件层（Generic Attribute profile，简写 GATT）：GATT用来规范attribute中的数据内容，并运用group（分组）的概念对attribute进行分类管理。没有GATT，BLE协议栈也能跑，但互联互通就会出问题，也正是因为有了GATT和各种各样的应用profile，BLE摆脱了ZigBee等无线协议的兼容性困境，成了出货量最大的2.4G无线通信产品。 3、蓝牙协议组成 蓝牙协议体系中的协议按SIG的关注程度分为四层： （1）核心协议：BaseBand、LMP、L2CAP、SDP； （2）电缆替代协议：RFCOMM； （3）电话传送控制协议：TCS-Binary、AT命令集； （4）选用协议：PPP、UDP/TCP/IP、OBEX、WAP、vCard、vCal、IrMC、WAE。 除上述协议层外，规范还定义了主机控制器接口（HCI），它为基带控制器、连接管理器、硬件状态和控制寄存器提供命令接口。在上图中可见，HCI位于L2CAP的下层，但HCI也可位于L2CAP上层。 蓝牙核心协议由SIG制定的蓝牙专用协议组成。绝大部分蓝牙设备都需要核心协议（加上无线部分），而其他协议则根据应用的需要而定。总之，电缆替代协议、电话控制协议和被采用的协议在核心协议基础上构成了面向应用的协议。 4、蓝牙基本架构 4.1底层硬件模块 （1）无线射频模块（Radio）：蓝牙最底层，带微带天线，负责数据接收和发送。 （2）基带模块（BaseBand）：无线介质访问约定。提供同步面向连接的物理链路（SCO）和异步无连接物理链路（ACL），负责跳频和蓝牙数据及信息帧传输，并提供不同层次的纠错功能（FEC和CTC）。 （3）链路控制模块（LC）：蓝牙数据包的编码和解码。 （4）链路管理模块（LM）：负责创建、修改和发布逻辑链接，更新设备间物理链接参数，进行链路的安全和控制。 （5）主机控制器接口（HCI）：是软硬件接口部分，由基带控制器、连接管理器、控制和事件寄存器等组成；软件接口提供了下层硬件的统一命令，解释上下层消息和数据的传递。硬件接口包含UART、SPI和USB等。 4.2.中间协议层 （1）逻辑链路控制与适配协议（L2CAP）：蓝牙协议栈的基础，也是其他协议实现的基础。向上层提供面向连接和无连接的数据封装服务；采用了多路技术、分割和重组技术、组提取技术来进行协议复用、分段和重组、认证服务质量、组管理等行为。 （2）音视频发布传输协议（AVDTP）和音视频控制传输协议（AVCTP）：二者主要用于Audio/Video在蓝牙设备中传输的协议，前者用于描述传输，后者用于控制信号交换的格式和机制。 （3）服务发现协议（SDP）：蓝牙技术框架至关重要一层，所有应用模型基础。动态的查询设备信息和服务类型，建立一条对应的服务通信通道，为上层提供发现可用的服务类型和属性协议信息。 （4）串口仿真协议（RFCOMM）：实现了仿真9针RS232串口功能，实现设备间的串行通信。 （5）二进制电话控制协议（TCS）：基于 ITU-T Q.931 建议的采用面向比特的协议，它定义了用于蓝牙设备之间建立语音和数据呼叫的控制信令（Call Control Signalling），并负责处理蓝牙设备组的移动管理过程。 4.3.蓝牙Profile Bluetooth Profile是蓝牙设备间数据通信的无线接口规范。目前有四大类、十三种协议规则，厂商可以自定义规格。几种最常见的Profile文件： （1）通用访问配置文件（GAP）：其他所有配置文件的基础，定义了在蓝牙设备间建立基带链路的通用方法，并允许开发人员根据GAP定义新的配置文件。包含所有蓝牙设备实施的功能，发现和连接设备的通用步骤，基本用户界面等通用操作。 （2）服务发现应用配置文件（SDAP）：描述应用程序如何用SDP发现远程设备服务，可与向/从其他蓝牙设备发送/接收服务查询的SDP连接。 （3）串行端口配置文件（SPP）：基于ETSI TS 07.10规格定义如何设置虚拟串行端口及如何连接两个蓝牙设备。速度可达128kb/s。 （4）通用对象交换配置文件（GOEP）：可以将任意对象（如图片、文档等）从一个设备传输到另一个设备。","link":"/2020/08/09/Bluetooth/Bluetooth%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_BLE_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B91/"},{"title":"Bluetooth学习笔记_Spec v5.2 Vol2","text":"Bluetooth学习笔记 【Spec v5.2 Vol2】架构、版本兼容和约定 本次学习主要目标是学习 BLE 相关的内容，BT 部分可能会在后面补充。 架构概述蓝牙无线技术是一种短距离通信系统，旨在取代连接便携式和/或固定电子设备的电缆。 蓝牙无线技术的主要特点是鲁棒性（稳定性）、低功耗和低成本。 该规范的许多特性是可选的，允许产品差异化。 蓝牙核心系统由一个主机和一个或多个控制器组成。 主机（HOST）是一个逻辑实体，定义为非核心配置文件之下和主机控制器接口 (HCI) 之上的所有层。 控制器（Controller）是定义为 HCI 下所有层的逻辑实体。 主机和控制器的实现可能包含 HCI 的相应部分。 此版本的规范中定义了两种类型的控制器：主控制器和辅助控制器。 LE 特性- 工作频段 : 在不需要许可的 2.4 GHz ISM 频带中运行 - 跳频收发 : LE 系统采用跳频收发器来对抗干扰和衰落，并提供许多 FHSS 载波。 - 调制简化 : LE 无线电操作使用整形的二进制频率调制来最小化收发器的复杂性。 - 不同频率 ：支持 1M 2M 125k(Coded) 500k(Coded) - LE 采用两种多址方案：频分多址 (FDMA) 和时分多址 (TDMA)。 FDMA 方案中使用了四十 (40) 个物理信道，相隔 2 MHz。 - 三个用作主要广播的信道，37 个用作通用信道（包括作为二级广播信道）。 - 使用基于 TDMA 的轮询方案，其中一个设备在预定时间发送数据包，并且相应的设备在预定时间间隔后用数据包进行响应。 - 事件驱动 : 物理信道被细分为称为事件的时间单元。 数据通过位于这些事件中的数据包在 LE 设备之间传输。 存在以下类型的事件：广播、扩展广播、周期性广播、连接和同步事件。 - The physical channel is sub-divided into time units known as events. Data is transmitted between LE devices in packets that are positioned in these events. The following types of events exist: Advertising, Extended Advertising, Periodic Advertising, Connection, and Isochronous events. 规格版本的兼容(混合)这部分描述了不同版本的卷和卷中的部分如何在蓝牙实现中混合使用。 核心系统由一个 BR/EDR 控制器包（见第 2 卷）、一个低能耗控制器包（见第 6 卷）、一个主机包（见第 3 卷）和 AMP 协议适配层（见第 5 卷）组成。","link":"/2020/08/09/Bluetooth/Bluetooth%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Spec5_2_Vol2/"},{"title":"ESP8266开发学习笔记_OLED屏幕的IIC驱动","text":"ESP8266 开发学习笔记_By_GYC 【OLED屏幕的IIC驱动】 在我之前的文章中简单介绍过oled的IIC驱动程序，包括SSD1306芯片手册的一些内容，并参考了Arduino大神的代码，将OLED在Arduino上的的驱动改写为了能够应用于ESP8266 RTOS SDK的C语言版本，并作为我的常用库使用。在发现ESP8266可以使用C++编程之后我决定将 ThingPulse 的OLED驱动库（c++版本）完整的进行移植，让我能够在SDK中也能够方便的使用。 最近我也在研究应用在stm32单片机的FreeRtos操作系统，所以本次OLED的驱动也考虑了在其他FreeRtos操作系统中的适配，可以方便的通过宏定义配置的方式，直接应用在支持FreeRtos操作系统的单片机上。 （目前库中仅支持ESP8266 IDF版本和STM32F103 FreeRTOS及 STM32F103 无操作系统版本。 如果使用其他系列单片机 通信协议还是需要自己修改的）。 适用范围|—||ESP8266_RTOS_SDK V3.0 （ESP-IDF Style）||STM32F103裸机||STM32F103 FreeRtos操作系统版本| user_config 用户配置使用宏定义在“user_oled_config.h”中使用不同的使用方式 12345#define ESP8266_IDF // ESP-IDF支持 （默认启用FreeRtos支持）#define STM32F103 // Stm32支持#define USE_FreeRTOS // FreeRTOS支持 如果您不使用FreeRTOS操作系统，则需要自己覆盖millis（）函数。 I2C使用方法使用IIC方式驱动OLED屏幕的方式 123#include \"SSD1306I2C.hpp\"SSD1306I2C display(ADDRESS, SCL, SDA); 对于 esp8266-idf 1SSD1306I2C display(0x3c,GPIO_NUM_5,GPIO_NUM_4);// OLED_Address SCL SDA 对于 stm32 1SSD1306I2C display(0x3c, GPIO_Pin_10, GPIO_Pin_11); //OLED_Address SCL SDA API接口 显示控制 12345678910111213141516171819202122232425262728293031323334353637383940414243//初始化显示void init（）;//释放显示器使用的内存void end（）;//循环初始化void resetDisplay（void）;//再次通过I2C连接到显示器void reconnect（void）;//打开显示屏void displayOn（void）;//关闭显示屏void displayOff（void）;//清除本地像素缓冲区void clear（void）;//将缓冲区写入显示内存void display（void）;//倒置显示模式void invertDisplay（void）;//正常显示模式void normalDisplay（void）;//设置显示对比度//真正的低亮度和对比度：对比度= 10，预充电= 5，comdetect = 0//正常亮度和对比度：对比度= 100void setContrast（uint8_t contrast，uint8_t precharge = 241，uint8_t comdetect = 64）;//访问的便捷方法void setBrightness（uint8_t）;//翻转显示屏void flipScreenVertically（）;//绘制镜像的屏幕void mirrorScreen（）; 像素绘图 12345678910111213141516171819202122232425262728293031323334353637/ *绘图功能* ///设置所有像素操作的颜色void setColor（OLEDDISPLAY_COLOR color）;//在给定位置绘制一个像素void setPixel（int16_t x，int16_t y）;//从位置0到位置1绘制一条线void drawLine（int16_t x0，int16_t y0，int16_t x1，int16_t y1）;//在给定位置绘制矩形的边框void drawRect（int16_t x，int16_t y，int16_t width，int16_t height）;//填充矩形void fillRect（int16_t x，int16_t y，int16_t width，int16_t height）;//绘制圆的边框void drawCircle（int16_t x，int16_t y，int16_t radius）;//填圈void fillCircle（int16_t x，int16_t y，int16_t radius）;//水平画一条线void drawHorizo​​ntalLine（int16_t x，int16_t y，int16_t length）;//垂直画一个林void drawVerticalLine（int16_t x，int16_t y，int16_t length）;//绘制一个圆形进度条，其外部尺寸由宽度和高度给定。进步是// 0到100之间的无符号字节值void drawProgressBar（uint16_t x，uint16_t y，uint16_t width，uint16_t height，uint8_t progress）;//以内部图像格式绘制位图void drawFastImage（int16_t x，int16_t y，int16_t width，int16_t height，const uint8_t * image）;//画一个XBMvoid drawXbm（int16_t x，int16_t y，int16_t width，int16_t height，const char * xbm）; 文字操作 1234567891011121314151617181920212223void drawString（int16_t x，int16_t y，String text）;//在给定位置绘制一个最大宽度的字符串。//如果给定的String宽于指定的宽度//文本将被包装到空格或短划线的下一行void drawStringMaxWidth（int16_t x，int16_t y，int16_t maxLineWidth，String text）;//返回带有当前值的const char *的宽度//字体设置uint16_t getStringWidth（const char * text，uint16_t length）;// const char版本的Convencience方法uint16_t getStringWidth（String text）;//指定相对于哪个锚点//文字被渲染。可用常数：// TEXT_ALIGN_LEFT，TEXT_ALIGN_CENTER，TEXT_ALIGN_RIGHT，TEXT_ALIGN_CENTER_BOTHvoid setTextAlignment（OLEDDISPLAY_TEXT_ALIGNMENT textAlignment）;//设置当前字体。可用的默认字体// ArialMT_Plain_10，ArialMT_Plain_16，ArialMT_Plain_24//或者使用http://oleddisplay.squix.ch上的字体工具创建一个void setFont（const uint8_t * fontData）; 由于这个库本身是由 ThingPulse 开发而来，我再此就不做过多的说明，功能研究请移步 ThingPulse 网站，我仅将移植好的原代码放在我的github仓库中（https://github.com/gengyuchao/oled_ssd1306） 如果有需要可以自己下载研究，有任何问题欢迎与我交流讨论。我会把以后遇到的问题在博客中进行补充说明。","link":"/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_OLED%E5%B1%8F%E5%B9%95%E7%9A%84IIC%E9%A9%B1%E5%8A%A8/"},{"title":"ESP8266开发学习笔记_使用C++进行嵌入式编程","text":"ESP8266 开发学习笔记_By_GYC 【使用C++进行嵌入式编程】 由于C++具有封装、继承与多态的优秀特性，所以我将很多项目封装成了类方便调用，本部分会简单介绍一下如何在ESP8266中使用C++进行编程和一些注意事项。 一、简单的开始我们使用的交叉编译工具链本身就支持C++，而且在官方的makefile里也写了C++编译相关的支持，所以对于用户来说，使用C++语言对ESP8266进行编程相当的容易，只需要将源文件的后缀改为“*.cpp” 、头文件改为 “*.hpp” ,或者直接添加“*.cpp” 、 “*.hpp”文件就可以实现使用C++语言编程。 二、主函数文件使用C++编程同样的原理，在main文件夹下，将user_main.c 改为 user_main.cpp 。文件中就可以使用C++的各种关键字和语法了。 不过在user_main文件中，仅仅是支持C++编译还是不够的。因为编译器需要找到app_main这个函数作为用户程序入口。直接编译会报错找不到app_main函数。 基于此情况，我们需要给 app_main 函数加上 extern “C” 来告诉编译器，这个函数使用C语言风格编译，启动程序就能够正常的找到用户程序的入口了。 问题产生的原因和解决的原理如下： 此部分引用 作者：obatmg 的描述，详细原文链接为：https://blog.csdn.net/u014783685/article/details/84973067 C++编译器在将cpp文件编译成库时，导出的函数名会改变，成员函数会通过加一些元素变成全局函数，如果这时候我们需要用C语言调用C++的函数，就会遇到C语言程序无法根据用户提供的函数名寻找到C++库中导出的真实函数名的问题，C++库中导出的真实函数名是由编译器决定的，这个时候就需要用到extern关键字。 extern “C”的含义就是告诉编译器，下面的函数使用C风格来编译，C语言编译时就不会修改函数名，因为没有重载，类，命名空间等这些概念，函数名是唯一的，而C++因为有类、命名空间、函数重载这些概念，所以函数名可能是相同的，所以C++编译器会修改函数名，使得两个相同函数名的函数在调用时不会产生冲突。——————— 使用 extern “C” 来告诉编译器 之后，我们就可以正常的进行编译和使用了。 三、为什么使用C++使用C++具有封装、继承与多态的优秀特性，我可以将很多项目封装成类，做成各种通用接口，方便在其他项目中调用。 使用C++类的概念，我可以构建各种子模块，通过添加类的方式添加新的功能，实现快速高灵活性的开发。 后面介绍的一些项目中也常常用到C++语言，所以在这里先做一个总结和说明，来记录和介绍我在ESP8266 IDF框架中使用C++的方法。我自己开发的小项目会上传到 我的github仓库上（https://github.com/gengyuchao），欢迎大家关注我的博客和github。如果有任何意见和建议，希望大家多多和我交流呀O(∩_∩)O~","link":"/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E4%BD%BF%E7%94%A8C++%E8%BF%9B%E8%A1%8C%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"title":"ESP8266开发学习笔记_DHT11温湿度传感器","text":"ESP8266 开发学习笔记_By_GYC 【DHT11 温湿度传感器】 本章介绍ESP8266 IDF 框架下 如何使用GPIO口进行单总线时序模拟，介绍DHT11温湿度传感器的使用方法，实现对温湿度的采集。 一、准备材料①开发板：NodeMcu （ESP8266） ②环境：Ubuntu 18.04 、 ESP-IDF 操作系统（ ESP8266_RTOS_SDK V3.2） ③传感器：DHT11 ④辅助材料：杜邦线、面包板 二、硬件连接 DHT11的硬件只包含三个引脚，分别是VCC、GND和数据输出引脚DATA。其模块输入电压VCC的输入范围是3.3V~5V。采样周期为1秒。传感器接3.3V电源、GND和ESP8266的GPIO5，信号引脚DATA接5kΩ上拉电阻，完成DHT11的硬件系统。 三、软件编程DHT11能够使用单总线传输协议与ESP8266进行通信。其中ESP8266作为主机，DHT11作为从机。主机给传感器DHT11发送起始信号，收到从机应答信号后初始化成功，能够进行数据传输。 DHT11回复响应信号后，会发送40bit的传感器数据，包括两个字节的湿度数据（一个字节整数、一个字节小数），两个字节的温度数据整数（一个字节整数、一个字节小数），最后是一个字节的校验和数据。通过求和校验的数据将会作为最后发送的数据。 本次例程是基于EPS8266 IDF的example “project_template” 进行开发，直接在模板基础上进行新内容的添加。 1、修改工程名首先，将MakeFile中模板中的工程名字 1PROJECT_NAME := project_template 修改为 1PROJECT_NAME := project_DHT11 2、添加组件然后添加工程组件文件夹 dht11_driver 到自己工程的 components （组件） 下 （PS：本次首先提供C++版本的驱动，工程中C++的具体使用方法可以参考我的系列博客内容） 3、编程修改user_main.c 为 user_main.cpp 添加 dht11驱动的头文件 “dht11_driver.hpp” 为 void app_main(void) 函数添加修饰符 extern “C” 如下： 123456789101112131415161718192021222324252627#include &lt;stdio.h&gt;#include \"esp_system.h\" #include \"dht11_driver.hpp\" //生成 DHT11 的实例化对象DHT_Sensor my_DHT11(GPIO_NUM_5,DHT11);/****************************************************************************** * FunctionName : app_main * Description : entry of user application, init user function here * Parameters : none * Returns : none*******************************************************************************/extern \"C\" void app_main(void){ printf(\"SDK version:%s\\n\", esp_get_idf_version()); my_DHT11.DHTInit(); while(1) { my_DHT11.DHTRead(); ESP_LOGI(\"DHT11\",\"DHT: Temperature*100 = %d *C, Humidity*100 = %d %% (GPIO%d)\", (int) (my_DHT11.Sensor_Data.temperature * 100), (int) (my_DHT11.Sensor_Data.humidity * 100), my_DHT11.data_pin); vTaskDelay(1000 / portTICK_RATE_MS); }} 4、反馈结果 5、核心代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192//温湿度传感器数据读取（并将数据写入到传入指针） bool DHT_Sensor::DHTRead(DHT_Sensor_Data* output){ int counter = 0; int laststate = 1; int i = 0; int j = 0; int checksum = 0; int data[100]; data[0] = data[1] = data[2] = data[3] = data[4] = 0; gpio_num_t pin = (gpio_num_t)data_pin; gpio_set_direction(pin,GPIO_MODE_OUTPUT); // Wake up device, 250ms of high gpio_set_level(pin, 1); sleepms(250); // Hold low for 20ms gpio_set_level(pin, 0); sleepms(20); // High for 40ns gpio_set_level(pin, 1); delay_us(40); // Set DHT_PIN pin as an input gpio_set_direction(pin,GPIO_MODE_INPUT); //GPIO_DIS_OUTPUT(pin); // wait for pin to drop? while (gpio_get_level(pin) == 1 &amp;&amp; i &lt; DHT_MAXCOUNT) { delay_us(1); i++; } if(i == DHT_MAXCOUNT) { DHT_DEBUG(\"DHT: Failed to get reading from GPIO%d, dying\\r\\n\", pin); return false; } // read data for (i = 0; i &lt; DHT_MAXTIMINGS; i++) { // Count high time (in approx us) counter = 0; while (gpio_get_level(pin) == laststate) { counter++; delay_us(1); if (counter == 1000) break; } laststate = gpio_get_level(pin); if (counter == 1000) break; // store data after 3 reads if ((i&gt;3) &amp;&amp; (i%2 == 0)) { // shove each bit into the storage bytes data[j/8] &lt;&lt;= 1; if (counter &gt; DHT_BREAKTIME) data[j/8] |= 1; j++; } } if (j &gt;= 39) { checksum = (data[0] + data[1] + data[2] + data[3]) &amp; 0xFF; DHT_DEBUG(\"DHT%s: %02x %02x %02x %02x [%02x] CS: %02x (GPIO%d)\\r\\n\", sensor_type==DHT11?\"11\":\"22\", data[0], data[1], data[2], data[3], data[4], checksum, pin); if (data[4] == checksum) { // checksum is valid output-&gt;temperature = scale_temperature(data); output-&gt;humidity = scale_humidity(data); DHT_DEBUG(\"DHT: Temperature*100 = %d *C, Humidity*100 = %d %% (GPIO%d)\\n\", (int) (output-&gt;temperature * 100), (int) (output-&gt;humidity * 100), pin); } else { DHT_DEBUG(\"DHT: Checksum was incorrect after %d bits. Expected %d but got %d (GPIO%d)\\r\\n\", j, data[4], checksum, pin); return false; } } else { DHT_DEBUG(\"DHT: Got too few bits: %d should be at least 40 (GPIO%d)\\r\\n\", j, pin); return false; } return true;} 四、总结驱动DHT11主要就是遵从时序图，按照时序图中规定的时序控制和读取单线的DHT11传感器数据，最终通过原始数据换算得到最终的温湿度数据的值。 本次的工程我会开源到自己的github上（https://github.com/gengyuchao），欢迎大家来和我一起交流呀。","link":"/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_DHT11%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/"},{"title":"ESP8266开发学习笔记_Ubuntu系统安装","text":"ESP8266 开发学习笔记_By_GYC 【虚拟机Ubuntu系统的安装】 本来是想最后有时间再写这篇博客的，奈何皂滑弄人，昨天晚上在写上一篇还未出世的博客文章的时候，手滑更新了一下ubuntu系统，再加之前几天更新了主机的显卡驱动，我的Ubuntu虚拟机挂了，驱动不兼容在无法加载登陆界面。虽然通过一些骚操作能够进入桌面系统，但已经不是最好的Linux体验了，所以打算重新安装最新版本的Ubuntu系统，重新搭建一下开发环境。正好填一下自己留的坑，记录一下这次虚拟机Ubuntu系统搭建的过程。 一、获取最新稳定版本的Ubuntu系统安装包。百度Ubuntu 第一个条目就是Ubuntu系统的官方下载 选择稳定版本的Download 等待迅雷下载完成 打开VM虚拟机-&gt;创建一个新的虚拟机 选择典型虚拟机 使用光盘镜像安装 文件定位到我们刚刚下载的Ubuntu安装包（*.iso文件） 给你的系统起个名字 填入自己想要的用户名和密码 因为我可能会存比较多的文件，Linux磁盘大小设置为40G ，拆分为多个文件 根据自己的电脑情况，自定义一下硬件： 最后点击完成，等待简易安装自动完成 就可以了。 二、软件安装 1、默认软件安装好后系统会推荐你安装一些软件，你可以根据自己的需要或者兴趣点击进行安装。 2、安装VM Tools因为是在VM虚拟机中，所以需要安装VM Tools，方便虚拟机和主机文件互传等操作。 emmmm 我一不留神，VM Tools自己装好了，如果你的虚拟机没有帮你完成，可以在虚拟机选项卡上右击手动选择安装VMware Tools。 3、切换软件安装源 因为国外网络访问速度问题，推荐大家切换最适合自己的软件安装镜像，ubuntu系统中就直接提供了这些功能，我们可以很快的通过图形界面进行切换，切换合适的镜像之后，下载速度基本可以达到满速。 常用命令 123sudo apt-get updatesudo apt upgrade 4、代码编辑器 VSCode只需要在终端中敲入一行代码 sudo snap install code –classic 5、git要给系统安装git，使用如下命令，方便后续和github连接获取仓库中的文件 sudo apt install git 6、其他软件遇到再更新。 至此我们就在windows系统下安装完成了Ubuntu版本的Linux环境了。 三、接下来接下来我会再Ubuntu系统上安装ESP8266的交叉工具链，配置ESP-IDF开发环境。在下一篇博文中单独列出。","link":"/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E7%AC%94%E8%AE%B0_Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"},{"title":"ESP8266开发学习笔记_XXXX","text":"ESP8266 开发学习笔记_By_GYC 【模板】之前是在其他博客平台写了一些文章，现在打算移植到自己的的平台上，所以使用此模板进行复制。 一、启用ets_printf函数欢迎关注我的博客和github呀~ 希望能够和各路大佬一起讨论技术问题~","link":"/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E7%AC%94%E8%AE%B0_%E6%A8%A1%E6%9D%BF/"},{"title":"使用 ESP32 作为蓝牙 adapter （适配器）","text":"Ubuntu 系统使用 ESP32 作为蓝牙 adapter （适配器）蓝牙可以通过 HCI 将 HOST 部分与 Controller 部分进行连接。 这篇文章说明了如何使用 ESP32-IDF 中包含的蓝牙示例应用程序 controller_hci_uart 通过主机控制器接口（Host Controller Interface）与 ESP32 蓝牙 controller 进行连接和通信。使用任何操作系统（Mac，Linux或Windows）的电脑都可以来编译此工程。 在此示例中使用的 Host 是 BlueZ 蓝牙协议栈。由于 BlueZ 是用于基于 Linux 内核的操作系统系列的蓝牙协议栈，因此本示例需要在一台运行 Linux OS 且安装了 BlueZ 的计算机与 ESP32 开发板进行通讯。 主机控制器接口（Host Controller Interface）可以使用 UART 连接 BlueZ 和 ESP32 蓝牙的 controller。 使用 uart 串口作为 hci 接口外部串口链接 uart 对应管脚 串口 ESP32 Tx GPIO 18 (Rx) Rx GPIO 05 (Tx) CTS GPIO 19 (RTS) RTS GPIO 22 (CTS) 如果不使用硬件流控，RTS 和 CTS 引脚设置可以写 -1 使用下面代码设置串口引脚 1uart_set_pin(HCI_UART_PORT, HCI_UART_TXD, HCI_UART_RXD, HCI_UART_RTS, HCI_UART_CTS) 默认的波特率为 921600 使用自带的 USB 转 uart 接口作为 hci 接口使用其他引脚作为串口链接到电脑需要额外链接一个串口设备，增加了成本还比较麻烦，所以我考虑使用 ESP 默认使用的 USB 串口，作为蓝牙链接串口。 但是由于 UART0 是默认配置的串口，用作系统信息的打印，所以默认没有打开作为 HCI 串口的选项，这里我们可以通过修改 esp_bt_controller_config 来设置 hci 使用串口 0。 123esp_bt_controller_config_t bt_cfg = BT_CONTROLLER_INIT_CONFIG_DEFAULT();/* set hci use uart number*/bt_cfg.hci_uart_no = HCI_UART_PORT; 同样由于 UART0 是系统信息打印的串口，引脚（TX-&gt;GPIO1,RX-&gt;GPIO3）已经默认配置好了，不需要再次设置引脚。但是 ESP32 DevKitC 的 USB 转 UART 没有接 RTS 和 CTS，所以需要使用 uart_set_hw_flow_ctrl 关闭硬件流控。 如果使用 uart_set_sw_flow_ctrl 开启软件流控,需要修改 XON 和 XOFF的值，有些数据会被软件流控截断，不建议使用。 使用 Ubuntu 系统连接 ESP32 蓝牙适配器将串口链接到电脑上，会出现对应串口的设备。如： /dev/ttyUSB1 将串行设备 (serial devices) 连接到 BlueZ 蓝牙协议栈1sudo btattach -B /dev/ttyUSB1 -S 921600 可以添加 -N 关闭 BlueZ 的硬件流控sudo btattach -N -B /dev/ttyUSB1 -S 921600 成功执行后会显示配置信息和连接设备的编号(index) 123Attaching Primary controller to /dev/ttyUSB0Switched line discipline from 0 to 15Device index 1 attached 注意：这个窗口不要关闭！到这里，系统就已经连接了 ESP32 的 adapter 我们还可以使用以下命令行工具进行调试。 使用 BlueZ 管理工具 btmgmt btmgmt: - A command-line interface of BlueZ for management Usage: 根据 btattach 连接上设备的 index，使用下面命令连接设备。 1sudo btmgmt --index 1 测试命令1234power on 打开电源find 搜索设备stop-find 停止搜索power off 关闭电源 1234567891011121314151617181920$ sudo btmgmt --index 1[hci1]# power onhci1 Set Powered complete, settings: powered bondable ssp br/edr le secure-conn [hci1]# findDiscovery startedhci1 type 7 discovering onhci1 dev_found: 6F:E6:68:BD:41:05 type LE Random rssi -94 flags 0x0000 AD flags 0x1a eir_len 18hci1 dev_found: 0C:E9:99:CE:F5:7D type LE Random rssi -69 flags 0x0004 AD flags 0x00 eir_len 31[hci1]# stop-findDiscovery stoppedhci1 type 7 discovering off[hci1]# power offhci1 Set Powered complete, settings: bondable ssp br/edr le secure-conn hci1 class of device changed: 0x000000[hci1]# 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include \"nvs_flash.h\"#include \"esp_bt.h\"#include \"soc/uhci_periph.h\"#include \"driver/uart.h\"#include \"driver/periph_ctrl.h\"#include \"esp_log.h\"static const char *tag = \"CONTROLLER_UART_HCI\";#define HCI_UART_PORT (0)#define BUF_SIZE (1024*4)#if HCI_UART_PORT == 0#define HCI_UART_TXD (1)#define HCI_UART_RXD (3)#define HCI_UART_RTS (-1)#define HCI_UART_CTS (-1)#elif HCI_UART_PORT == 1 #define HCI_UART_TXD (5)#define HCI_UART_RXD (18)#define HCI_UART_RTS (19)#define HCI_UART_CTS (23)#endif void reconfig_hci_uart(){ /* Configure parameters of an UART driver, * communication pins and install the driver */ uart_config_t uart_config = { .baud_rate = 115200, .data_bits = UART_DATA_8_BITS, .parity = UART_PARITY_DISABLE, .stop_bits = UART_STOP_BITS_1, .flow_ctrl = UART_HW_FLOWCTRL_DISABLE, .source_clk = UART_SCLK_APB, }; int intr_alloc_flags = 0; ESP_ERROR_CHECK(uart_driver_delete(HCI_UART_PORT)); ESP_ERROR_CHECK(uart_driver_install(HCI_UART_PORT, BUF_SIZE, 0, 0, NULL, intr_alloc_flags)); ESP_ERROR_CHECK(uart_param_config(HCI_UART_PORT, &amp;uart_config)); ESP_ERROR_CHECK(uart_set_pin(HCI_UART_PORT, HCI_UART_TXD, HCI_UART_RXD, HCI_UART_RTS, HCI_UART_CTS)); #if ((HCI_UART_RTS == -1) || (HCI_UART_CTS == -1)) ESP_ERROR_CHECK(uart_set_hw_flow_ctrl(HCI_UART_PORT, UART_HW_FLOWCTRL_DISABLE, UART_FIFO_LEN - 8)); #endif }void app_main(void){ esp_err_t ret; /* Initialize NVS — it is used to store PHY calibration data */ ret = nvs_flash_init(); if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) { ESP_ERROR_CHECK(nvs_flash_erase()); ret = nvs_flash_init(); } ESP_ERROR_CHECK( ret );// HCI_UART_PORT == 0 had been enabled#if HCI_UART_PORT == 1 periph_module_enable(PERIPH_UART1_MODULE);#elif HCI_UART_PORT == 2 periph_module_enable(PERIPH_UART2_MODULE);#endif periph_module_enable(PERIPH_UHCI0_MODULE); esp_bt_controller_config_t bt_cfg = BT_CONTROLLER_INIT_CONFIG_DEFAULT(); /* Set the uart number used by hci*/ bt_cfg.hci_uart_no = HCI_UART_PORT; ret = esp_bt_controller_init(&amp;bt_cfg); if (ret != ESP_OK) { ESP_LOGE(tag, \"Bluetooth Controller initialize failed: %s\", esp_err_to_name(ret)); return; } reconfig_hci_uart(); ret = esp_bt_controller_enable(ESP_BT_MODE_BTDM); if (ret != ESP_OK) { ESP_LOGE(tag, \"Bluetooth Controller initialize failed: %s\", esp_err_to_name(ret)); return; }} #","link":"/2020/12/17/ESP32%E5%AD%A6%E4%B9%A0/%E4%BD%BF%E7%94%A8%20ESP32%20%E4%BD%9C%E4%B8%BA%E8%93%9D%E7%89%99%20adapter%20(%E9%80%82%E9%85%8D%E5%99%A8)/"},{"title":"ESP8266开发学习笔记_浮点数打印支持","text":"ESP8266 开发学习笔记_By_GYC 【更新 ets_printf 函数 使ESP_IDF 能够支持浮点数打印】 在我们日常的开发过程中，经常使用到的一个功能就是串口打印功能。在ESP8266的IDF框架中，提供了类似控制台的printf操作，可以向串口打印一些信息，但是ESP8266的printf函数被封装经过了简化，不支持浮点数的格式控制符%f。IDF框架中拥有ets_printf函数可以替代封装的printf函数，这个函数在SDK中有源码，可以供我们学习和修改。这篇文章就是总结一下我自己对ESP-IDF工程中的ets_printf.c文件的修改，以实现在ESP8266系统中ets_printf对浮点数的格式控制符的支持。 一、启用ets_printf函数使用ets_printf函数需要在工程配置里设置一下，在linux终端工程目录下输入 make menuconfig 进入工程配置页面 选择Component config选项卡 Enter进入 修改ESP8266工程宏定义配置 选择ESP8266-specific选项 Enter进入 选择 Using new ets_vprintf instead of rom code 选项 按下“空格”勾选。 最后选择 &lt; Save &gt; Enter 确认 , 然后一直选择&lt; Exit &gt;退出配置页。 至此，ets_printf.c 文件中的内容就生效，替换了原来rom中的ets_printf函数了。 二、修改ets_printf函数官方库里提供的ets_printf函数仍然不支持浮点数的格式控制符，但是源码已经给出了，我们可以在源码基础上修改，使它支持格式控制符“%f” 浮点数的格式控制包括“f”、“0”、“.”、数字几个操作，其中“0”、“.”和数字控制符都已经在格式控制系统内了，我们只需要写“f”对应的函数，并作为分支插入格式控制处理的switch结构里就可以了。 编写的过程参照了%d的格式处理过程： 12345678case 'd': attr.value.val32 = va_arg(va, int); if (attr.value.val32 &lt; 0) { ets_putc('-'); attr.value.val32 = -attr.value.val32; } ets_printf_int(&amp;attr, 10); break; 由%d的 处理我发现需要在attr结构体里添加double型的变量，用来缓存变参数列表里的float或者double类型的变量。 原结构体类型是下面这样的： 123456typedef union _val_cache { uint8_t val8; int32_t val32; uint32_t val32u; const char *valcp;} val_cache_t; 添加double类型的变量valfloat作为浮点数的缓存变量。新结构体类型如下： 1234567typedef union _val_cache { uint8_t val8; int32_t val32; uint32_t val32u; const char *valcp; double valfloat;} val_cache_t; 接下来，我们就可以在扫描格式控制的函数里，仿照%d的格式控制方式添加%f的格式控制了 涉及到的函数是 int ets_vprintf(const char *fmt, va_list va) 在遍历扫描的switch里添加 1case 'f': 在确定了本次所有格式控制操作之后的执行将数值写入打印缓存的switch操作里添加对应的float打印操作 12345678case 'f': attr.value.valfloat = va_arg(va, double); if (attr.value.valfloat &lt; 0) { ets_putc('-'); attr.value.valfloat = -attr.value.valfloat; } ets_printf_float(&amp;attr); break; 首先获取可变参列表里的double数据，判断是否为负，并把绝对值传递给专门的float打印函数。 专门的float型数据打印处理函数ets_printf_float(&amp;attr)是我自己根据这套打印结构的特点写的，参照了int型数据的处理过程，内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#define FLOAT_decimals_MAX_NUM 9#define VFLOAT_STR_MAX 20static int ets_printf_float(val_attr_t * const attr){ char buf[VFLOAT_STR_MAX]; unsigned char offset = VFLOAT_STR_MAX; int32_t integer=attr-&gt;value.valfloat; double decimals = (attr-&gt;value.valfloat-integer); if (attr-&gt;precision!=0) { for (int i =0; i&lt;attr-&gt;precision;i++) { decimals=decimals*10.0; } integer=decimals; if(decimals-integer&gt;0.5)//末位四舍五入 integer++; for (int i =0; i&lt;attr-&gt;precision;i++) { unsigned char c = integer % 10; buf[--offset] = c + '0'; integer /= 10; } } else { int i =0; for (i =0; i&lt;FLOAT_decimals_MAX_NUM;i++) { decimals=decimals*10.0; int digit=decimals; if((decimals-(digit))==0.0) { i++; break; } } integer=decimals; if(decimals-integer&gt;0.5) integer++; for (; i&gt;0;i--) { unsigned char c = integer % 10; buf[--offset] = c + '0'; integer /= 10; } } buf[--offset] = '.'; integer=attr-&gt;value.valfloat; if (integer != 0) { for (; integer &gt; 0; integer /= 10) { unsigned char c = integer % 10; buf[--offset] = c + '0'; } } else buf[--offset] = '0'; if (fill_num(attr)) { char fill_data = isfill_0(attr) ? '0' : ' '; unsigned char len = fill_num(attr) - (VFLOAT_STR_MAX - offset); unsigned char left = fill_num(attr) &gt; (VFLOAT_STR_MAX - offset) ? len : 0; if (!isfill_left(attr)) { ets_printf_ch_mutlti(fill_data, left); } ets_printf_buf(&amp;buf[offset], VFLOAT_STR_MAX - offset); if (isfill_left(attr)) { fill_data = ' '; ets_printf_ch_mutlti(fill_data, left); } } else { ets_printf_buf(&amp;buf[offset], VFLOAT_STR_MAX - offset); } return 0;} 有了这个函数就可以实现ESP8266的浮点数打印操作了。其他地方完全不用修改的。其中我设置了小数点后最大位数为9位，最大字符长度为20位，如果需要超过这个长度的数据打印，可以修改此处宏定义。（实际上double型的数据可以很长很长……） 有一点需要注意的是，格式控制符中有效数字个数包括小数点。这是和计算机中的printf格式控制保持一致的。 三、直接使用对于不关注技术实现细节的小伙伴可以直接下载我写好的文件，直接替换掉components/esp8266/source路径下原来的ets_printf.c文件即可实现浮点数的打印。 文件在我的github上（https://github.com/gengyuchao）。 欢迎关注我的博客和github呀~ 希望能够和各路大佬一起讨论技术问题~","link":"/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E7%AC%94%E8%AE%B0_%E6%B5%AE%E7%82%B9%E6%95%B0%E6%89%93%E5%8D%B0%E6%94%AF%E6%8C%81/"},{"title":"单元测试　Unit Testing","text":"嗨，请准确无误地输入密码查看哟！ 9afb9ccc87c0decb9df40ec9d0ed2d6858debb92fd303cdea966f3819bf88db74dfc61b5b54b265240aa3a9b8592584d329d343d18d48fb6f7f848e5843351789b5b6db0a08bd5a5a0d5fc58861cd0c4f55fff7c547b461742070fa4d86ea49d75a548dbcf578df92a9ad5455347a183bf5383920efdd82247e2b15a4b8c7e8f8263ef3432c99e348fe273b415e3c3c2ef26d88d50a764d700c5ab138f92062db1dc6be2803973a449f0ebc5a363c7394c44ae31c5212ce19b39b0bd56b53a1149805b198980435329ffb6a3689376172dd2c8257a551d4deeb1523d1c53e55a52b94c28f982830acdc9c13d4797fb65f593aca720e03bac5498df1a2495645f8b5932b93ba616978377e794715e2a2b984b7aaaffae02c4bdea3cb692e294b18772d45e4aa750b283fd40e252a117a1b35221900407fbb8d47f87bbd6a14ae6a6b6f53e1241b46701921dbee87b191fb8ab5edca0a25dc4bf64ccbf526f7c4e30e2e6fb7e89512bb85ab6981ff9f7d37e85aae9c945fce6f160546aa38c327e0c995de7c236f9a6f05e8bb241126009b5218530dc01b5a7bb172a487bff27209a28654754dc41bb3653d4b9342c26f7c4727f5ec5dfcf7ceebdf43270105b2c2ab5c935898bb76fde493c88eb3774a08dca6600bf47deb155f493c44930a0098654ddb2a874ab472e114872384e2ac2ebedc9df1273202504cee22c39865224d10b50a9deb8306a4e1ed19b80d6b5011a86fbe9f95afd596802cfa3721550effd30055d4ba5048321f9ea6bca726cfa9be46b69e0b5b3e345f27522be1fd2603f1a4c923da09693b2b153ee92f75d691ea49498a8eb3dd8cb9e1b5aafea8316a931dd01490475fac3b47c81eb484a28f0b21688d119157d2abb10547ca1d6b208e8c01d469e616011e1504f808ef0dfefe1d29ff462241985523abe327a76f3b9cdbda8f2deb3440d5913035831f512fab341a936af82f08bbdda16e9ae5557408c6752751661ccfc05670b39fee0410c6944d2d9ed60d7be7c01b80b05908792370d9e2781f2939f0f392e7493c065449a99309e767f017fa2a193907eb5ba5494b17002b389c9235436dd8315f6f903f6134d6bef1d83ef94829994a27562d4201c39a3a340f4e42335ddf1a76dbddb886be4668b762fb866eb3a298e94f84216e38ea0df7d4c36982db422d09aa498ef8dd68c0049847b0bc90c81d2d8c5f45c9fbe5d6db53b8f4c97b88300c1fddab926f3b9fd89b12dddbff109bb50925e5e170685c6e0f22121c853fd530fee7669f0c1459f51f94f70e2aaf96ca5b9cbdc14cd87ccb29985fb9273da90d83f67f5130492ac515ef3ba39efb37d5638178a144106115c64cff7a61528daaeb34aeb27f2d23412c7c4e7b0164476f4003084be0d0598723c2a63486fbad30843c0ca057e30810b56349a807c9dc7be6ab6b4099cc92da1d10c37d8191d21c62bffe1be36b68dd890a3c6427c00d083a397c56be0d919eaebd09b3d3b27adac0c3aa1d0bbbe06621a8ea83472dce725510aee16b9058dad70511db6fd49b9b53dc4551cc5d5099844b9dae83feaa4842d6ca5139f11e5533bcf5d1d0c9e3ba91418d373eb82b182c26e5d48b6f55fd0298c7c93ba9697520240544bcd0bf757eed44bece2b21992f37b0b8b8e07e62d706c7b71487bcf7bebbed102a4a78d18e538d7e0c2963e2ee192a63631a88511923af59524582a4971b64f47ddcffb9a0cde1225f2fecf88eee8096dfdc2c077c315282ea6fd18f5161e865a848babe61c7f0ce7afdf3a2f5422e09aa606789f28044af891708f1a269b941377b567d961b3f900324e15f2ddb6150167a8514cbaa154e231ba0dc82931124c95dff2e7284fdc1d52cade2041e0fec477722a30885049280cd148ac48948bb51d7ab86e920977d89e842aed3c6f13d0b30a042e64e14782fa87ad09fae7c3a314499fd33d89b2a29db092ca5bdb8f5d8d3d927410a1f5d2ca3e17c9920a29421f3afd154be139dbba8035b4d5de1333e9831281e9e255eace013cdf5d597476b53c84983e1bb816a17701c8a46aa7c36cd68221bc02cfb21607dabc8e95f84cf356783886c9407d91b990be1b8b0a80e029796626fc06f13a35cc5497cb281aa28fc89107d8e3e730a6cfa7a9c3aaf93287f4aa1dcf06721b6166075a59e854a2fdfaeb96f3a6aee1d06c5b21bd9a74c27d5772346770ca50299d047852c64df996ea4a29f9b1f38668b87827fd7ae055770856df561e11ab10fad1b3937e719638419ce18541d0f0da2f8a9779577a7c254e1076c52879bf6405e66bd1913b8cd0a3b96b1ffced38bfd945d935f87b64d2bfed28c4efb9de9038bd00b331dbf52002720aae295ce98809bf3217fe0a1f1b364ce5b40e25b5617d748a494430cc5513b1ea870c6219769dad8c9ed05955df809b0e3b3f761db7d45aa6cde01a7dd6f4a6eb5293b433776f6739f6f030191aa460016f2a2a15f393ad7a163411bcfecb7a30","link":"/2022/03/22/ESP32%E5%AD%A6%E4%B9%A0/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%20Unit%20Testing/"},{"title":"在 Window 系统上安装 ESP-IDF 环境的简单方法","text":"这里来介绍一下 Windows 环境下，使用 CMake 直接进行编译的方法。（不需要再下载 Mingw32 或者 ESP-IDF 工具安装器啦~）这里附带：官网说明 安装软件工具git 安装教程python 安装教程 使用 git 下载 ESP-IDFgit clone --recursive https://github.com/espressif/esp-idf.git 安装 ESP-IDF在 ESP-IDF 路径下 打开 cmd 命令窗口，输入：install.bat等待安装完成之后 根据提示输入 export.bat 即可在该窗口下使用 IDF 了。 编辑器推荐配合使用 VSCode 进行编辑，在使用了 export.bat 命令添加路径的 cmd 命令窗口中输入 code . 即可打开 VScode 并且环境变量能够被继承到 VScode 编辑器中。可以直接在 VScode 的 terminal 中，在工程路径下使用 idf.py 工具进行 make、flash、clean等操作，实现 Windows 系统上的 ESP32 开发。 Bug 解决目前发现 在 windows 环境下 VSCode 编译器中 无法正常的使用 idf.py menuconfig 菜单的上下键切换功能，也就是无法进行配置。但是这个问题有一个简单的解决方法，可以使用 start cmd命令召唤出新的 cmd 窗口，再使用 idf.py menuconfig 就可以使用方向键控制 menu 菜单了。 好啦 ESP-IDF 的简单安装方法就介绍完毕了~ 希望大家多多和我交流呀~ O(∩_∩)O哈哈~","link":"/2020/08/09/ESP32%E5%AD%A6%E4%B9%A0/%E5%9C%A8%20Window%20%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%20ESP-IDF%20%E7%8E%AF%E5%A2%83/"},{"title":"IT各职位-中英文对照","text":"中英文缩写对照 IT各职位中英文对照如下：123456789101112131415161718191、FE – Front End 前端工程师2、BE – Back End 后端工程师3、OP – Operation 运维工程师4、TS – Technology Support 技术支持5、UI – User Interface 用户界面设计师6、QA – Quality Assurance 测试工程师7、DBA – Database Administrator 数据库8、PM – Product &amp; Marketing 产品经理9、UE(UX) – User Experience 用户体验设计师10、UER – User Experience Research 用户研究","link":"/2020/08/09/English/IT%E5%90%84%E8%81%8C%E4%BD%8D-%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7/"},{"title":"Chrome 浏览器超链接变色问题","text":"本文主要解决因显卡变化而导致的 google chrome 颜色显示不正常问题。 异常是指的网页色彩变淡发白, 或者超链接变色。 表面原因网络中查询了一下，可能是因为换了显卡，但是显示设置不对。 这可能会导致 chrome 默认启用了 dispaly p3 d65 色彩模式， 此时更改 chrome 的颜色管理模式为 sRGB 就可以了。 62 版本以后的 chrome 在地址栏输入 chrome://flags/#force-color-profile 回车。 把右侧按钮由 default 改为 sRGB ，点击重启浏览器按钮即可。 此方案临时解决了我的问题。但是发现不只 Chrome 浏览器有问题，其他软件也有问题。 根本原因我的系统在不同的硬件上进行切换，确实可能会导致驱动问题，尤其是显卡和显示器 因为发现当前使用的是集成显卡，所以检查了显示器设置，发现显示器设置不对。 最终解决问题的方案是在系统设置（Settings-&gt;Device-&gt;Color-&gt;Laptop Screen）中，选择为正确的屏幕设置。","link":"/2022/03/22/Ubuntu%E7%B3%BB%E7%BB%9F/Chrome%E8%B6%85%E9%93%BE%E6%8E%A5%E5%8F%98%E8%89%B2%E9%97%AE%E9%A2%98/"},{"title":"Linux 系统蓝牙命令","text":"转载自 https://ywnz.com/linux/6185.html 在Linux操作系统上安装BlueZ使用与你的Linux发行版匹配的命令来安装BlueZ软件包： 1、针对Ubuntu/Debian：1$ sudo apt-get -y install bluetooth bluez bluez-tools rfkill 参考：在Ubuntu 16.04下编译安装BlueZ 5.49。 2、针对Fedora：1$ sudo dnf -y install bluez bluez-tools 3、针对Arch Linux/Manjaro：1$ sudo pacman -S bluez bluez-utils 此安装提供了bluetoothctl实用程序，如果你想连接到bluetooth tether，则需要将你的帐户添加到lp组： 123sudo usermod -aG lp $USERnewgrp lp 蓝牙设备应启动并启用： 12345$ systemctl is-enabled bluetooth.service enabled$ systemctl status bluetooth.service 安装和使用BlueZ(提供bluetoothctl程序)从Linux终端连接到蓝牙设备 如何配对并连接到蓝牙设备我们将使用bluetoothctl CLI tp配置bluez，如果你有替代的前端工具，例如GNOME蓝牙，则可以改用它。 首先，请确保未禁用蓝牙： 1$ rfkill 安装和使用BlueZ(提供bluetoothctl程序)从Linux终端连接到蓝牙设备 如果被阻止，请使用以下命令取消阻止： 1$ rfkill unblock 0 确认它已被阻止，运行rfkill命令查看，如下图： 安装和使用BlueZ(提供bluetoothctl程序)从Linux终端连接到蓝牙设备 使用bluetoothctl连接到蓝牙设备1、启动bluetoothctl交互式命令：12345$ bluetoothctlAgent registered$ bluetoothctl show 安装和使用BlueZ(提供bluetoothctl程序)从Linux终端连接到蓝牙设备 注：可以输入help命令以获取可用命令的列表。 2、打开你的蓝牙适配器：1234567891011[bluetooth]# agent KeyboardOnlyAgent is already registered[bluetooth]# default-agentDefault agent request successful[bluetooth]# power onChanging power on succeeded 3、进行扫描以检测你的蓝牙设备：12345678910111213141516171819202122232425# scan onDiscovery started[CHG] Controller 20:79:18:5E:4B:64 Discovering: yes[NEW] Device 14:AB:C5:CC:C7:AB 14-AB-C5-CC-C7-AB[CHG] Device 14:AB:C5:CC:C7:AB TxPower: 8[CHG] Device 14:AB:C5:CC:C7:AB Name: DESKTOP-N9GVMQ2[CHG] Device 14:AB:C5:CC:C7:AB Alias: DESKTOP-N9GVMQ2[CHG] Device 14:AB:C5:CC:C7:AB UUIDs: 0000110c-0000-1000-8000-00805f9b34fb[CHG] Device 14:AB:C5:CC:C7:AB UUIDs: 0000110a-0000-1000-8000-00805f9b34fb[CHG] Device 14:AB:C5:CC:C7:AB UUIDs: 0000110e-0000-1000-8000-00805f9b34fb[CHG] Device 14:AB:C5:CC:C7:AB UUIDs: 0000111f-0000-1000-8000-00805f9b34fb[CHG] Device 14:AB:C5:CC:C7:AB UUIDs: 0000111e-0000-1000-8000-00805f9b34fb[NEW] Device 5C:FB:7C:A4:13:C6 JBL Clip 3 4、与发现的蓝牙设备配对：1234567891011121314151617181920212223242526272829303132333435[bluetooth]# pair 5C:FB:7C:A4:13:C6Attempting to pair with 5C:FB:7C:A4:13:C6[CHG] Device 5C:FB:7C:A4:13:C6 Connected: yes[CHG] Device 5C:FB:7C:A4:13:C6 UUIDs: 00001108-0000-1000-8000-00805f9b34fb[CHG] Device 5C:FB:7C:A4:13:C6 UUIDs: 0000110b-0000-1000-8000-00805f9b34fb[CHG] Device 5C:FB:7C:A4:13:C6 UUIDs: 0000110c-0000-1000-8000-00805f9b34fb[CHG] Device 5C:FB:7C:A4:13:C6 UUIDs: 0000110e-0000-1000-8000-00805f9b34fb[CHG] Device 5C:FB:7C:A4:13:C6 UUIDs: 0000111e-0000-1000-8000-00805f9b34fb[CHG] Device 5C:FB:7C:A4:13:C6 ServicesResolved: yes[CHG] Device 5C:FB:7C:A4:13:C6 Paired: yesPairing successful# trust 5C:FB:7C:A4:13:C6[CHG] Device 5C:FB:7C:A4:13:C6 Trusted: yesChanging 5C:FB:7C:A4:13:C6 trust succeeded# paired-devicesDevice 5C:FB:7C:A4:13:C6 JBL Clip 3# devicesDevice 5C:FB:7C:A4:13:C6 JBL Clip 3 5、配对后连接到设备：123456789[bluetooth]# connect 5C:FB:7C:A4:13:C6Attempting to connect to 5C:FB:7C:A4:13:C6[CHG] Device 5C:FB:7C:A4:13:C6 Connected: yesConnection successful[JBL Clip 3]# info 安装和使用BlueZ(提供bluetoothctl程序)从Linux终端连接到蓝牙设备 打开电源时打开蓝牙适配器 要在Linux系统启动时打开蓝牙适配器的电源，请打开配置文件： 1234567$ sudo vim /etc/bluetooth/main.conf添加行：AutoEnable=true，如下：[Policy]AutoEnable=true 至此，操作完成。","link":"/2022/04/09/Ubuntu%E7%B3%BB%E7%BB%9F/Bluetooth_Linux_Cmd/"},{"title":"Ubuntu 上快速实现 TTS 的一种方法","text":"本方法使用的是 google 翻译接口 安装软件 gTTS 软件 12pip install gTTSgtts-cli 'hello' --output hello.mp3 --tld='cn' 注意，因为国内网路限制原因，只能使用 .cn 结尾的接口，所以 –tld 是切换网站路径如果是中文的话，需要使用 -l “zj” 指定语言，否则语调过来会很奇怪 1gtts-cli '你很帅' --output hello.mp3 --tld='cn' -l &quot;zh&quot; 播放音频的软件 123sudo apt install soxsudo apt-get install sox libsox-fmt-all play hello.mp3","link":"/2022/07/16/Ubuntu%E7%B3%BB%E7%BB%9F/TTS%E5%9C%A8Ubuntu%E4%B8%8A%E8%BF%90%E8%A1%8C/"},{"title":"Qt 中无法使用搜狗输入法解决方法","text":"解决Qt中无法使用搜狗输入法的方法 在 Ubuntu 系统中使用 Qt 发现有的系统无法使用搜狗等中文输入法，该方法用于解决搜狗输入法不能在 Qt 等软件中使用的问题。（题外话：Ubuntu 19 的 VS Code 软件不能使用搜狗输入法是 Ubuntu 软件商店安装包的问题，只能从 VS Code 官网重新下载安装解决。） 步骤1. 编译 fcitx-qt5 源码1.1 编译 fcitx-qt 需要 cmake，安装 cmake 命令，如果已经安装，请略过;1sudo apt-get install cmake 1.2 安装 fcitx-libs-dev;1sudo apt-get install fcitx-libs-dev 1.3 设置qmake的环境变量，这一步很重要且环境变量的值因人而异 1.3.1. 首先确定你的Qt的安装目录，我这里是~/software/Qt5.6.0/，你的或者可能在/home/&lt;用户名&gt;/Qt5.6.0/ 1.3.2. export PATH=&quot;/5.6/gcc_64/bin&quot;:$PATH 1.4 下载fcitx-libs 源码 1.4.1 原文的 git clone git@github.com:fcitx/fcitx-qt5.git 不可行，需要修改为https://github.com/fcitx/fcitx-qt5 1.4.2. git clone https://github.com/fcitx/fcitx-qt5 1.5 编译 fcitx-qt51234cd fcitx-qt5cmake .make sudo make install 2. 拷贝 so 文件2.1找到文件编译完成后，需要把编译得到的 libfcitxplatforminputcontextplugin.so 拷贝到 Qt5.5 安装目录的 Tools/QtCreator/bin/plugins/platforminputcontexts 或 Qt5.6 安装目录的 Tools/QtCreator/lib/Qt/plugins/platforminputcontexts，注意：两个目录根据你的Qt版本而定，Qt安装目录因人而异。 2.2复制：Qt 5.5：cp platforminputcontext/libfcitxplatforminputcontextplugin.so /Tools/QtCreator/bin/plugins/platforminputcontextsQt 5.6：cp platforminputcontext/libfcitxplatforminputcontextplugin.so /Tools/QtCreator/lib/Qt/plugins/platforminputcontexts我这里是：cp platforminputcontext/libfcitxplatforminputcontextplugin.so ~/software/Qt5.6.0/Tools/QtCreator/lib/Qt/plugins/platforminputcontexts 3. 添加额外的环境变量12echo 'export XMODIFIERS=@im=fcitx' &gt;&gt; .bashrc echo 'export QT_IM_MODULE=fcitx' &gt;&gt; .bashrc 大功告成！ 遇到的问题说明：本人系统为 Ubuntu 16.04 LTS 英文版 ，遇到的问题基本和原文一样 1. 安装CMake失败问题描述：sudo apt-get install cmake 执行到 92 % 时提示下载失败，原因是找不到 IP 地址。问题解决：觉得应该是安装包源的问题，于是修改了系统默认的源。 123System Settings -&gt; Software &amp; Updates -&gt; Ubuntu Software -&gt; Download from 从原来的 China 改为 Main server，最后再sudo apt-get updatesudo apt-get install cmake 2. CMake 错误问题描述： 123456789CMake Error at CMakeLists.txt:8 (find_package):Could not find a package configuration file provided by &quot;ECM&quot; (requested version 1.4.0) with any of the following names: ECMConfig.cmake ecm-config.cmake Add the installation prefix of &quot;ECM&quot; to CMAKE_PREFIX_PATH or set &quot;ECM_DIR&quot; to a directory containing one of the above files. If &quot;ECM&quot; provides a separate development package or SDK, be sure it has been installed.-- Configuring incomplete, errors occurred! 解决方法：2.1. 到这个页面 https://launchpad.net/ubuntu/+source/extra-cmake-modules/1.4.0-0ubuntu1 下载 extra-cmake-modules_1.4.0.orig.tar.xz2.2. 解压后编译安装 1234cd extra-cmake-modules-1.4.0cmake .makesudo make install 3. 安装 extra-cmake-modules-1.4.0 失败问题描述： 123456789101112131415$:~/Downloads/extra-cmake-modules-1.4.0$ cmake .CMake Warning at tests/CMakeLists.txt:28 (find_package): Could not find a package configuration file provided by &quot;Qt5LinguistTools&quot; with any of the following names: Qt5LinguistToolsConfig.cmake qt5linguisttools-config.cmake Add the installation prefix of &quot;Qt5LinguistTools&quot; to CMAKE_PREFIX_PATH or set &quot;Qt5LinguistTools_DIR&quot; to a directory containing one of the above files. If &quot;Qt5LinguistTools&quot; provides a separate development package or SDK, be sure it has been installed.-- Looking for Sphinx Documentation Builder...-- Sphinx Documentation Builder not found - documentation will not be built (see http://sphinx-doc.org/)-- Configuring done-- Generating done-- Build files have been written to: /home/cposture/Downloads/extra-cmake-modules-1.4.0 解决方法：设置 CMAKE_PREFIX_PATH 环境变量 为 qtbase 目录（&lt;Qt安装目录&gt;/5.6/Src/qtbase/），我这里为：export CMAKE_PREFIX_PATH=”~/software/Qt5.6.0/5.6/Src/qtbase/“如果还是不行，则修改为 1export CMAKE_PREFIX_PATH=&quot;/home/cposture/software/Qt5.6.0/5.6/gcc_64/lib/cmake/&quot; 4. 缺少 xkbcommon 包问题描述： 1234 -- Found PkgConfig: /usr/bin/pkg-config (found version &quot;0.26&quot;) -- Could NOT find XKBCommon_XKBCommon (missing: XKBCommon_XKBCommon_LIBRARY XKBCommon_XKBCommon_INCLUDE_DIR) CMake Error at /usr/share/cmake-2.8/Modules/FindPackageHandleStandardArgs.cmake:108 (message): Could NOT find XKBCommon (missing: XKBCommon_LIBRARIES XKBCommon) (Required is at least version &quot;0.5.0&quot;) 解决方法：2.1. 到 http://xkbcommon.org/ 下载最新版的 xkbcommon2.2. 解压后， 1234sudo apt-get install bison./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --disable-x11makesudo make install","link":"/2022/03/22/Ubuntu%E7%B3%BB%E7%BB%9F/Qt%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E8%A7%A3%E5%86%B3/"},{"title":"使用 SSH 命令行开启远程桌面的方法","text":"使用 SSH 命令行开启远程桌面的方法 纯命令方法1dconf write /org/gnome/desktop/remote-access/prompt-enabled falsedconf write /org/gnome/desktop/remote-access/enabled truedconf write /org/gnome/desktop/remote-access/authentication-methods “[‘vnc’]”dconf write /org/gnome/desktop/remote-access/vnc-password ‘“MTIzNDU2”‘ # “MTIzNDU2” 是 base64 编码的 123456 systemctl –user start vino-server 纯命令方法2dbus-launch gsettings set org.gnome.Vino prompt-enabled falsedbus-launch gsettings set org.gnome.Vino authentication-methods “[‘vnc’]”dbus-launch gsettings set org.gnome.Vino vnc-password $(echo -n “mypassword”|base64) 使用 SSH -X 打开控制界面vino-preferences 设置开机启动 vinoedit the /etc/gdm3/custom.conf file making the following lines in [daemon] section look as this: AutomaticLoginEnable=trueAutomaticLogin=yourusername","link":"/2022/04/04/Ubuntu%E7%B3%BB%E7%BB%9F/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"title":"Ubuntu常用软件","text":"软件控制显示器的各种功能今天想使用一个显示器作为多个电脑的输出，发现显示器选择输入源的按钮很难按，所以就找了一个软件控制输入源的程序 ddccontroller 源代码仓库1https://github.com/ddccontrol/ddccontrol 安装1on Ubuntu: sudo apt install ddccontrol gddccontrol ddccontrol-db i2c-tools UsageFrom GUI using gddccontrolgddccontrol is a graphical utility for monitor configuration. It is called Monitor Settings in list of applications. Following configuration is needed to allow non-root user to use gddccontrol: 12sudo adduser $USER i2csudo /bin/sh -c 'echo i2c-dev &gt;&gt; /etc/modules' Utility can launched directly from commandline: 1sudo gddccontrol From command line using ddccontrolddccontrol allows monitor configuration directly from commandline. To probe I2C devices to find monitor buses use: 1sudo ddccontrol -p To read value of control 0x10 (brightness on VESA compliant monitors) for device dev:/dev/i2c-4: 1sudo ddccontrol -r 0x10 dev:/dev/i2c-4 To set value of control 0x10 (brightness on VESA compliant monitors) to 75 for device dev:/dev/i2c-4: 1sudo ddccontrol -r 0x10 -w 75 dev:/dev/i2c-4 See ddccontrol -h for more information.","link":"/2022/03/22/Ubuntu%E7%B3%BB%E7%BB%9F/%E6%98%BE%E7%A4%BA%E5%99%A8%E8%BD%AF%E4%BB%B6%E6%8E%A7%E5%88%B6/"},{"title":"Ubuntu常用软件","text":"Ubuntu常用软件 1、[ uGet ] Ubuntu 中使用的下载工具uget 很好用 安装命令如下 123sudo add-apt-repository ppa:plushuang-tw/uget-stable sudo apt-get update sudo apt-get install uget 2、[ indicator-sysmonitor ] Ubuntu 使用的资源监视器To install the AppIndicator via PPA: 123sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitorsudo apt-get updatesudo apt-get install indicator-sysmonitor Search in the dash for “indicator-sysmonitor” to run 3、[ Tweak-Tool ] Ubuntu 系统自带的桌面优化工具安装 Tweak-Tool sudo apt install gnome-tweak-tool 从Ubuntu存储库安装扩展Ubuntu 18.04版本附带了一些扩展，作为其软件包存储库的一部分。可以通过执行以下linux命令来安装这些扩展： $ sudo apt install gnome-shell-extensions 安装后，重新登录到您的Ubuntu系统并使用Tweak Tool启用任何所需的扩展。 从Gnome.org安装扩展安装Firefox附加组件 打开Firefox浏览器并访问firefox插件页面以进行gnome shell集成。准备好后，单击+ Add to Firefox。 点击Add添加GNOME shell集成。 安装Host Connector下一步是安装Gnome shell主机连接器。打开终端并输入： $ sudo apt install chrome-gnome-shell 无法安装主机连接器将导致错误消息： 123虽然GNOME Shell集成扩展正在运行，但未检测到本机主机连接器。有关安装连接器的说明，请参阅文档安装Gnome Extensions所有应该准备好安装gnome扩展。将您的Firefox浏览器导航到https://extensions.gnome.org/，然后只搜索您要安装的Gnome扩展。翻转ON开关以安装扩展。 高质量4k壁纸https://wallpaperaccess.com/4k-nature https://wall.alphacoders.com/ 4、[ Flameshot ] 屏幕截图和编辑在 Linux 中使用 flameshot功能概述： 注释 (高亮、标示、添加文本、框选)图片模糊图片裁剪上传到 Imgur用另一个应用打开截图Flameshot 在去年发布到 GitHub，并成为一个引人注目的工具。 如果你需要的是一个能够用于标注、模糊、上传到 imgur 的新式截图工具，那么 Flameshot 是一个好的选择。 下面将会介绍如何安装 Flameshot 并根据你的偏好进行配置。 如果你用的是 Ubuntu，那么只需要在 Ubuntu 软件中心上搜索，就可以找到 Flameshot 进而完成安装了。要是你想使用终端来安装，可以执行以下命令： 1sudo apt install flameshot 如果你在安装过程中遇到问题，可以按照官方的安装说明进行操作。安装完成后，你还需要进行配置。尽管可以通过搜索来随时启动 Flameshot，但如果想使用 PrtSc 键触发启动，则需要指定对应的键盘快捷键。以下是相关配置步骤： 进入系统设置中的“键盘设置”页面中会列出所有现有的键盘快捷键，拉到底部就会看见一个 “+” 按钮点击 “+” 按钮添加自定义快捷键并输入以下两个字段：“名称”： 任意名称均可。“命令”： /usr/bin/flameshot gui 最后将这个快捷操作绑定到 PrtSc 键上，可能会提示与系统的截图功能相冲突，但可以忽略掉这个警告。 5、[ Synergy ] 键鼠共享同步工具Synergy是一款开放源代码软件，能让用户通过网络在视线范围内使用一套键盘鼠标控制多台电脑。因为Synergy不能传输视频，所以每台电脑都需要连接显示器。除了在多台计算机间共享键盘鼠标，Synergy还能共享剪贴板。Synergy是跨平台的软件，可以在Windows，Linux和Mac OS X之间共享键盘和鼠标。 Synergy允许你轻松地在你办公桌上多台计算机之间共享你的鼠标和键盘。你只要将鼠标（指针）从一台计算机的屏幕边缘移出到另 一个屏幕就行了。 Ubuntu 安装 1sudo apt-get install synergy 12//解决 system tray is unavailable, don't close your window 问题sudo apt-get install sni-qt 最近又给 Windows 系统安装了 synergy ，遇到了 windows 系统与 Ubuntu 系统无法链接的问题，查看 log 发现是因为无法通过加密，因此，在 Ubuntu 系统里把 synergy 的设置里的使用 ssh 加密选项关掉就可以链接了。 注册码 17B76313B70726F3BE5BDAC20E585B33B313B73796E313333323040676D61696C2E636F6D3B3B3B7D 6、[ Terminator ] 分屏终端5分钟入手Terminatorhttps://www.jianshu.com/p/cee2de32ca28 7、[ GIMP及其插件 ] Ubuntu安装图片处理工具1. GIMPlinux上很多工程使用的专业软件的缺失真心是硬伤, 阻挡了一大批的喜爱者. 虽然Linux的发行版桌面做的越来越炫，基础的软件也都能找的替代品，其的开源性给软件的发展带来了很大的助力。但是解决专业软件的移植目前仍没有大规模的进行，很多软件只有win和mac版的. 比如对于图像处理软件，在Win上，Photoshop是不二的选择，但是做为一位程序员，Linux是我的不二选择，但是鱼和熊掌真得不可兼得吗? 不见得，因为有wine–牛B中的战斗机，其对于部分的DLL进行了重写，进而在linux下模拟出了windows的应用运行环境，让我们使用很多优秀非跨平台软件成了可能，真可谓条条大路通罗马. 但linux对于程序员来说是最为优秀的。真心的希望在今后的程序员时光中，能为开源的环境出一份力。 GIMP是开源的图像处理软件，在wiki上有详细的http://zh.wikipedia.org/wiki/Gimp。 主页：http://www.gimp.org/ 2. 安装GIMP目前的GIMP中都已经包含了GIMP的源, 我们可以直接使用apt-get安装 2.1 安装GIMP1sudo apt-get install gimp 2.2 安装插件GIMP Plugin Registry 包涵众多插件 1sudo apt-get install gimp-plugin-registry gimp-data-extras 当然也可以按照需要安装其他一些附属的包 插件 描述 gimp-data-extras 刷子/调色板/渐变色的GIMP插件集 gimp-gmic 用于《GREYC魔术图像转换软件》的GIMP插件 gimp-gutenprint GIMP的打印插件 gimp-plugin-registry GIMP的可选扩展库 gvfs-backends 用户空间虚拟文件系统-后端 xcftools 命令行工具，用于XCF文件的额外数据 gimp-gap gif动态图制作插件 mathmap 制作德罗斯特效应插件 [ wine ]安装后 输入文本框无法显示 解决方法 1winetricks riched20 网络差时可以直接下载文件放入系统目录中","link":"/2022/03/22/Ubuntu%E7%B3%BB%E7%BB%9F/Ubuntu%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"title":"系统使用技巧","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2022/03/22/Ubuntu%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"title":"Command","text":"嗨，请准确无误地输入密码查看哟！ 1e3dfbf7f1771c067d37a46eb42c5cd109ae897454b73b10e5dade021515283fd784b3ddf8ec571603904e69536d3380edc2444b845a54c00aef974ae7d8e93a8935047321229c7fb2355100ec2cb4f1bc751f3c9abf6f92a447b59b49b8ac224fd7296bf56bc3329c427a218d9b0c15934f8ee6f7126a8dbe555bc1041a918901b2ef933fba5dd5f8869b69c3f7dbe7eb5729a0ab723dcde9e0a6c69069ab0cc8725464a175a5da1cdbb22463cafa2b289bdcee35c69cb5e1be899c2758f57898e550924e61420e154ded7c4a21516c96bd4fa48b070c805b2725dc3bb929666ed55a700e3f24b74f9f2ad78310e32ef71edb29a8c80d9395e47dcf429dbcde751ee854a1f68bd850e8c78f9d03bfb089884a20b0044129fde9eb2ea73b6f8456e184aca9a5faf03f3d4818f2a9e76b184d1d17735351301463d6bb37755e7fa3be78ed37590b4f39be77ae9e358de911d36b96581621e374dacb33cbf337344e42c8da16051194191a8a4127b435d648c8de0fb48992ffd6e5aa740ecdbe976d5c25b4a409f860739b200a901b6f6b44a82ccfd775aa52b78d74a76ec4019e3130b0b043bf284600e888cf20fb5cbccb3e34b59069c01984c07b35d553d210c60191402f6b6ab37df379d8eac46171932ea6839ead8b7d00afe3a6b90ee86141d4a8a64c3113a208c9650dc5d47c369b7ee93d288d953d19e196dcbfcf8827458ecedc8464f10a5eb0b3dbfc9b0f209926e3ffa0d6842fa371d62fffa1ff27860c28514d6f7d0407095c456bd84364681b1fb3fdcb44390eda5ef6f67671083381f4adb3675f91e88cf1bdea19646e270561e66558222bcbfb4c396b0c1f3a5a0e65eb0f85dec8c2470bed6c17911dc7aecd9dc97d629114c8f9ac425c661bcce337b7b943b3ce09afef13a37b51def6b7ca9a653527ca43a2aaf9a985a633b605c9e6515737cfabcd37573a37d5fa23134560c9adf22e648421642b180267385d4fb7d670641cb183d1849493a7ab2534acffd5c25f1472966320e088471e462ace01b34025b516c723355e550d93c4ac3f8291877f87fb0f5a00e7cd50de372948182e7c8e1190d1dba7a1f742f4c16ec2d357d159b417a2b606f0d3abf48915f70145fef42c0e096bf76b2a083b7e8472d5381c0904e7b23e9b0c7c72ccaafd4151c5ede0c0f9c8d7ddba0aeaab7dcffb9e695a0d8a27c2399f7dc2cd8a9907037dc6198eec6cdf67e468347c7ab8bc3ff098b8ce131920b43601169179bfc65ccd1bdb01880b397b86cd141603ece98c6f178e7d14c4abf336289cffa44aa85edf2441f216d4ed8726d3527c1cdc65f349c6534b439b394efec4fe528dab435c9d2d9f3a50176b7fd8d687fcacd9fc386a9e4239e5ef30d0cee57a0e27ee21306913f225d7125c8bffe8bebff48545a4215ca91cdd4fa9c484535014701dd809226cbe80d4e301a6f3a86624f9f4d4fdd4cf88aa3dc6febdbc982f5b42c1b9d998925d15ad5bf556c65d77a9b8b6c35377e9c94ae8692157c796d4b861979c409907dd896d5b415cff91e5c28ac77cc8f179bed23c8c2fb89ceac495189db13665fbe4f8a9a6dc753e2d5bb95d82ec3a3c4681ea2cdd5ae19acfe6a98f37f091f20dcd6b9422e2561190a3b945820b0d5317b501c4d732eb619926384f0b29ce360e18af46bb936979c6809b408d6eb198dd89a25b6b1d9c818c74215b1745447682b0fcfdb0081e00d5ab1561bbf44b85bbc452acd964b049be6e464ee72d8cced32c0c3757062c4c15ed3058d9ace8717b1f3f2b04a7fe4213775205d7643a35a3832421373271fb86ed935ab501a85dabe3b3d81f0fdcc14adfa6503852ecf055baed12bd20c36952e9f4ce1a21936faeda6aacb438c2ea8c25bc27176f92b25a4b1180a6d033e763820d53f3dd02b99da3ed6cdffadabfe4590c03d2c6a3ee9334cf61b6646b1595d8685667d25f0f8933efc5e65cfbac5a7d94ecd80ffc43d6376ae8eea67e523ee9a3c9699c966894a15b78daa51981c7c23991516f70f0f5e38e73517808ac0e624bf2acfa6d4877cb421b05e0d72f934f622895e3e1e77e7fb7773001d1edf81ee83126e6fa77f376ffaa504c7941abc9da54b83ff97662243b8b40c634610cc8f555b994327960e420bbe5b7e9807958b70c74f82809590dab8186217d2cba7da9a583c687985ec7e68a9c4a220fc03904a3078671ce5d80142ec09d2738405fa3d50acdedb3c5feba6c99aeef2373a53d9b7ee7e51f87bb81baa0d7a823a3f4eab157fe7aa210f8ce638e044f739e4a7b3b2a555efb9381995d6d400aaff939ed94149bfee7947f42b131df45cdf08d10c6aa3e2078daec62f0e0843bf0b1508876d4e926401577e8de9b98f6b12f022412a629251a72b6808fb59a46cdc9d795d3b8a51ce18dcb6d840153b0ed3a745dd202eac92bfb52ed57b9215c8515aca4517a05fcf53884cf87b4f5f3a057ff1cdd94cfda3a7d5c52c040489469df225268b5268573e48794469a57b32e2a1f8ba02dfb0a99f051f191f29043da2257ae2fec7e9cf215655e7d2f1804db84b3266dcd30d19a0c1d5ab1293afb9e82dc8157c7a4479ad08efc4fef3eb6d466081c20079872d3818d7fd462574cd67520b79fd6216cec5efa55cea564de45f29460e8ce78f4a05544b6d84de40eaf60881e7614c63249fdc93d27601c11821b818a4cc9e4ff689b92a3746aeb41eb7b493487c42cb0a355b169f659da3e92ffeb41942831fe7cc778dcd10ca0890077d5ead0816f72b142adbe413dc3223e9f54ad6bacb7ef9da33022f2631574795aac05f568f636c9f0cc51d1590d28b7626162e266c32b261e8a620ebe1ac0b66075fb1e213933363c671af92d3f5afcea6ddd45b23ef1ef9ded813f622d05897d98616068fd2e201ce9d124ac58c478a59354d31e7d80b5eca34cfc7a40c6dadc2bccc708b15cb1b458923c99a1f97d65ed7bd97783177706f66fc41fdd15917ab3df243794fc433c81d605332246872ff9e5d3d622e7010f269bcea7e5d50522f96f7e9dd4c3224b3111c5ce0a449e3b9ac568dcd7f394f10a0e780ab436f5b51232e48fdb7e47b3705022fbaf35f80ad239306d384e274e0f8f7cc9afd7256b331dc43b81d6473c939870cceefe5c25162cc580486db792c3627478fcf9042c5d571f971f6f3defb8fd2531c735a84c4df5975261dbbfc7ff8f3b864383accce92317dc2a57140192fbe9db800f708502eba43e7a0dd0373bb5e4fabab87b0cb2bb086797546b5978004fc3e4daafeddc6e333ced0522be310e9dd027fdc117c8a3350ab148afa7c18d082e6f2f537d5e4e7a2e85e97288b7bb7df7db04d03ad530f37049a92b970dd6bddebca8597b91485998ced1bced07cc3c4d06d9877ef24fb23d20b660e595796bd25ad438b6c45bb0c3ca1749213c0aebe50e518f7a806c9a5854fab3d66abf42b58ee8a9ad86188e9c882dea6f23f9678bdb104d857f588960881a5913e46672353f8bfcb3979533b070188c6b16f37955c8f1bf3e0073a2cf3444182cddb9380f36b3f9fff41be9c9f06cbd25d750771fd91ff02a15e5646b576316c5eb3fa137e6eb2077ba676c71b5cb0185b84e96ebf862d2e86a522ca585e66ff024c5ab09e23f0cba58a45824cde09f35b2ddf537d17b6dd475f3e263c15b61d82a1263614823be12ac04ad2f769db14186244c510aa0ef25e398943d143cb3f81fe60e4010a37eee6df302c03443563bc79a2ef0a85b8aad124194daae22375f68ccdf3ce8def7c636b7b51ea895874babd309b12267c94a5337f4f4c663be8c56b2c001d2955c9b75684efc79d5325cc85eeb1fa5def42dc8cbd14f30c3315aeb8b82dfcd7c2a21a9356028ad542baf8c593784065f3418cdbfc4a0a63ce9ad0aabb25900c638ce270f2832e13612412d42626c7d5bbb02ef1b0c1b532c10d20c4c96e86e2681046aeaf69ca00a162bd2711827a1b13e75710c736e366266e93b53738a707815a4868337f283c5de3007951feb311687e8c9879c6f79c9bf08dc46e430b68f5cf6d649eff339f0f5aedc5f6c34aaed5b7af4b2e0","link":"/2022/03/22/%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3/Command/"},{"title":"个人学习计划","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2022/03/22/%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"},{"title":"我的日记-01","text":"嗨，请准确无误地输入密码查看哟！ 5085177ef8cd4699e182b0e3fc9358b98650aae19c518496bed3d66f50015d4d83a101301e7970b67c6b3e87afaea518c9a8391c48b28fbef07f8caa53555a39a54f9cbae17111addd0fdc6d3ef462925d9c80289d6e3f801c12f6509e4629c904e4faabb161bf9f129b4a0a699791781eb584d9bf12df5d3ef348d3fd7654609ac55ed7c247c6f80b2bccecbf4fad328c41ee39032f59dcc7f6249cabe97e1b435f203d2af8b766de8f3dcc46871c7e3983a72f5a650a43729134c755c65ea11e548acf8eae9d4c7223bab52080c4a308e8eb62a9f7d4ad8acc925c306fadc1a2619712236798d63225c28eddcefd236383814ed5681180ef49a5a6cf2b5ddd8f91251c076c35b945b1e0576f387b806a7582140d28fcac0b55624d1215a7677618b3e36689d3b8735f1387a65bc1943b1d929e40e97f13c77710f5653fda334ee62f7c47fe9ccf3fa593030842bd4c7a9a5aaaa1e50c804ec9ebbb8b821155c01834841f806d18e39f20a12fd1f56744a3ea9310dd7a30e9a152184388a011334f5abb1a5eae073575345a9fe560cb4db62503b8384220a3e1c61ed4ed9b678aac2eb678ad09751c17c923213a49798a801015cff904f39ff61afcee142f8f8c17df2469a07c371af55d38c4bdedd283c91e0f11de13f451c772fcd5ba30d31480f02c9e8680eb885dd083383315e9878cdcd07c2eb60595422e9a164241cb0c2e8ecc61885c0b2687606b8e8bca8d948f561db922a0db5ceb3ff38777b42493e954f8080cf8ed6c002e518123c5d880008cdd9f9775b4f3c96668882b00cbe69e4c091dd3491f74427999ba6b21ddde8a4e1cd29ea299e6f8a80b18a3f80727f9278fd9b8f6834d5cab49b0ed4ae02326609fedb305089c1dae9ba653b80f03df3624ae027369e40d980eebb1849b81844ab3bf74f978221396726b6b956b2a78d23a5c276ef20a046c8e3e49deeb06e369e743c8891c104c0f06de7dc28787b87268656cf09ce057d341dbf995c460d7a3a0e86197527ed165e3e104b623d857b9272acf5513f87808be960ef5a58e66ae5bda7123771fac134e0b111f047c9dc71597de2c5a16cca9020ffe2a612010f66f863ef80da7921ba31b9898ee87711c2056a7a3e01c9b35160b09ca72be6309bdf2f6f20ed441aa7a44a204a1ccf37bb2c6be8ee02b64cb76366318d17b2f55c1a8821f9bcd99be045201f90504e4fac7544529341d30e969cbd2e93ae24d04ce626ff956fc1e200ea494224cd43e6299919a24e886972f12088cdb7479097dea4592a3570239b79bfde5d9af80793bc1b9c18d3f3cd1b54da1d42a227af2a11ba1fc9b72435efa30b0d55cf39384ceaf115d5019a637e7592b217d2eec00d49335afebee3206a5fb8b5dffa9157a04ab3d5292141dbcd0463e7d33abb316d0c64028061daa79bd4986597b639b454254f9d45f5cd669f32321b0d66607b7b739e89210bc4a287c171f28cabbaea6f2a7357485e6cfec23e981f9563fedb439f8ca3188e393d9226d21030215a1e4f1adcee892f26cefb532e5f637bdae371b643f4ba3900e5fe596e7c6839091d81278fc8ef867b7f865b94f06cd6c9c656267c2e8dd2ff44b8ee8009c2c02ea0ffad4981a3c752835951e1e0feda2fbfeeced1fe25b7367c55da5280727ba433d7f831af1a463764b1adddedd2755d6701948398697f9db9d58f25b51455238b6e234e463e8db165eb96f0ecb87e1060987ead47c0bf9ae8e599f64ade3bb5839f30f28d93403e9a500bd17561b055208647bfd2e082fab22bee4c7942b8befbfdcdc7eaf52f0d7ea2ead1d7ed7e6a7289555d3337bb91ea22fecf10abac25969592683cb98135ae0ffc752105472576575bdf6ac50cddf3e7448adf977239ca2a7c9be79424a34b2339e6236c114ea8a4d54742589956c32bd439389c73d58a2aa62a190eaa444e93fb2ca7fe684150f8071f71bafaa65bf934a36765f09fbfffecf71c067edb2c1fc0779d3b42b0fb1748b9700e0af0d7199f5ce525c1e37ebf40cc465132d0e3b143cc69361a9f41ff3b10105dc7483a34b4fcd3fb6e75cad96be2b397d6537a4adb1bb6e58529fd7cc3ca70ffc4ea5be6670cdf50dafb41cc070ddfbf54459a633f7152053af55d5a7017e7a2a122a5e92ff75981572a7fa685e7004ccd696b3c2c395e019d877cd8e161f18b567034331b387f8ca5d058c8cd7eb070b9cf8357e7e5e4a1b28414fbedb4debe9ced701674322df3fc77c5c7bc2912fa2ccf7f615713b0b8625971d3e95d59f7c25821acf32b7eefd4b243cd6f8ddab5fb028186e3531b8d629","link":"/2022/07/07/%E6%97%A5%E5%B8%B8/%E6%88%91%E7%9A%84%E6%97%A5%E8%AE%B0-01/"},{"title":"setjump_and_longjump","text":"setjump_and_longjump setjump和longjump函数及使用注意事项，C语言setjump和longjump函数详解前面已经阐述过，对错误处理而言，goto 语句只能是在函数的局部作用域内跳转，而不能实现跨函数跳转。但在实际错误处理中，经常会遇到这样的场景：在一个深度嵌套的函数调用中发生了错误，需要放弃当前任务，从多层函数调用中返回，并且在较高层级的函数中继续执行（或许是在 main() 函数中）。要做到这一点，可以让每个函数都返回一个状态值，由函数的调用者检查并做相应处理。 很显然，遇到这种场景，goto 语句就显得无能为力了，而 setjmp 宏和 longjmp 函数组合就提供了这一功能，它们能够提供一种在程序中实现“非本地局部跳转”（non-local goto）的机制。其原型定义如下： 12int setjmp(jmp_buf env);void longjmp(jmp_buf env, int value); 从上面的原型定义中可以看出，setjmp 宏与 longjmp 函数都使用 jmp_buf 结构作为形参以保存程序当前的堆栈环境，它们的调用关系是这样的： 程序首先需要调用 setjmp 宏函数来初始化 jmp_buf 结构体变量 env，并将当前的堆栈环境信息存入 env 中，为以后调用 longjmp 函数恢复原来环境信息时使用。如果是直接调用 setjmp，那么它的返回值为 0；如果由于调用 longjmp 函数而调用 setjmp，那么它的返回值为非 0。由此可见，setjmp 宏函数能返回两次： 第一次是初始化时，返回值为 0。 第二次则是在遇到 longjmp 函数调用后，longjmp 函数将使 setjmp 发生第二次返回，返回值由 longjmp 函数的第二个参数给出，返回值为非 0。 相对于 setjmp 函数用于保存程序的运行时的当前堆栈环境，longjmp 函数则用于恢复在先前程序中调用 setjmp 函数时所保存的堆栈环境。当调用 longjmp 函数时，它会根据变量 env 所保存的堆栈环境来恢复先前的环境。与此同时，longjmp 函数的 value 参数值会被 setjmp 函数返回，程序继续得以执行。如下面的示例代码所示： 1234567891011121314151617181920212223242526#include &lt;stdio.h&gt;#include &lt;setjmp.h&gt;jmp_buf buf;void F2(void){ printf(\"F2()\\n\"); longjmp(buf,1);}void F1(void){ F2(); printf(\"F1()\\n\");}int main(void){ int jmpret = setjmp(buf); if(!jmpret) { F1(); } else { printf(\"继续执行main\\n\"); } return 0;} 运行结果为： F2() 继续执行main 从上面的代码中可以看出，对 goto 语句而言，setjmp 宏与 longjmp 函数不仅能够实现跨函数的全局跳转，而且其错误处理方式也比 goto 语句优雅得多。但是，在使用 setjmp 宏与 longjmp 函数进行错误处理时，必须注意如下两点。 1 setjmp 宏与 longjmp 函数组合使用时，它们必须有严格的先后执行顺序。也就是说，必须先调用 setjmp 来初始化 jmp_buf 结构体变量 env 之后，才能够调用 longjmp 函数来恢复到先前被保存的堆栈环境（即程序执行点）。如果在 setjmp 调用之前执行 longjmp 函数，那么将导致程序的执行流变得不可预测，很容易导致程序崩溃而退出。 2 longjmp函数必须在setjmp的作用域之内。在一个函数中使用 setjmp 来初始化一个全局变量（jmp_buf buf）buf 之后，只要这个函数没有被返回，那么在其他任何地方都可以通过 longjmp 调用来跳转到 setjmp 的下一条语句执行。也就是说，setjmp 将发生调用处的局部堆栈环境保存在一个 jmp_buf 结构体变量 env 中，只要主调函数中对应的内存未曾释放，在调用 longjmp 的时候就可以根据已保存的 jmp_buf 参数恢复到 setjmp 的地方执行。 其实，从上面的程序示例代码中不难看出，如果说 goto 语句使程序变得难以阅读，那么 setjmp 宏与 longjmp 函数组合这种非局部跳转会让整个代码的糟糕程度增加一个数量级，因为它能在程序中的任意多个函数间传递控制。因此，应当谨慎使用它们，尽可能避免在实际编码中使用 setjmp 宏与 longjmp 函数组合。尽管如此，在编写信号处理器时，它们偶尔还是会派上用场的。 最后，需要注意的是，无论使用什么样的错误处理方式，都不要忘记发现程序中错误的最好方法其实是执行程序，对代码进行逐条跟踪，这样可以观察数据在函数中的流动，同时检查出类似于上溢和下溢错误、数据转换错误、NULL 指针错误、错误的内存单元、用 = 代替 ==、运算优先级错误、逻辑运算等错误。","link":"/2020/08/09/%E7%BC%96%E7%A8%8B/setjump_and_longjump%E7%9A%84%E7%94%A8%E6%B3%95/"},{"title":"Qt_Tcp_文件发送项目.md","text":"嗨，请准确无误地输入密码查看哟！ 0ab0694274b0ea15e18c1c468ee002c52313eeebb569f43dd9bfb2569d84acb1915e3b77a7925591f1edfa5248c52e5705c383aa32bbc3e1215db1428898e8596d5106b6039cbf9e07746f4ff17ed88909f47345ce2d5cbf8a495d33933c0f4c2859e5be905f5f3b748fc30c1b19bd591f47c4b92d99d4e4f3f9022cc665928de285cf76b60403447d292a540328244e521f9638b11ec96aacfd4ccb837e692f156b183b66e54f6a59290acd7a37fadcfd154d55a165817b8e197d29dc5e61ebe9660033de1dcfae9b93f74637cae45a9194dfbc5ddc4e4b220fc0a391127317c9e8848ef99ec8e80ae1dcadbdb0c90d6d788bb03232c184022edd6f468fabfc677072e15708e2dd9d3de349042d75d6fa95bb007b06ea56c99ea06a405b0fedd796b58d4890013ac0039bfc5f5dbf27d63bdddbcb8120b065467945b7231e58db139d4e246287e8e2340f8617f906df2fcd9eb52824ad9422a698baa4b480ec7ca4a60e437528274a9b414e2b0b075fa8314a8b2ca18017a162f2e4fe8ef62fb357b771877ca944f9b7ff22b5b0b8f7dde0a0c773de57b14431909df2c01452e6e964e1d0c205f3f5f0eb2585d0b019e08d9880d92c3aa4026e11943cdbf0c70a4c4c8eb216d87bfce9823bca86f6afb87890f74247e591894828ae89cc802e15cc132cfb9bac7d7877c06a2c09fd9e4c04669d90178dd35300e09e2bc381f58616d46981975186a89e2d1c5479a14e36031a42578fb787a383283d2a92d8e9f95c4acfb7401a77eb9d524c3046a860e422fccb3ed02aa96bd8d89c473ba3ea0ac13b3ff8232eeacfd9cc72251db5b536acfcea74bbf92c31a35c8df32c90d568559b1a93d40e69697251063f6b2cac9c8304f6e3e0f05824a547976da2d0fadb9054f256a062c52eafb0631efaea9f2219ff951c8a86bce0b216255e45b2ed519a0a8702457019acc493d53c7ae31033ee14ceb7f46c32dd1a262079750285518c37610694e37437f090cd2c75b407e86547a64e092227a62f9829342840f19d965b3b2335fcb829e1b734d2377bcc6585074c7528383bcfb8fd949069de8dbe0cef94ed794aedc742a56a8756746f64316812128819fae47537b6c74f55d6098b200cb7d2a07f19bc6833daa1dbb32445f342c352a90884e484a7c9c3581a7baec372bb2e9c1eec560fca26bf6e3e369b4a016a07be97567f405a48af33345b9357722fd447c3f525f5e820eea0388ceb5fc7a0cb7836cb4ebf28581c6d385fd77f93f0c1d4903283e0ac762406ced2a2765fa44b6fce5d7770baccaace1376634a55b087efb84d99622e51975f3011ae51b07ca7b40c2ed08afdc84fceb92a16144f654f00206816e7bcb9d2090e3288669e58b78b718ed145c962ec8695b3c8e50e639ec48e8eec011a6e0a2af5b76da519ebcf9ab7c9c448e70641ffb2bbdfccf4042a8a135bc560a9be6ec1561bb7f000c4885a7fa62fa9ab87ad882fd498cdaa491cc4cc241a58fbc85d34f358afb6ac35ec64eee3afd91f78ed1bf9787b629e8c9d49167e75416516cc1257a8e1370d75768fdbbf593b123a6240113a25b0e1956193ea78fe164f94dab31e914b9b20e7127233f77c893c9de26cb299955e714b1217d6b23d86cbfbe7ac5b4f8bc8ceff5299ea9eff584a42fef3118ee92460bd0f1589fa87baf979dd560e37478d58827f32be13db6e3d3646fb3d24110cf92d4507cb338ac6354ab2ab5830f8d09a7ef6f18ccc62aa3a64ac6eb30b8ccb6efd0dad290ccd9b853b9a4e69e7d641067a2b8d3062766bd4bf00db5ee28f45a8776fbb8011b0ecb4b5e77d98b97161ff332a6e6b4ac04e562e0c9de1fde692eefe1445c276dc6806e6b3ab60584157b6f65b421ff6a51c7b1bf39a5a2111d59c13573a89c07b6414a3bac221aeca39df9943084be85d463070c99452aad90356e51bfd3633077ce44332a353a0abe7ee55ac4af3404b1183df2bddd80ad23fb266086ab27bf2e6e655a0e7767a739589407073c071041bc39ce8c4ce0a9fd641f6be309befa8f7e8c788fbb8067af816a97d7fe767eb85c618fb6b547a0732c4bbca9525b086fc2f3d7a512eca4e9732b803a0d20bd440679de906d41e5d0e99f000e5ea6eb6914a3d8db22f76937cd5e81f32556353e7b077e12df401b17beab21ee90d7f9c380bf9f78af6b804b3cc0268e348a29ff2a038cb71b9b9c5718e559fcb784ec67cac746003e5cd22d9a8821beb84409b194fabda3e01a2a676f0eb6a3df5d0ae44142c0e1aa545a649abd643842586f358e66ea2c35cb70e79378aac57f5cd308abbe5a09564e0cc1d3bc8651dd22348a1e4b0a6887510fb54327db27b73a0f45c067157c9bfe77a6a8b41cb52d7ee2e948a132f47bbc0209bd63222541ece3dd054768f6896f6064e1f7d0e8752d8cf00b26b480848b7800f384d5a67923d28341a79726a911cc634b23db35394028fe3a1ed8f727f6f530bdae19a459d7c25c863637f6e9160baf8426c12b9f7f9297374b191923162f886035d413740c3cf49215fa4d6ff8d7c2b255314cb5c54774404e6507eaf32e616272f465f84c4eff7faa067eaf4177d5cd43bda0922e13f4fac77902bc6a7113095a7ca5fac7890ef4d52bf6aa677f33066564968084cc6417687e65cc9db65a6aba519c8b025ae00c78b2eca42fd2bcdd9288c0af9af16dad8df161649953c196862657bd76d708df6c82c5e20d800c3ce0ef96c0281ca9ff8df4c9126eff33144727860341c5519de56b804d90297270dca0ce663215a5a6ad45990a155aef619b7cc278dc25221e92af113a6c79de225e17c7fbff2b1f45a2f47706576da52a6ce563281aeb05778d15a8aa8048e6295cb77911aa3f645e17d2821f8669f6766c27c1c2d5a74a7933047bb11d1f4b57b6be503d341569d1421690c443a2dd10d9c231cc308485d85fa638022d425a351e5a1993d9bbc515aded23d3f777449d5d5d3bf8e670d012406ccccaaa8a44174238f569643ae43dabc88aa074dacd11fa99b79b2bfb4d56f7b75a76a1a396f0a1f640b446bf6842fc461e70560ad29dc7f8ad07b4a48c01d3e31bbc2a4d00695b8b8b6fd10f0fea578cfafeed72ec47e040deb98b4d5e6dab9c9f2e64eb60683128a5eb5d008e1ecf255b4c94d624b7233b76b9b0979c1475593cfa527ef57b2fd457762f263c658e49b42c46668698cc174d752355c0d88bb266d141238b5955bb66fe23537900e5e1553ea967d7e424fea825b0684d17b2155382c8c3d7a7de1e93e1dbae4eff37106310f7d6b39bf38250512e18b2323adec26ce152e40e1050f16d9b4da14a759c1582ce0dead9189f1d7d3db1958e720186279091b820556b0d99f2bc2868fe3549b69d53f83f49e336eddb6e1f13b9a82ddda6a99452d1975ae1103c863d9548219c867635896c2d252725a0fa43727fdba96a459c0ecb035960c85bc7cf05d92b955e833ae639a6f6dcf7601da3fe0853dad56ee9705c57d40049474c37d851048cbf53c9aff837ba5dead01edb85fb49945ee9626cc77f78ecfc0b3416d0df4c6a62c4afd181bbd02251a4567ba6b04fced2b40f2390bab4a27ebdcd841abc28d52ef0fea15d3c6e236f1236a3edd50197bcf6c3d8b5b08cb2e934165e99f957fb8ff977b8fcc1732aac4f72a8fd453698a1b4b182e804f34cbcd0737549d5bd933134c41efdbec13d7c1edecb8562159eeb3328e6d93a74604183ac5f1d621cd05973dce6b703716fa6a050c632b3a8c5a43b5ef83529beff84a9a4aab82941abb04e783a115260a58b8ff4bac1077c3a4994a75d5ddc34cbf90a79879c10a760be8b864043f0cb8857536e1318ec47d37671555fc2940f56ff48bbd3832ebdd8ee4f3e9e7bf1309bf32ae389a3dffb7a33d2c33f33e0e70130668a40dfb8ab267a2eb247783dd63f1fdf041982a4c6cacc3d2379bf0c42254f371ac6ccb3ccb8090e9ceba7934f87cc38fbc65e0ca8160a3cc9d7f8f257a4e18cd9af0112e3be1f8477bc6b9d395b8368c9876a3cabc565cb176732073301f65a676bba3532ea1f21a5f86045165ed1cd87a015a36fecce6c16752e59fa343584e6a6cc8cc0c1f831cd2cce614190572de7287b8b500382f6bd962413c4512e1a4fb221b4a2ac5b1a6a70ad9321a11111cf1ec979b66bbe3df379887ac5c2ad63a930a16fc842178114e47421dc03cb3bb950265f0e9e0d027a1ec24a8d16d5f5b0429f68a06eb","link":"/2022/03/22/%E7%BC%96%E7%A8%8B/Qt_Tcp_%E6%96%87%E4%BB%B6%E5%8F%91%E9%80%81%E9%A1%B9%E7%9B%AE/"},{"title":"ESP8266开发学习笔记_BH1750光强传感器","text":"ESP8266 开发学习笔记_By_GYC 【BH1750光强传感器】 BH1750是一个光强传感器，能够对环境光强度进行量化，转化为环境中的光强度lux。它是使用IIC总线进行通信，通过读取寄存器来获得传感器的真实数据。我们常说的智能调光，就要用到此类传感器，因为这个传感器的精度还是很不错的，可以使用这个传感器作为反馈，将环境光照度稳定在一个期望的数值。本章主要介绍在 ESP8266 上使用 IIC 总线驱动 BH1750 光强传感器的方法。通过PID稳定环境光强度的内容将在后面介绍。 一、BH1750是什么BH1750是一个光强传感器，能够对环境光强度进行量化，转化为环境中的光强度lux。它是使用IIC总线进行通信，通过读取寄存器来获得传感器的真实数据。我们常说的智能调光，就要用到此类传感器，因为这个传感器的精度还是很不错的，可以使用这个传感器作为反馈，将环境光照度稳定在一个期望的数值。本章只介绍环境光传感器的驱动，通过PID稳定环境光强度的内容将在后面介绍。 二、驱动原理&amp;代码BH1750是使用IIC总线进行驱动的，IIC协议仅用4根线 VCC、GND、SCL 、SDA 就可以实现数据的交互，在BH1750传感器中还有一个位（AD0）是来控制不同地址的，置不同的电平可以改变传感器内部的地址，方便用来在IIC总线上做设备扩展。 关于IICIIC驱动我己经介绍过多次了，很多设备都使用IIC协议进行通信，但是他们实现的代码略有差异，有些只用到了部分功能，有些则是用到了全部的功能，有些通信速率高，有些通信速率低，但他们都是IIC协议，基本原理不变，规则不变。接下来我就针对这个传感器编写了适应的IIC驱动（C++语言版本）。（PS：获取以后有机会写一个完整的软件IIC驱动可以应对所有传感器而不需要特别写一个） IIC类文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 class IIC_Device{ private: gpio_num_t sda_io_num; //I2C_MASTER_SDA_GPIO gpio_num_t scl_io_num; //I2C_MASTER_SCL_GPIO public: IIC_Device(gpio_num_t sda_io, gpio_num_t scl_io) :sda_io_num(sda_io),scl_io_num(scl_io) { gpio_init(sda_io_num,scl_io_num); } /* * IIC GPIO初始化函数 * 参数：sda_io_num SDA引脚，scl_io_num SCL引脚 * 返回结果 ：成功 */ esp_err_t gpio_init(gpio_num_t sda_io, gpio_num_t scl_io); protected: void IIC_Start(void); //IIC 开始信号 void IIC_Stop(void); //IIC 结束信号 /* * IIC等待应答函数 * 返回1--应答出错 * 返回0--应答正确 */ uint8_t IIC_Wait_Ask(void); /* * 写一个字节 * 参数：要写入的数据 */ void IIC_WriteByte(uint8_t data); /* * 读一个字节 * 返回值：读出的字节 */ uint8_t IIC_ReadByte(void); /* * 发送Ack 应答信号 * 参数：是否应答 1-&gt;NOACK 0-&gt;Ack */ void SendACK(uint8_t ack); }; IIC实现函数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148/* * IIC GPIO初始化函数 * 参数：sda_io_num SDA引脚，scl_io_num SCL引脚 * 返回结果 ：成功 */esp_err_t IIC_Device::gpio_init(gpio_num_t sda_io_num, gpio_num_t scl_io_num){ gpio_config_t io_conf; printf(\"init BH1750 i2c\\n\"); // disable interrupt io_conf.intr_type = GPIO_INTR_DISABLE; // set as output mode io_conf.mode = GPIO_MODE_OUTPUT_OD; // bit mask of the pins that you want to set io_conf.pin_bit_mask = (1ULL &lt;&lt; sda_io_num) | (1ULL &lt;&lt; scl_io_num); // disable pull-down mode io_conf.pull_down_en = GPIO_PULLDOWN_DISABLE; // disable pull-up mode io_conf.pull_up_en = GPIO_PULLUP_ENABLE; // configure GPIO with the given settings ESP_ERROR_CHECK(gpio_config(&amp;io_conf)); ESP_ERROR_CHECK(gpio_set_level(sda_io_num, 1)); ESP_ERROR_CHECK(gpio_set_level(scl_io_num, 1)); printf(\"\\nBH1750_SDA_GPIO:%d BH1750_SCL_GPIO:%d\", sda_io_num, scl_io_num); return ESP_OK;} /* * IIC 开始信号 */void IIC_Device::IIC_Start(void){ gpio_set_direction(sda_io_num, GPIO_MODE_OUTPUT); //SDA_OUT(); I2C_MASTER_GPIO_OUT(sda_io_num, 1); //IIC_SDA=1; I2C_MASTER_GPIO_OUT(scl_io_num, 1); //IIC_SCL=1; delay_us(2); I2C_MASTER_GPIO_OUT(sda_io_num, 0); //IIC_SDA=0; delay_us(2); I2C_MASTER_GPIO_OUT(scl_io_num, 0); //IIC_SCL=0; delay_us(2);} /* * IIC 结束信号 */void IIC_Device::IIC_Stop(void){ I2C_MASTER_GPIO_OUT(scl_io_num, 1); //IIC_SCL=1; I2C_MASTER_GPIO_OUT(sda_io_num, 0); //IIC_SDA=0; delay_us(2); I2C_MASTER_GPIO_OUT(sda_io_num, 1); //IIC_SDA=1; delay_us(2);} /* * IIC等待应答函数 * 返回1--应答出错 * 返回0--应答正确 */uint8_t IIC_Device::IIC_Wait_Ask(void){ int count = 0; gpio_set_direction(sda_io_num, GPIO_MODE_INPUT); //SDA_IN(); I2C_MASTER_GPIO_OUT(scl_io_num, 1); //IIC_SCL=1; delay_us(2); while (gpio_get_level(sda_io_num)) // { count++; if (count &gt; 250) { IIC_Stop(); return 1; } } I2C_MASTER_GPIO_OUT(scl_io_num, 0); //IIC_SCL=0; delay_us(2); return 0;} /* * 写一个字节 * 参数：要写入的数据 */void IIC_Device::IIC_WriteByte(uint8_t data){ uint8_t i; gpio_set_direction(sda_io_num, GPIO_MODE_OUTPUT); //SDA_OUT(); for (i = 0; i &lt; 8; i++) { I2C_MASTER_GPIO_OUT(scl_io_num, 0); //IIC_SCL=0; delay_us(2); if (data &amp; 0x80) //MSB,从高位开始一位一位传输 I2C_MASTER_GPIO_OUT(sda_io_num, 1); //IIC_SDA=1; else I2C_MASTER_GPIO_OUT(sda_io_num, 0); //IIC_SDA=0; I2C_MASTER_GPIO_OUT(scl_io_num, 1); //IIC_SCL=1; delay_us(2); I2C_MASTER_GPIO_OUT(scl_io_num, 0); //IIC_SCL=0; data &lt;&lt;= 1; }} /* * 读一个字节 * 返回值：读出的字节 */uint8_t IIC_Device::IIC_ReadByte(void){ uint8_t data = 0, i = 0; I2C_MASTER_GPIO_OUT(sda_io_num, 1); //IIC_SDA=1; delay_us(2); gpio_set_direction(sda_io_num, GPIO_MODE_INPUT); //SDA_OUT(); for (i = 0; i &lt; 8; i++) { data &lt;&lt;= 1; I2C_MASTER_GPIO_OUT(scl_io_num, 0); //IIC_SCL=0; delay_us(2); I2C_MASTER_GPIO_OUT(scl_io_num, 1); //IIC_SCL=1; delay_us(2); if (gpio_get_level(sda_io_num)) // data = data | 0x01; else data = data &amp; 0xFE; } I2C_MASTER_GPIO_OUT(scl_io_num, 0); //IIC_SCL=0; delay_us(2); return data;} /* * 发送Ack 应答信号 * 参数：是否应答 1-&gt;NOACK 0-&gt;Ack */void IIC_Device::SendACK(uint8_t ack){ gpio_set_direction(sda_io_num, GPIO_MODE_OUTPUT); //MPU_SDA_OUT(); gpio_set_level(scl_io_num, 0); //MPU_IIC_SCL=0; I2C_MASTER_GPIO_OUT(sda_io_num, ack); //SDA = ack; //写应答信号 I2C_MASTER_GPIO_OUT(scl_io_num, 1); //SCL = 1; //拉高时钟线 delay_us(2); //延时 I2C_MASTER_GPIO_OUT(scl_io_num, 0); //SCL = 0; //拉低时钟线 delay_us(2); //延时} BH1750驱动本次所写的BH1750是 通过使用IIC类作为父类进行实现的。BH1750继承了IIC的特性，所以可以复用所有IIC中定义的功能。 本次编写的驱动库中，支持对传感器测量精度的控制和传感器值得读取。 光强传感器类定义 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class BH1750_Device : public IIC_Device{ private: uint8_t SlaveAddress = 0x46; //定义器件在IIC总线中的从地址,根据ALT ADDRESS地址引脚不同修改 //ALT ADDRESS引脚接地时地址为0xA6，接电源时地址为0x3A uint8_t BUF[8] = {0, 0, 0, 0, 0, 0, 0, 0}; //接收数据缓存区 /** * 通过IIC向BH1750发送数据 */ void BH1750_SendByte(uint8_t data); /** * 通过IIC读取BH1750数据 */ uint8_t BH1750_RecvByte(); /** * 向BH1750目标地址写数据 * 参数：目标地址 */ void Single_Write_BH1750(uint8_t REG_Address); /** * 连续读出BH1750内部数据 */ void Multiple_Read_BH1750(void); public: float data = 0; /** * BH1750运行的精度模式 */ BH1750_MODE currect_mode = BH1750_FAST_MODE; BH1750_Device(gpio_num_t sda_io_num, gpio_num_t scl_io_num) : IIC_Device(sda_io_num, scl_io_num) { init(); } /** * 初始化BH1750，根据需要请参考pdf进行修改**** */ void init(); /** * 读取BH1750传感器数据 */ float read_data(); /** * 设置BH1750 的精度模式 */ void set_mode(BH1750_MODE mode); esp_err_t delay_ms(uint32_t time);}; 光强传感器函数实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107/** * 通过IIC向BH1750发送数据 */void BH1750_Device::BH1750_SendByte(uint8_t data){ IIC_WriteByte(data); IIC_Wait_Ask();} /** * 通过IIC读取BH1750数据 */uint8_t BH1750_Device::BH1750_RecvByte(){ return IIC_ReadByte();} /** * 向BH1750目标地址写数据 * 参数：目标地址 */void BH1750_Device::Single_Write_BH1750(uint8_t REG_Address){ IIC_Start(); //起始信号 BH1750_SendByte(SlaveAddress); //发送设备地址+写信号 BH1750_SendByte(REG_Address); //内部寄存器地址，请参考中文pdf22页 //BH1750_SendByte(REG_data); //内部寄存器数据，请参考中文pdf22页 IIC_Stop(); //发送停止信号} /** * 连续读出BH1750内部数据 */void BH1750_Device::Multiple_Read_BH1750(void){ uint8_t i; IIC_Start(); //起始信号 BH1750_SendByte(SlaveAddress | 0x01); //发送设备地址+读信号 for (i = 0; i &lt; 3; i++) //连续读取6个地址数据，存储中BUF { BUF[i] = BH1750_RecvByte(); //BUF[0]存储0x32地址中的数据 if (i == 3) { SendACK(1); //最后一个数据需要回NOACK } else { SendACK(0); //回应ACK } } IIC_Stop(); //停止信号 delay_ms(5);} /** * 初始化BH1750，根据需要请参考pdf进行修改**** */void BH1750_Device::init(){ delay_ms(10); Single_Write_BH1750(0x01); } /** * 设置BH1750 的精度模式 */void BH1750_Device::set_mode(BH1750_MODE mode){ currect_mode = mode;} /** * 读取BH1750传感器数据 */float BH1750_Device::read_data(){ float temp = 0; int dis_data = 0; //变量 if (currect_mode == BH1750_FAST_MODE) { Single_Write_BH1750(0x01); // power on Single_Write_BH1750(0x13); // L- resolution mode delay_ms(18); } else if (currect_mode == BH1750_ACCURATE_MODE) { Single_Write_BH1750(0x01); // power on Single_Write_BH1750(0x10); // H- resolution mode delay_ms(180); //延时180ms } Multiple_Read_BH1750(); //连续读出数据，存储在BUF中 //printf(\"BUF = %d,%d,%d,%d,%d,%d,%d,%d\",BUF[0],BUF[1],BUF[2],BUF[3],BUF[4],BUF[5],BUF[6],BUF[7]); dis_data = BUF[0]; dis_data = (dis_data &lt;&lt; 8) + BUF[1]; //合成数据 temp = (float)dis_data / 1.2; data = temp; return temp;} 需要注意的是，BH1750光强传感器有三种精度，一种精度较低（4lx），但是可以转换速度快，每18ms就能够完成一次光强转换；另两种种转换精度高（0.5lx 1lx），但是转换速度低180ms（手册上写120ms~180ms）才能完成一次光强转换。 此外该传感器还有两种读取方式，一种是连续读取，该模式电源一直处于打开状态，还有一种是单次读取模式，此模式每次读取结束之后都会自动关闭电源，以达到节能的目的。 本次驱动中并没有写这一部分，只分了快速连续模式和精确连续模式，或许以后用到会再进行完善，或者如果大家有兴趣可以添加这部分简单的代码推送到我的github仓库，我会将好的代码merge进去。 三、结语最近写博客的质量下降的很厉害，我自己也有感觉到，但是最近实在是太累了，每天很晚才回到家中。每天都在学习没有接触过得新鲜知识，感觉没有太多的精力去对以前的项目做博客分享这些事情，但我还是会坚持下去的，毕竟这是自己喜欢的事情。现在是凌晨1:30分，我已经困倦不堪，希望等我下一次闲下来的时候能够好好地再梳理一下我想要分享的这些东西。 本次项目的例程在我的github仓库上：https://github.com/gengyuchao/ESP8266_example/tree/master/project_BH1750 欢迎大家来我的博客评论和给我留言，或者给我的github项目点星星，提issue，提交pull request。把更多更好更有趣的知识传递下去。O(∩_∩)O哈哈~","link":"/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_BH1750%E5%85%89%E5%BC%BA%E4%BC%A0%E6%84%9F%E5%99%A8/"},{"title":"ESP8266开发学习笔记_ws2812三原色灯","text":"ESP8266 开发学习笔记_By_GYC 【spi方式驱动 ws2812 三原色灯（稳定优化）】 本章介绍ESP8266 IDF 框架下 如何使用 骚操作 的使用SPI总线，发送更高精度的脉冲信号，ws2812作为控制芯片三色灯的使用方法，实现三原色显示灯带。在研究过程中，发现ESP8266的引脚响应速度有些慢，输出2.5us才能够翻转一次，而ws2812的控制电平分辨率要求在百纳秒级，所以需要其他方法来输出控制信号才能保证灯光稳定。本次选用SPI信号输出口，使灯光达到了稳定。 一、驱动ws2812遇到的问题在淘宝上偶然看见有只需要一个引脚就能高速的控制三原色全彩LED灯，这让我很感兴趣，就买下来回来尝试，结果到手当天就遇到了很严重的问题，根据手册的说明写了一下简单的驱动程序，灯亮是能亮但是只有一个颜色，没有办法像网上说的那样能够自由的调节颜色，搞得我很是崩溃，还以为自己的编程水平出了问题，明明代码逻辑已经没有什么问题了，却还是不能正常显示，我就喊朋友来帮忙驱动一下，他用stm32的开发板，十几分钟就从网上扣下源码给我驱动了，代码逻辑和我的相差无几。 那么确定不是代码的问题了，就要找找其他的问题，比如我正在研究的单片机ESP8266。放到示波器上显示GPIO引脚的输出电平可以发现，引脚的实际输出速度并不像程序设计的那样，实际操作时ESP8266的管脚每2.5us（0.4MHz）才能够进行一次有效的翻转，而ws2812的控制电平要求精度在百ns级别，普通的GPIO管脚并不能达到这样的速度，而stm32的引脚翻转速度远大于ESP8266的，其I/O口驱动电路的响应速度有2M、10M、50M可选，轻松就能达到百纳秒的精度。所以stm32能够轻松的驱动ws2812而ESP8266只能通过骚操作来实现。 二、可能的方案1、特殊GPIO 一般如stm32主频比较高的单片机，可以直接通过驱动GPIO引脚，控制引脚的翻转，实现对ws2812的控制。虽然ESP8266的GPIO翻转速度无法达到期望的速度，但是根据网上其他人的分享，发现ESP8266的GPIO0的翻转速度和响应速度都比片上其他的GPIO快，可以作为ws2812的驱动引脚。经过测试，发现配合寄存器操作的GPIO0确实能够驱动ws2812、并且能够显示色彩进行调节。不过这种方法稳定性较低，不知道是我使用的芯片问题还是普遍存在，用GPIO0驱动的ws2812灯圈（8个）不稳定，偶尔就会一个灯珠颜色错误。这让我很是难受。 2、使用pwm驱动 PWM，周期设置为3MHz，发送0就把占空比设置为33%，发送1就把占空比设置为66%。也是一种很有创意的驱动方式。可惜的是ESP8266的PWM功能是通过定时器用GPIO翻转模拟的，它的PWM 周期范围是：1000us (1KHz) ~ 10000us (100Hz)，达不到要求。 3、使用SPI方案（本次使用） 可以注意到，将SPI的时钟调整为8MHz，发送一字节是1us，一个比特是0.125us，给ws2812发送逻辑0即可以通过SPI总线发送11000000b来实现（0.25us高电平，0.75us低电平），发送逻辑1即可以通过SPI总线发送11111100b来实现（0.75us高电平，0.25低电平）。通过这种方式驱动的灯光稳定可靠。能够保证灯光不会出现闪烁或者某个灯珠颜色跳变的情况。本次要介绍的ws2812驱动就是使用这种控制方式来实现的。 TODO: 低电平时间0.25us是硬件规定的低电平最小时间，如果能增大一点会更稳定，可以把控制引脚高低的数据改成数据流，比如 TL：1110000000b （0.375us[0.4-0.025] 高电平，0.875us[0.85+0.025] 低电平） 9位 共1.125us TH：1111110000b （0.75us [0.8-0.05] 高电平，0.5us [0.45+0.05] 低电平）9位 共1.125us 高低电平的数据组合组成一长串的 spi 数据，可以使控制更加稳定。 三、具体实现首先根据ESP8266 的资源信息确认需要用到的引脚。 根据上图所示，ESP8266在nodemcu上的SPI引脚是D5-D8、我们可以通过初始化控制禁用CS和MISO使能，只使用MOSI作为WS2812的输出引脚。设置SPI的时钟频率（SPI clock frequency）为8MHz，使一个字节周期为1.25us。 spi引脚初始化函数如下。 123456789101112131415161718192021222324252627282930313233void ws2812_spi_mode_init(void) //must use the ESP8266 GPIO13 as the hspi pin to drive WS2812B RGB LED!!!{ uint8_t x = 0; ESP_LOGI(\"WS2812\", \"ws2812 init gpio\"); ESP_LOGI(\"WS2812\", \"init hspi\"); spi_config_t spi_config; // Load default interface parameters // CS_EN:1, MISO_EN:1, MOSI_EN:1, BYTE_TX_ORDER:1, BYTE_TX_ORDER:1, BIT_RX_ORDER:0, BIT_TX_ORDER:0, CPHA:0, CPOL:0 spi_config.interface.val = SPI_DEFAULT_INTERFACE; // Load default interrupt enable // TRANS_DONE: true, WRITE_STATUS: false, READ_STATUS: false, WRITE_BUFFER: false, READ_BUFFER: false spi_config.intr_enable.val = SPI_MASTER_DEFAULT_INTR_ENABLE; // Cancel hardware cs spi_config.interface.cs_en = 0; // MISO pin is used for DC spi_config.interface.miso_en = 0; // CPOL: 1, CPHA: 1 spi_config.interface.cpol = 1; spi_config.interface.cpha = 1; // Set SPI to master mode // 8266 Only support half-duplex spi_config.mode = SPI_MASTER_MODE; // Set the SPI clock frequency division factor spi_config.clk_div = SPI_8MHz_DIV; // Register SPI event callback function spi_config.event_cb = spi_event_callback; spi_init(HSPI_HOST, &amp;spi_config); ESP_LOGI(\"WS2812\", \"init over\");} 需要注意的是，这里虽然没有用到，但是你需要设置spi的事件回调函数，即使他是空的 12345678910111213141516171819202122static void IRAM_ATTR spi_event_callback(int event, void *arg){ switch (event) { case SPI_INIT_EVENT: { } break; case SPI_TRANS_START_EVENT: { } break; case SPI_TRANS_DONE_EVENT: { } break; case SPI_DEINIT_EVENT: { } break; }} 准备工作做好之后，我们就要编写数据发送函数了。网上其他的例程里面常常把数据发送函数分为位发送、字节发送、像素点发送三层，层层调用，这种逻辑非常的便于阅读。但是在引脚响应速度并不那么快的单片机上，这种结构并不能保证时序的稳定性，因此，此处我直接略去了前两个过程，直接提供了一个像素数据发送的函数。避免函数切换、SPI重新启动引起的时序不稳定问题。 这个函数在结构上还有待优化，待我闲下来的时候再重构一下，先提供一个能够使用的版本，也希望有高手能够分享这个程序的简化版本。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263void WS2812BSend_24bit(uint8_t R, uint8_t G, uint8_t B){ uint32_t GRB=G&lt;&lt;16|R&lt;&lt;8|B; uint8_t data_buf[24]; uint8_t *p_data=data_buf; //能用 等待优化! uint8_t mask = 0x80; uint8_t byte = G; while (mask) { if( byte &amp; mask ) {*p_data = 0xFC;/*11111100b;*/} else {*p_data = 0XC0;/*11000000b;*/} mask &gt;&gt;= 1; p_data++; } mask = 0x80; byte = R; while (mask) { if( byte &amp; mask ) {*p_data = 0xFC;/*11111100b;*/} else {*p_data = 0XC0;/*11000000b;*/} mask &gt;&gt;= 1; p_data++; } mask = 0x80; byte = B; while (mask) { if( byte &amp; mask ) {*p_data = 0xFC;/*11111100b;*/} else {*p_data = 0XC0;/*11000000b;*/} mask &gt;&gt;= 1; p_data++; } uint8_t* p_8_data; for(int i=0;i&lt;6;i++) { p_8_data=(data_buf+(i*4)); uint8_t temp; for(int j=0;j&lt;2;j++) { temp=p_8_data[j]; p_8_data[j]=p_8_data[3-j]; p_8_data[3-j] = temp; } } uint32_t *spi_buf=(uint32_t*)data_buf; spi_trans_t trans = {0}; trans.mosi = spi_buf; trans.bits.mosi = 24*8; //ETS_INTR_LOCK(); spi_trans(HSPI_HOST, trans); //ETS_INTR_UNLOCK();} 比较麻烦的是，我这里每次传输了192（24*8）bit，由于这是32位的单片机，他是以32bit为单位进行传输的，而且每次都是从低位开始传输。由于ESP8266是小端字节序（与我们的阅读习惯不一致），所以在设置传输的时候需要将数据反一下，保证数据输出的顺序是我们想要的顺序。 以unsigned int value = 0x12345678为例，分别看看在两种字节序下其存储情况 |内存地址 |小端模式存放内容 |大端模式存放内容||：——-： |：——-： |：——-：||0x4000 |0x78| |0x12||0x4001 |0x56| |0x34||0x4002 |0x34| |0x56||0x4003 |0x12| |0x78| 有了如上函数，我们就可以轻松的点亮ws2812三原色灯珠了。 ws2812具体的协议可以参考技术规格书（https://wenku.baidu.com/view/25f176db482fb4daa48d4ba1.html?rec_flag=default&amp;sxts=1561280682919）， 使用到的主要内容如下： 需要注意的是 要保证电源稳定，因为电源问题我遇到了 意外的灯光闪烁、多个灯一起点亮时产生颜色偏差 的问题，更换了供电线和使用5V给模块供电之后，颜色显示完全稳定和正常了。保证硬件良好是软件调试好软件的关键。 四、测试程序 123456789101112131415161718192021222324252627#define PIXEL_MAX 4 //the total numbers of LEDs you are used in your projectuint8_t rBuffer[PIXEL_MAX]={0,0,255,255};uint8_t gBuffer[PIXEL_MAX]={0,255,0,255};uint8_t bBuffer[PIXEL_MAX]={255,0,0,255};void WS2812_Test(void){ //初始化 HSPI 作为数据输出引脚 ws2812_spi_mode_init(); //刷新显示4个LED灯 for(int i=0;i&lt;PIXEL_MAX;i++) { WS2812BSend_24bit(rBuffer[i],gBuffer[i],bBuffer[i]); }}调用我github上写好的库函数进行测试：void app_main(void){ printf(\"SDK version:%s\\n\", esp_get_idf_version()); printf(\"WS2812 Demo\\n\"); WS2812_Init(); //初始化 rainbowCycle(10); //彩虹环} 效果 五、还没结束目前这个项目还未完全完成，还存在一些优化空间，希望大家能够多多和我交流，写出更好的程序。O(∩_∩)O哈哈~ 在此特别感谢“半颗心脏”大佬对我项目的关注，互相学习啦。 我的源文件和头文件已经上传至我的github上（https://github.com/gengyuchao），欢迎大家关注我的博客和github呀。","link":"/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_ws2812%E4%B8%89%E5%8E%9F%E8%89%B2%E7%81%AF/"},{"title":"端口号范围（转）","text":"端口号范围 和 入侵电脑端口查询原文转自 http://blog.sina.com.cn/s/blog_4bdf819f0100vryh.html 端口使用一个16位的数字表示，它的范围是 0~65535，0到1023之间的端口号保留给预定义的服务。例如：http使用 80 端口。我们在编写网络应用程序时，要为程序指定 1024～ 65535 之间的端口号。 端口概念在网络技术中，端口（Port）大致有两种意思：一是物理意义上的端口，比如，ADSL Modem、集线器、交换机、路由器用于连接其他网络设备的接口，如RJ-45端口、SC端口等等。二是逻辑意义上的端口，一般是指TCP/IP协议中的端口，端口号的范围从0到65535，比如用于浏览网页服务的80端口，用于FTP服务的21端口等等。我们这里将要介绍的就是逻辑意义上的端口。 （1）知名端口（Well-Known Ports）知名端口即众所周知的端口号，范围从0到1023，这些端口号一般固定分配给一些服务。比如21端口分配给FTP服务，25端口分配给SMTP（简单邮件传输协议）服务，80端口分配给HTTP服务，135端口分配给RPC（远程过程调用）服务等等。 （2）动态端口（Dynamic Ports）动态端口的范围从1024到65535，这些端口号一般不固定分配给某个服务，也就是说许多服务都可以使用这些端口。只要运行的程序向系统提出访问网络的申请，那么系统就可以从这些端口号中分配一个供该程序使用。比如1024端口就是分配给第一个向系统发出申请的程序。在关闭程序进程后，就会释放所占用的端口号。 入侵电脑端口查询端口：0 服务：Reserved 说明：通常用于分析操作系统。这一方法能够工作是因为在一些系统中“0”是无效端口，当你试图使用通常的闭合端口连接它时将产生不同的结果。一种典型的扫描，使用IP地址为0.0.0.0，设置ACK位并在以太网层广播。 端口：1 服务：tcpmux 说明：这显示有人在寻找SGI Irix机器。Irix是实现tcpmux的主要提供者，默认情况下tcpmux在这种系统中被打开。Irix机器在发布是含有几个默认的无密码的帐户，如：IP、GUEST UUCP、NUUCP、DEMOS 、TUTOR、DIAG、OUTOFBOX等。许多管理员在安装后忘记删除这些帐户。因此HACKER在INTERNET上搜索tcpmux并利用这些帐户。 端口：7 服务：Echo 说明：能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。 端口：19 服务：Character Generator 说明：这是一种仅仅发送字符的服务。UDP版本将会在收到UDP包后回应含有垃圾字符的包。TCP连接时会发送含有垃圾字符的数据流直到连接关闭。HACKER利用IP欺骗可以发动DoS攻击。伪造两个chargen服务器之间的UDP包。同样Fraggle DoS攻击向目标地址的这个端口广播一个带有伪造受害者IP的数据包，受害者为了回应这些数据而过载。 端口：21 服务：FTP 说明：FTP服务器所开放的端口，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口。 端口：22 服务：Ssh 说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。 端口：23 服务：Telnet 说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个端口。 端口：25 服务：SMTP 说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口。 端口：31 服务：MSG Authentication 说明：木马Master Paradise、Hackers Paradise开放此端口。 端口：42 服务：WINS Replication 说明：WINS复制 端口：53 服务：Domain Name Server（DNS） 说明：DNS服务器所开放的端口，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此端口。 端口：67 服务：Bootstrap Protocol Server 说明：通过DSL和Cable modem的防火墙常会看见大量发送到广播地址255.255.255.255的数据。这些机器在向DHCP服务器请求一个地址。HACKER常进入它们，分配一个地址把自己作为局部路由器而发起大量中间人（man-in-middle）攻击。客户端向68端口广播请求配置，服务器向67端口广播回应请求。这种回应使用广播是因为客户端还不知道可以发送的IP地址。 端口：69 服务：Trival File Transfer 说明：许多服务器与bootp一起提供这项服务，便于从系统下载启动代码。但是它们常常由于错误配置而使入侵者能从系统中窃取任何 文件。它们也可用于系统写入文件。 端口：79 服务：Finger Server 说明：入侵者用于获得用户信息，查询操作系统，探测已知的缓冲区溢出错误，回应从自己机器到其他机器Finger扫描。 端口：80 服务：HTTP 说明：用于网页浏览。木马Executor开放此端口。 端口：99 服务：Metagram Relay 说明：后门程序ncx99开放此端口。 端口：102 服务：Message transfer agent(MTA)-X.400 over TCP/IP 说明：消息传输代理。 端口：109 服务：Post Office Protocol -Version3 说明：POP3服务器开放此端口，用于接收邮件，客户端访问服务器端的邮件服务。POP3服务有许多公认的弱点。关于用户名和密码交 换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。 端口：110 服务：SUN公司的RPC服务所有端口 说明：常见RPC服务有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等 端口：113 服务：Authentication Service 说明：这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种服务可以获得许多计算机的信息。但是它可作为许多服务的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等服务。通常如果有许多客户通过防火墙访问这些服务，将会看到许多这个端口的连接请求。记住，如果阻断这个端口客户端会感觉到在防火墙另一边与E-MAIL服务器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。 端口：119 服务：Network News Transfer Protocol 说明：NEWS新闻组传输协议，承载USENET通信。这个端口的连接通常是人们在寻找USENET服务器。多数ISP限制，只有他们的客户才能访问他们的新闻组服务器。打开新闻组服务器将允许发/读任何人的帖子，访问被限制的新闻组服务器，匿名发帖或发送SPAM。 端口：135 服务：Location Service 说明：Microsoft在这个端口运行DCE RPC end-point mapper为它的DCOM服务。这与UNIX 111端口的功能很相似。使用DCOM和RPC的服务利用计算机上的end-point mapper注册它们的位置。远端客户连接到计算机时，它们查找end-point mapper找到服务的位置。HACKER扫描计算机的这个端口是为了找到这个计算机上运行Exchange Server吗？什么版本？还有些DOS攻击直接针对这个端口。 端口：137、138、139 服务：NETBIOS Name Service 说明：其中137、138是UDP端口，当通过网上邻居传输文件时用这个端口。而139端口：通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS Regisrtation也用它。 端口：143 服务：Interim Mail Access Protocol v2 说明：和POP3的安全问题一样，许多IMAP服务器存在有缓冲区溢出漏洞。记住：一种LINUX蠕虫（admv0rm）会通过这个端口繁殖，因此许多这个端口的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一端口还被用于IMAP2，但并不流行。 端口：161 服务：SNMP 说明：SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。 端口：177 服务：X Display Manager Control Protocol 说明：许多入侵者通过它访问X-windows操作台，它同时需要打开6000端口。 端口：389 服务：LDAP、ILS 说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口。 端口：443 服务：Https 说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。 端口：456 服务：[NULL] 说明：木马HACKERS PARADISE开放此端口。 端口：513 服务：Login,remote login 说明：是从使用cable modem或DSL登陆到子网中的UNIX计算机发出的广播。这些人为入侵者进入他们的系统提供了信息。 端口：544 服务：[NULL] 说明：kerberos kshell 端口：548 服务：Macintosh,File Services(AFP/IP) 说明：Macintosh,文件服务。 端口：553 服务：CORBA IIOP （UDP） 说明：使用cable modem、DSL或VLAN将会看到这个端口的广播。CORBA是一种面向对象的RPC系统。入侵者可以利用这些信息进入系统。 端口：555 服务：DSF 说明：木马PhAse1.0、Stealth Spy、IniKiller开放此端口。 端口：568 服务：Membership DPA 说明：成员资格 DPA。 端口：569 服务：Membership MSN 说明：成员资格 MSN。 端口：635 服务：mountd 说明：Linux的mountd Bug。这是扫描的一个流行BUG。大多数对这个端口的扫描是基于UDP的，但是基于TCP的mountd有所增加（mountd同时运行于两个端口）。记住mountd可运行于任何端口（到底是哪个端口，需要在端口111做portmap查询），只是Linux默认端口是635，就像NFS通常运行于2049端口。 端口：636 服务：LDAP 说明：SSL（Secure Sockets layer） 端口：666 服务：Doom Id Software 说明：木马Attack FTP、Satanz Backdoor开放此端口 端口：993 服务：IMAP 说明：SSL（Secure Sockets layer） 端口：1001、1011 服务：[NULL] 说明：木马Silencer、WebEx开放1001端口。木马Doly Trojan开放1011端口。 端口：1024 服务：Reserved 说明：它是动态端口的开始，许多程序并不在乎用哪个端口连接网络，它们请求系统为它们分配下一个闲置端口。基于这一点分配从端口1024开始。这就是说第一个向系统发出请求的会分配到1024端口。你可以重启机器，打开Telnet，再打开一个窗口运行natstat -a 将会看到Telnet被分配1024端口。还有SQL session也用此端口和5000端口。 端口：1025、1033 服务：1025：network blackjack 1033：[NULL] 说明：木马netspy开放这2个端口。 端口：1080 服务：SOCKS 说明：这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET。理论上它应该只允许内部的通信向外到达INTERNET。但是由于错误的配置，它会允许位于防火墙外部的攻击穿过防火墙。WinGate常会发生这种错误，在加入IRC聊天室时常会看到这种情况。 端口：1170 服务：[NULL] 说明：木马Streaming Audio Trojan、Psyber Stream Server、Voice开放此端口。 端口：1234、1243、6711、6776 服务：[NULL] 说明：木马SubSeven2.0、Ultors Trojan开放1234、6776端口。木马SubSeven1.0/1.9开放1243、6711、6776端口。 端口：1245 服务：[NULL] 说明：木马Vodoo开放此端口。 端口：1433 服务：SQL 说明：Microsoft的SQL服务开放的端口。 端口：1492 服务：stone-design-1 说明：木马FTP99CMP开放此端口。 端口：1500 服务：RPC client fixed port session queries 说明：RPC客户固定端口会话查询 端口：1503 服务：NetMeeting T.120 说明：NetMeeting T.120 端口：1524 服务：ingress 说明：许多攻击脚本将安装一个后门SHELL于这个端口，尤其是针对SUN系统中Sendmail和RPC服务漏洞的脚本。如果刚安装了防火墙就看到在这个端口上的连接企图，很可能是上述原因。可以试试Telnet到用户的计算机上的这个端口，看看它是否会给你一个SHELL。连接到600/pcserver也存在这个问题。 端口：1600 服务：issd 说明：木马Shivka-Burka开放此端口。 端口：1720 服务：NetMeeting 说明：NetMeeting H.233 call Setup。 端口：1731 服务：NetMeeting Audio Call Control 说明：NetMeeting音频调用控制。 端口：1807 服务：[NULL] 说明：木马SpySender开放此端口。 端口：1981 服务：[NULL] 说明：木马ShockRave开放此端口。 端口：1999 服务：cisco identification port 说明：木马BackDoor开放此端口。 端口：2000 服务：[NULL] 说明：木马GirlFriend 1.3、Millenium 1.0开放此端口。 端口：2001 服务：[NULL] 说明：木马Millenium 1.0、Trojan Cow开放此端口。 端口：2023 服务：xinuexpansion 4 说明：木马Pass Ripper开放此端口。 端口：2049 服务：NFS 说明：NFS程序常运行于这个端口。通常需要访问Portmapper查询这个服务运行于哪个端口。 端口：2115 服务：[NULL] 说明：木马Bugs开放此端口。 端口：2140、3150 服务：[NULL] 说明：木马Deep Throat 1.0/3.0开放此端口。 端口：2500 服务：RPC client using a fixed port session replication 说明：应用固定端口会话复制的RPC客户 端口：2583 服务：[NULL] 说明：木马Wincrash 2.0开放此端口。 端口：2801 服务：[NULL] 说明：木马Phineas Phucker开放此端口。 端口：3024、4092 服务：[NULL] 说明：木马WinCrash开放此端口。 端口：3128 服务：squid 说明：这是squid HTTP代理服务器的默认端口。攻击者扫描这个端口是为了搜寻一个代理服务器而匿名访问Internet。也会看到搜索其他代理服务器的端口8000、8001、8080、8888。扫描这个端口的另一个原因是用户正在进入聊天室。其他用户也会检验这个端口以确定用户的机器是否支持代理。 端口：3129 服务：[NULL] 说明：木马Master Paradise开放此端口。 端口：3150 服务：[NULL] 说明：木马The Invasor开放此端口。 端口：3210、4321 服务：[NULL] 说明：木马SchoolBus开放此端口 端口：3333 服务：dec-notes 说明：木马Prosiak开放此端口 端口：3389 服务：超级终端 说明：WINDOWS 2000终端开放此端口。 端口：3700 服务：[NULL] 说明：木马Portal of Doom开放此端口 端口：3996、4060 服务：[NULL] 说明：木马RemoteAnything开放此端口 端口：4000 服务：QQ客户端 说明：腾讯QQ客户端开放此端口。 端口：4092 服务：[NULL] 说明：木马WinCrash开放此端口。 端口：4590 服务：[NULL] 说明：木马ICQTrojan开放此端口。 端口：5000、5001、5321、50505 服务：[NULL] 说明：木马blazer5开放5000端口。木马Sockets de Troie开放5000、5001、5321、50505端口。 端口：5400、5401、5402 服务：[NULL] 说明：木马Blade Runner开放此端口。 端口：5550 服务：[NULL] 说明：木马xtcp开放此端口。 端口：5569 服务：[NULL] 说明：木马Robo-Hack开放此端口。 端口：5632 服务：pcAnywere 说明：有时会看到很多这个端口的扫描，这依赖于用户所在的位置。当用户打开pcAnywere时，它会自动扫描局域网C类网以寻找可能的代理（这里的代理是指agent而不是proxy）。入侵者也会寻找开放这种服务的计算机。，所以应该查看这种扫描的源地址。一些搜寻pcAnywere的扫描包常含端口22的UDP数据包。 端口：5742 服务：[NULL] 说明：木马WinCrash1.03开放此端口。 端口：6267 服务：[NULL] 说明：木马广外女生开放此端口。 端口：6400 服务：[NULL] 说明：木马The tHing开放此端口。 端口：6670、6671 服务：[NULL] 说明：木马Deep Throat开放6670端口。而Deep Throat 3.0开放6671端口。 端口：6883 服务：[NULL] 说明：木马DeltaSource开放此端口。 端口：6969 服务：[NULL] 说明：木马Gatecrasher、Priority开放此端口。 端口：6970 服务：RealAudio 说明：RealAudio客户将从服务器的6970-7170的UDP端口接收音频数据流。这是由TCP-7070端口外向控制连接设置的。 端口：7000 服务：[NULL] 说明：木马Remote Grab开放此端口。 端口：7300、7301、7306、7307、7308 服务：[NULL] 说明：木马NetMonitor开放此端口。另外NetSpy1.0也开放7306端口。 端口：7323 服务：[NULL] 说明：Sygate服务器端。 端口：7626 服务：[NULL] 说明：木马Giscier开放此端口。 端口：7789 服务：[NULL] 说明：木马ICKiller开放此端口。 端口：8000 服务：OICQ 说明：腾讯QQ服务器端开放此端口。 端口：8010 服务：Wingate 说明：Wingate代理开放此端口。 端口：8080 服务：代理端口 说明：WWW代理开放此端口。 端口：9400、9401、9402 服务：[NULL] 说明：木马Incommand 1.0开放此端口。 端口：9872、9873、9874、9875、10067、10167 服务：[NULL] 说明：木马Portal of Doom开放此端口。 端口：9989 服务：[NULL] 说明：木马iNi-Killer开放此端口。 端口：11000 服务：[NULL] 说明：木马SennaSpy开放此端口。 端口：11223 服务：[NULL] 说明：木马Progenic trojan开放此端口。 端口：12076、61466 服务：[NULL] 说明：木马Telecommando开放此端口。 page] 端口：12223 服务：[NULL] 说明：木马Hack’99 KeyLogger开放此端口。 端口：12345、12346 服务：[NULL] 说明：木马NetBus1.60/1.70、GabanBus开放此端口。 端口：12361 服务：[NULL] 说明：木马Whack-a-mole开放此端口。 端口：13223 服务：PowWow 说明：PowWow是Tribal Voice的聊天程序。它允许用户在此端口打开私人聊天的连接。这一程序对于建立连接非常具有攻击性。它会驻扎在这个TCP端口等回应。造成类似心跳间隔的连接请求。如果一个拨号用户从另一个聊天者手中继承了IP地址就会发生好象有很多不同的人在测试这个端口的情况。这一协议使用OPNG作为其连接请求的前4个字节。 端口：16969 服务：[NULL] 说明：木马Priority开放此端口。 端口：17027 服务：Conducent 说明：这是一个外向连接。这是由于公司内部有人安装了带有Conducent”adbot”的共享软件。Conducent”adbot”是为共享软件显示广告服务的。使用这种服务的一种流行的软件是Pkware。 端口：19191 服务：[NULL] 说明：木马蓝色火焰开放此端口。 端口：20000、20001 服务：[NULL] 说明：木马Millennium开放此端口。 端口：20034 服务：[NULL] 说明：木马NetBus Pro开放此端口。 端口：21554 服务：[NULL] 说明：木马GirlFriend开放此端口。 端口：22222 服务：[NULL] 说明：木马Prosiak开放此端口。 端口：23456 服务：[NULL] 说明：木马Evil FTP、Ugly FTP开放此端口。 端口：26274、47262 服务：[NULL] 说明：木马Delta开放此端口。 端口：27374 服务：[NULL] 说明：木马Subseven 2.1开放此端口。 端口：30100 服务：[NULL] 说明：木马NetSphere开放此端口。 端口：30303 服务：[NULL] 说明：木马Socket23开放此端口。 端口：30999 服务：[NULL] 说明：木马Kuang开放此端口。 端口：31337、31338 服务：[NULL] 说明：木马BO(Back Orifice)开放此端口。另外木马DeepBO也开放31338端口。 端口：31339 服务：[NULL] 说明：木马NetSpy DK开放此端口。 端口：31666 服务：[NULL] 说明：木马BOWhack开放此端口。 端口：33333 服务：[NULL] 说明：木马Prosiak开放此端口。 端口：34324 服务：[NULL] 说明：木马Tiny Telnet Server、BigGluck、TN开放此端口。 端口：40412 服务：[NULL] 说明：木马The Spy开放此端口。 端口：40421、40422、40423、40426、 服务：[NULL] 说明：木马Masters Paradise开放此端口。 端口：43210、54321 服务：[NULL] 说明：木马SchoolBus 1.0/2.0开放此端口。 端口：44445 服务：[NULL] 说明：木马Happypig开放此端口。 端口：50766 服务：[NULL] 说明：木马Fore开放此端口。 端口：53001 服务：[NULL] 说明：木马Remote Windows Shutdown开放此端口。 端口：65000 服务：[NULL] 说明：木马Devil 1.03开放此端口。 端口：88 说明：Kerberos krb5。另外TCP的88端口也是这个用途。 端口：137 说明：SQL Named Pipes encryption over other protocols name lookup(其他协议名称查找上的SQL命名管道加密技术)和SQL RPC encryption over other protocols name lookup(其他协议名称查找上的SQL RPC加密技术)和Wins NetBT name service(WINS NetBT名称服务)和Wins Proxy都用这个端口。 端口：161 说明：Simple Network Management Protocol(SMTP)（简单网络管理协议）。 端口：162 说明：SNMP Trap（SNMP陷阱） 端口：445 说明：Common Internet File System(CIFS)（公共Internet文件系统） 端口：464 说明：Kerberos kpasswd(v5)。另外TCP的464端口也是这个用途。 端口：500 说明：Internet Key Exchange(IKE)（Internet密钥交换） 端口：1645、1812 说明：Remot Authentication Dial-In User Service(RADIUS)authentication(Routing and Remote Access)(远程认证拨号用户服务) 端口：1646、1813 说明：RADIUS accounting(Routing and Remote Access)(RADIUS记帐（路由和远程访问）) 端口：1701 说明：Layer Two Tunneling Protocol(L2TP)(第2层隧道协议) 端口：1801、3527 说明：Microsoft Message Queue Server(Microsoft消息队列服务器)。还有TCP的135、1801、2101、2103、2105也是同样的用途。 端口：2504 说明：Network Load Balancing(网络平衡负荷) 常见命令和端口列表 网络基础知识!端口对照,常用命令! 常用端口对照表！ 端口：0 服务：Reserved 说明：通常用于分析操作系统。这一方法能够工作是因为在一些系统中“0”是无效端口，当你试图使用通常的闭合端口连接它时将产生不同的结果。一种典型的扫描，使用IP地址为0.0.0.0，设置ACK位并在以太网层广播。 端口：1 服务：tcpmux 说明：这显示有人在寻找SGI Irix机器。Irix是实现tcpmux的主要提供者，默认情况下tcpmux在这种系统中被打开。Irix机器在发布是含有几个默认的无密码的帐户，如：IP、GUEST UUCP、NUUCP、DEMOS 、TUTOR、DIAG、OUTOFBOX等。许多管理员在安装后忘记删除这些帐户。因此HACKER在INTERNET上搜索tcpmux并利用这些帐户。 端口：7 服务：Echo 说明：能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。 端口：19 服务：Character Generator 说明：这是一种仅仅发送字符的服务。UDP版本将会在收到UDP包后回应含有垃圾字符的包。TCP连接时会发送含有垃圾字符的数据流直到连接关闭。HACKER利用IP欺骗可以发动DoS攻击。伪造两个chargen服务器之间的UDP包。同样Fraggle DoS攻击向目标地址的这个端口广播一个带有伪造受害者IP的数据包，受害者为了回应这些数据而过载。 端口：21 服务：FTP 说明：FTP服务器所开放的端口，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口。 端口：22 服务：Ssh 说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。 端口：23 服务：Telnet 说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny Telnet Server就开放这个端口。 端口：25 服务：SMTP 说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的信息传递到不同的地址。木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口。 端口：31 服务：MSG Authentication 说明：木马Master Paradise、Hackers Paradise开放此端口。 端口：42 服务：WINS Replication 说明：WINS复制 端口：53 服务：Domain Name Server（DNS） 说明：DNS服务器所开放的端口，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此端口。 端口：67 服务：Bootstrap Protocol Server 说明：通过DSL和Cable modem的防火墙常会看见大量发送到广播地址255.255.255.255的数据。这些机器在向DHCP服务器请求一个地址。HACKER常进入它们，分配一个地址把自己作为局部路由器而发起大量中间人（man-in-middle）攻击。客户端向68端口广播请求配置，服务器向67端口广播回应请求。这种回应使用广播是因为客户端还不知道可以发送的IP地址。 端口：69 服务：Trival File Transfer 说明：许多服务器与bootp一起提供这项服务，便于从系统下载启动代码。但是它们常常由于错误配置而使入侵者能从系统中窃取任何 文件。它们也可用于系统写入文件。 端口：79 服务：Finger Server 说明：入侵者用于获得用户信息，查询操作系统，探测已知的缓冲区溢出错误，回应从自己机器到其他机器Finger扫描。 端口：80 服务：HTTP 说明：用于网页浏览。木马Executor开放此端口。 端口：99 服务：metagram Relay 说明：后门程序ncx99开放此端口。 端口：102 服务：Message transfer agent(MTA)-X.400 over TCP/IP 说明：消息传输代理。 端口：109 服务：Post Office Protocol -Version3 说明：POP3服务器开放此端口，用于接收邮件，客户端访问服务器端的邮件服务。POP3服务有许多公认的弱点。关于用户名和密码交 换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。 端口：110 服务：SUN公司的RPC服务所有端口 说明：常见RPC服务有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等 端口：113 服务：Authentication Service 说明：这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种服务可以获得许多计算机的信息。但是它可作为许多服务的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等服务。通常如果有许多客户通过防火墙访问这些服务，将会看到许多这个端口的连接请求。记住，如果阻断这个端口客户端会感觉到在防火墙另一边与E-MAIL服务器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。 端口：119 服务：Network News Transfer Protocol 说明：NEWS新闻组传输协议，承载USENET通信。这个端口的连接通常是人们在寻找USENET服务器。多数ISP限制，只有他们的客户才能访问他们的新闻组服务器。打开新闻组服务器将允许发/读任何人的帖子，访问被限制的新闻组服务器，匿名发帖或发送SPAM。 端口：135 服务：Location Service 说明：Microsoft在这个端口运行DCE RPC end-point mapper为它的DCOM服务。这与UNIX 111端口的功能很相似。使用DCOM和RPC的服务利用计算机上的end-point mapper注册它们的位置。远端客户连接到计算机时，它们查找end-point mapper找到服务的位置。HACKER扫描计算机的这个端口是为了找到这个计算机上运行Exchange Server吗？什么版本？还有些DOS攻击直接针对这个端口。 端口：137、138、139 服务：NETBIOS Name Service 说明：其中137、138是UDP端口，当通过网上邻居传输文件时用这个端口。而139端口：通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS Regisrtation也用它。 端口：143 服务：Interim Mail Access Protocol v2 说明：和POP3的安全问题一样，许多IMAP服务器存在有缓冲区溢出漏洞。记住：一种LINUX蠕虫（admv0rm）会通过这个端口繁殖，因此许多这个端口的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一端口还被用于IMAP2，但并不流行。 端口：161 服务：SNMP 说明：SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。 端口：177 服务：X Display Manager Control Protocol 说明：许多入侵者通过它访问X-windows操作台，它同时需要打开6000端口。 端口：389 服务：LDAP、ILS 说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口。 端口：443 服务：Https 说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。 端口：456 服务：[NULL] 说明：木马HACKERS PARADISE开放此端口。 端口：513 服务：Login,remote login 说明：是从使用cable modem或DSL登陆到子网中的UNIX计算机发出的广播。这些人为入侵者进入他们的系统提供了信息。 端口：544 服务：[NULL] 说明：kerberos kshell 端口：548 服务：Macintosh,File Services(AFP/IP) 说明：Macintosh,文件服务。 端口：553 服务：CORBA IIOP （UDP） 说明：使用cable modem、DSL或VLAN将会看到这个端口的广播。CORBA是一种面向对象的RPC系统。入侵者可以利用这些信息进入系统。 端口：555 服务：DSF 说明：木马PhAse1.0、Stealth Spy、IniKiller开放此端口。 端口：568 服务：Membership DPA 说明：成员资格 DPA。 端口：569 服务：Membership MSN 说明：成员资格 MSN。 端口：635 服务：mountd 说明：Linux的mountd Bug。这是扫描的一个流行BUG。大多数对这个端口的扫描是基于UDP的，但是基于TCP的mountd有所增加（mountd同时运行于两个端口）。记住mountd可运行于任何端口（到底是哪个端口，需要在端口111做portmap查询），只是Linux默认端口是635，就像NFS通常运行于2049端口。 端口：636 服务：LDAP 说明：SSL（Secure Sockets layer） 端口：666 服务：Doom Id Software 说明：木马Attack FTP、Satanz Backdoor开放此端口 端口：993 服务：IMAP 说明：SSL（Secure Sockets layer） 端口：1001、1011 服务：[NULL] 说明：木马Silencer、WebEx开放1001端口。木马Doly Trojan开放1011端口。 端口：1024 服务：Reserved 说明：它是动态端口的开始，许多程序并不在乎用哪个端口连接网络，它们请求系统为它们分配下一个闲置端口。基于这一点分配从端口1024开始。这就是说第一个向系统发出请求的会分配到1024端口。你可以重启机器，打开Telnet，再打开一个窗口运行natstat -a 将会看到Telnet被分配1024端口。还有SQL session也用此端口和5000端口。 端口：1025、1033 服务：1025：network blackjack 1033：[NULL] 说明：木马netspy开放这2个端口。 端口：1080 服务：SOCKS 说明：这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET。理论上它应该只允许内部的通信向外到达INTERNET。但是由于错误的配置，它会允许位于防火墙外部的攻击穿过防火墙。WinGate常会发生这种错误，在加入IRC聊天室时常会看到这种情况。 端口：1170 服务：[NULL] 说明：木马Streaming Audio Trojan、Psyber Stream Server、Voice开放此端口。 端口：1234、1243、6711、6776 服务：[NULL] 说明：木马SubSeven2.0、Ultors Trojan开放1234、6776端口。木马SubSeven1.0/1.9开放1243、6711、6776端口。 端口：1245 服务：[NULL] 说明：木马Vodoo开放此端口。 端口：1433 服务：SQL 说明：Microsoft的SQL服务开放的端口。 端口：1492 服务：stone-design-1 说明：木马FTP99CMP开放此端口。 端口：1500 服务：RPC client fixed port session queries 说明：RPC客户固定端口会话查询 端口：1503 服务：NetMeeting T.120 说明：NetMeeting T.120 端口：1524 服务：ingress 说明：许多攻击脚本将安装一个后门SHELL于这个端口，尤其是针对SUN系统中Sendmail和RPC服务漏洞的脚本。如果刚安装了防火墙就看到在这个端口上的连接企图，很可能是上述原因。可以试试Telnet到用户的计算机上的这个端口，看看它是否会给你一个SHELL。连接到600/pcserver也存在这个问题。 端口：1600 服务：issd 说明：木马Shivka-Burka开放此端口。 端口：1720 服务：NetMeeting 说明：NetMeeting H.233 call Setup。 端口：1731 服务：NetMeeting Audio Call Control 说明：NetMeeting音频调用控制。","link":"/2022/03/22/%E7%BC%96%E7%A8%8B/%E7%AB%AF%E5%8F%A3%E5%8F%B7%E8%8C%83%E5%9B%B4/"}],"tags":[{"name":"TEST","slug":"TEST","link":"/tags/TEST/"},{"name":"日常","slug":"日常","link":"/tags/%E6%97%A5%E5%B8%B8/"},{"name":"学习资料","slug":"学习资料","link":"/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"},{"name":"网站","slug":"网站","link":"/tags/%E7%BD%91%E7%AB%99/"},{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Bluetooth","slug":"Bluetooth","link":"/tags/Bluetooth/"},{"name":"ESP32","slug":"ESP32","link":"/tags/ESP32/"},{"name":"学习笔记","slug":"学习笔记","link":"/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"IDF","slug":"IDF","link":"/tags/IDF/"},{"name":"ESP8266","slug":"ESP8266","link":"/tags/ESP8266/"},{"name":"OLED","slug":"OLED","link":"/tags/OLED/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"系统安装","slug":"系统安装","link":"/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"},{"name":"蓝牙","slug":"蓝牙","link":"/tags/%E8%93%9D%E7%89%99/"},{"name":"浮点数打印","slug":"浮点数打印","link":"/tags/%E6%B5%AE%E7%82%B9%E6%95%B0%E6%89%93%E5%8D%B0/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"English","slug":"English","link":"/tags/English/"},{"name":"EPS32","slug":"EPS32","link":"/tags/EPS32/"},{"name":"搜狗输入法","slug":"搜狗输入法","link":"/tags/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"Qt","slug":"Qt","link":"/tags/Qt/"},{"name":"编程","slug":"编程","link":"/tags/%E7%BC%96%E7%A8%8B/"},{"name":"C语言","slug":"C语言","link":"/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"WS2812","slug":"WS2812","link":"/tags/WS2812/"},{"name":"TCP","slug":"TCP","link":"/tags/TCP/"}],"categories":[{"name":"日常","slug":"日常","link":"/categories/%E6%97%A5%E5%B8%B8/"},{"name":"博客","slug":"博客","link":"/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"Bluetooth学习笔记","slug":"Bluetooth学习笔记","link":"/categories/Bluetooth%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"ESP8266开发学习笔记","slug":"ESP8266开发学习笔记","link":"/categories/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"ESP32","slug":"ESP32","link":"/categories/ESP32/"},{"name":"English","slug":"English","link":"/categories/English/"},{"name":"Ubuntu系统","slug":"Ubuntu系统","link":"/categories/Ubuntu%E7%B3%BB%E7%BB%9F/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/categories/Ubuntu/"},{"name":"编程","slug":"编程","link":"/categories/%E7%BC%96%E7%A8%8B/"}]}