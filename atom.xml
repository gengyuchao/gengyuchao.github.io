<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神迹の降临</title>
  
  
  <link href="https://github.com/gengyuchao/gengyuchao.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/gengyuchao/gengyuchao.github.io/"/>
  <updated>2020-08-24T15:30:54.092Z</updated>
  <id>https://github.com/gengyuchao/gengyuchao.github.io/</id>
  
  <author>
    <name>Geng Yuchao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人学习计划</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/13/%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/13/%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</id>
    <published>2020-08-13T12:31:10.413Z</published>
    <updated>2020-08-24T15:30:54.092Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="be3d697411d0f6f479239338ee4de4552623b36e7fa44c460927b822cce346cf">8cb921b32b7ba8027725966d2095282f4ef28812ec4d46e88cd187cc3d467dd32acc3743513aaaf1dfc914b43639a8004b00ad9ec15cfa1573534f4345c596e5751334164a391eabc57b611f1f95f1bec4ed01562706a226bcd07d18c2eafbaef2ec869c1be8d373823c8798c8adcf48ec89bb3e9be9ba71c5cf41b4f3f5a8196b61e80d342498828392aa8d7558f2fe045673836eb920cb526d04beec5ab89a2b92a1e7e9df46dd365e155321fa07761fc72b647f1ad7032ee51da9f82a36d4c9c7fdb17f0f0f9b86cc42a4b1b31275ae300479c6fc20c8448a0285507abf721722f3ef9c1a1cb3e1f4cffb3a10c4b443a64a87be287008e7688d979c53c176a933a63143045f8f5c4c538699c8ad508e1a89b08b3d7ed26408dec26d81e8a70ae35853e2812875fea751735bf2dd981395b4890cbbb112b18a151ecbfc072ef83ed7e55f5de50921edd8d10b2f84f63210df410ce00afe58622e0adbb4b661735bdb777862d8653ffc6eae27a4e7d56535360a5ba35036a02ddd8bee12a1115f58ce981ae71b41caf755194d4322f2747a99dc042d67f3ec0bf80f14c56f265772128a1ae36a899267f70e577e3207694a794c25c3b17a44308b1b95cf595875decc2c8eed1f0756e0e4bc80113affc7355d130445b32d3904d360d71c1911a881f72e78c39fca27c51d4cadd4e460e963ffde77dc55c21eb125bda693238f45f73ea413e225e4fe75e342ea1dfa972423fdba7c6885dd80dbd920e03212697d1ed9d0638ecef146840173fe17afc9ccf24f28e75d32ec901b61f95cbf915e0a0e0f00c944a1251d545b7ba4f74fabf307827044463a100b2b95131c65eee848ec7af102ce9c66a2837529bb418261ceb2ab9a94e06d69d1c3468e0bf9f21e11b77b5d64c0595c24866bc0af999ff6deb373e732848e390d2fa002964703f70d64185c793ed38e7857cf26afde7da1a9f141fb3cbcbc635fd73c8203e4f77a96749e82ef2c733adf5c97b07c02a0e806ea8bf9b415cdbd328d502e59e32575e4f7bb1203834c870070d29522ed2169c2ca6ccf4f12cb8dd4743d1d5b4f81c343dcf61e07dc53bda3d552e57bd605c069ce49381caf43c95414c98817e59e2f4be82502e2b9899843695b244b006c8b4bc0d003ef95b0944bcf824cdafd80ac54d9b6a4bdfb83da16833043b82e5effb63b9a05684d9894f17097a6d96220bfd4402e8c64693a085c2a236aa84530d078bff526b21a9f164a1910993b83e8948cd8bc7b6bc866f60ddf310bb1da63401c1a849fa45ffa74207983f22106d1dadc7baaecb45d0ba5342a1a34fe9b4e22bf45063d7eda88c768d5e5863e957072286be20a57c2d3ec8306a1921b6c57f12b9aefc07f90c72587717bf89955d30f2b3c8907c45b5f44eb4ad3531a757abb8a9afe71f093c70c90be0ad7db99ee73a82748eed4a53f4a84ae7b59a893d6c76debab5a1f74fd623767aefc04ea0593aa8d3a66f912370cfc5f1808dc5d73ab8f014e90412b49411a8af97d623983b8e16289f08d7ed8f5bc7e1f587e6fcf56da5d234b95f2c30fd26f6f5c1957972a4ffda476346e117a04b2261188a438d0bdc4b9cd4c3f9a529c3abb551609c8ac6e999c4ad71ea0ca26730040ec4998602ef16be555746fb78f3ef9fd9ee9b3b58951a3e33de34c5e8e4fec9859e6406d49e0f1ccff048eabf17efd7df69ac21b69cdf3863ea02ad02dc612b341e34ef14c6f955dcdb899d5ce4ef168a3693cfe963918a06d2987e431a2935360f3f9116b52d744cfec4747f0bebd5fa3e56550b9862401d9c47cee98e49ec0ba0f5929b2cce4de5d13927d9623bf2af3166f6bff50c6425dc37f62e3b9996c6364266ec9033be137e913484ddac2ed8d2d3f85e7978bc3e2158407042b769f7cdf1405b655fdbebb6a3626b8adedd6f7c5559b6d623181831ca8e204a5a4ecb7d08a99acf5420e94c3eb23090628cd8e084ae86e92eed8d447d46e22e2ec00aacf772dff1108152add751726df0b590f941f76699a312d1243735e0557624e026b2e933d876ffe09988ba51ac02eac1680bbe49ed4b116c9d8184c458755199fdccd4082f7e78a78724300cc14efa31c2bc9b2bef801dd2737b93cecb263d3f097eba01f9dbf261f5ef5d888cb71c1fe179e94b1a7bd6be00de70cf93df66a181d35edd5d9184264aa74e46a794c17316a0d618d6666d2b82de7ef405d08613f96719738d604c03f0179677581785ac4cf5157d8feee58e00470c8d6e025deea69f1cbb690f38847efd628bb3135c89973c3b531b4c5143f2ef2a7d2a8759aa96611758a8b4cbbbb8a59c8b52adacc051aad70a2f3cf9b4ab2ff746e32857b3055ebf3d14efadad185d7b02d1b5bbcde95559bfcd66fbd8b068a4b509f954da2add6b151d71995a5173592c30dbc25b3396c56be597132fcfa34562054a85f8d808979baffe82a01cf1f9cdc09a4df4e4710dcd34aaa13358a11d852f4ae39e9410c52169b1bdfbf38d35c72f083cf92d7a3e0faed570c92d8cd4d026752fe9259d110678bb9db615ef46719f657dfc8222668348f53e4e0d08a25c0be393aa5cebfd9ef02e6c79374c733c9277048d115bee998e86063d604db700fc81bb43021143481ee89ca860753c5f2c9e87651ac55c25c3256b832843da2fbba8efeba4593300d4e0d3b47dc9041540fb42c3673b0e7fbf0b72aaf8dec77325b5fca096bcbfc61aabd053bf3f00a035fef00424a58b51e08a52b721c3e340cd1c438f5bb4aebf6ab87f5b14983c09bf2e89ca3e18a4ed0aea97ebb55562433794e972e4cfc8a8bebf5d8ee7de1fc38a6f4d64e4109a334a4d50e52d37cf769efc179a89cb0f15c8279843d6e4e5e9a033c7308ae4d94c948a82324346b0cf80ba530c8afa573d68f429a8eda1c3968b0421f6bfa8841a0ea32b5d703a645f5c434c60f5a9ee29c164185de8284bc525a6d46e67a0a2260f1ba071b3f8efec576c47b257f22c640fe1428c08cb9db9f2416d1d95559f54cb5bd10f106811e6d94f76a85a16bafebf832bebfab47f1594ddb50b9e9f99e9c1b228f805866fe77b0c108eb6b96184e189487e6c4fff52c0963bb4421f3d74f622b7f4a8ca2ae3fab890ccefc940fce66620fc6ce875ae88ae237c0909bd500116249a8e235969b8a3b67432c8ba0a9291e64f2ac39db24a8f3579ba1ea88f6b5c561e6d1a2e7e5055196fee9e977da41193a971668ffb1a4792e30fe29fdda5e4eee2b506257ec872207dce68513b2b071796599b6bb01f71770ac1d8635811cc8102990d05aa7e6aab36a9b5a3c2ca0f936c6eb6aaeccf13947af56ba647a296b17324698cc3d131cf7e45dec795ba7f6382669eb0299b3a4842eafad0273cf4bce4328ef58bb2b4b53aba7d0ad295adf297ba4436716bf268cba51bf343e829bcf2de2d8250b014eb4d56e4eb12874d6b0360a9678cee901c7a821497a90d53dd843077430c2b543dc1d4b076afc20bdac73399ff5dcec787f866b4360a84bf455acd9ee591429162170adfa6411aa8cfaefcab6b564ce5bb9eb1ede0b912af675f24f1b5f1fd76342f6bafcd8ec2c1b0f6dcc82d7bd56092edbd5ff99</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">咦，这是一篇加密文章，好像需要输入密码才能查看呢！</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu常用软件</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/11/Ubuntu%E7%B3%BB%E7%BB%9F/Ubuntu%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/11/Ubuntu%E7%B3%BB%E7%BB%9F/Ubuntu%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</id>
    <published>2020-08-11T11:24:56.259Z</published>
    <updated>2020-08-18T12:17:36.999Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu常用软件</p><!-- toc --><a id="more"></a><h2 id="1、-uGet-Ubuntu-中使用的下载工具"><a href="#1、-uGet-Ubuntu-中使用的下载工具" class="headerlink" title="1、[ uGet ] Ubuntu 中使用的下载工具"></a>1、[ uGet ] Ubuntu 中使用的下载工具</h2><p>uget 很好用 安装命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:plushuang-tw/uget-stable </span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install uget</span><br></pre></td></tr></table></figure><h2 id="2、-indicator-sysmonitor-Ubuntu-使用的资源监视器"><a href="#2、-indicator-sysmonitor-Ubuntu-使用的资源监视器" class="headerlink" title="2、[ indicator-sysmonitor ] Ubuntu 使用的资源监视器"></a>2、[ indicator-sysmonitor ] Ubuntu 使用的资源监视器</h2><p>To install the AppIndicator via PPA:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-sysmonitor</span><br></pre></td></tr></table></figure><p>Search in the dash for “indicator-sysmonitor” to run</p><h2 id="3、-Tweak-Tool-Ubuntu-系统自带的桌面优化工具"><a href="#3、-Tweak-Tool-Ubuntu-系统自带的桌面优化工具" class="headerlink" title="3、[ Tweak-Tool ] Ubuntu 系统自带的桌面优化工具"></a>3、[ Tweak-Tool ] Ubuntu 系统自带的桌面优化工具</h2><p>安装 Tweak-Tool</p><p> <code>sudo apt install gnome-tweak-tool</code></p><h3 id="从Ubuntu存储库安装扩展"><a href="#从Ubuntu存储库安装扩展" class="headerlink" title="从Ubuntu存储库安装扩展"></a>从Ubuntu存储库安装扩展</h3><p>Ubuntu 18.04版本附带了一些扩展，作为其软件包存储库的一部分。可以通过执行以下linux命令来安装这些扩展：</p><p><code>$ sudo apt install gnome-shell-extensions</code></p><p>安装后，重新登录到您的Ubuntu系统并使用Tweak Tool启用任何所需的扩展。</p><h3 id="从Gnome-org安装扩展"><a href="#从Gnome-org安装扩展" class="headerlink" title="从Gnome.org安装扩展"></a>从Gnome.org安装扩展</h3><p>安装Firefox附加组件</p><p>打开Firefox浏览器并访问firefox插件页面以进行gnome shell集成。准备好后，单击+ Add to Firefox。</p><p>点击Add添加GNOME shell集成。</p><p>安装Host Connector<br>下一步是安装Gnome shell主机连接器。打开终端并输入：</p><p><code>$ sudo apt install chrome-gnome-shell</code></p><p>无法安装主机连接器将导致错误消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">虽然GNOME Shell集成扩展正在运行，但未检测到本机主机连接器。有关安装连接器的说明，请参阅文档</span><br><span class="line">安装Gnome Extensions</span><br><span class="line">所有应该准备好安装gnome扩展。将您的Firefox浏览器导航到https:&#x2F;&#x2F;extensions.gnome.org&#x2F;，然后只搜索您要安装的Gnome扩展。翻转ON开关以安装扩展。</span><br></pre></td></tr></table></figure><h3 id="高质量4k壁纸"><a href="#高质量4k壁纸" class="headerlink" title="高质量4k壁纸"></a>高质量4k壁纸</h3><p><a href="https://wallpaperaccess.com/4k-nature">https://wallpaperaccess.com/4k-nature</a></p><p><a href="https://wall.alphacoders.com/">https://wall.alphacoders.com/</a></p><h2 id="4、-Flameshot-屏幕截图和编辑"><a href="#4、-Flameshot-屏幕截图和编辑" class="headerlink" title="4、[ Flameshot ] 屏幕截图和编辑"></a>4、[ Flameshot ] 屏幕截图和编辑</h2><p>在 Linux 中使用 flameshot<br><img src="20200309202301416_1717233984.png" alt="Flameshot"><br>功能概述：</p><p>注释 (高亮、标示、添加文本、框选)<br>图片模糊<br>图片裁剪<br>上传到 Imgur<br>用另一个应用打开截图<br>Flameshot 在去年发布到 GitHub，并成为一个引人注目的工具。</p><p>如果你需要的是一个能够用于标注、模糊、上传到 imgur 的新式截图工具，那么 Flameshot 是一个好的选择。</p><p>下面将会介绍如何安装 Flameshot 并根据你的偏好进行配置。</p><p>如果你用的是 Ubuntu，那么只需要在 Ubuntu 软件中心上搜索，就可以找到 Flameshot 进而完成安装了。要是你想使用终端来安装，可以执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install flameshot</span><br></pre></td></tr></table></figure><p>如果你在安装过程中遇到问题，可以按照官方的安装说明进行操作。安装完成后，你还需要进行配置。尽管可以通过搜索来随时启动 Flameshot，但如果想使用 PrtSc 键触发启动，则需要指定对应的键盘快捷键。以下是相关配置步骤：</p><p>进入系统设置中的“键盘设置”<br>页面中会列出所有现有的键盘快捷键，拉到底部就会看见一个 “+” 按钮<br>点击 “+” 按钮添加自定义快捷键并输入以下两个字段：<br>“名称”： 任意名称均可。<br>“命令”： /usr/bin/flameshot gui</p><p>最后将这个快捷操作绑定到 PrtSc 键上，可能会提示与系统的截图功能相冲突，但可以忽略掉这个警告。</p><h2 id="5、-Synergy-键鼠共享同步工具"><a href="#5、-Synergy-键鼠共享同步工具" class="headerlink" title="5、[ Synergy ] 键鼠共享同步工具"></a>5、[ Synergy ] 键鼠共享同步工具</h2><p>Synergy是一款开放源代码软件，能让用户通过网络在视线范围内使用一套键盘鼠标控制多台电脑。因为Synergy不能传输视频，所以每台电脑都需要连接显示器。除了在多台计算机间共享键盘鼠标，Synergy还能共享剪贴板。Synergy是跨平台的软件，可以在Windows，Linux和Mac OS X之间共享键盘和鼠标。</p><p>Synergy允许你轻松地在你办公桌上多台计算机之间共享你的鼠标和键盘。你只要将鼠标（指针）从一台计算机的屏幕边缘移出到另 一个屏幕就行了。</p><p>Ubuntu 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install synergy</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//解决 system tray is unavailable, don<span class="string">'t close your window 问题</span></span><br><span class="line"><span class="string">sudo apt-get install sni-qt</span></span><br></pre></td></tr></table></figure><p>最近又给 Windows 系统安装了 synergy ，遇到了 windows 系统与 Ubuntu 系统无法链接的问题，查看 log 发现是因为无法通过加密，因此，在 Ubuntu 系统里把 synergy 的设置里的使用 ssh 加密选项关掉就可以链接了。</p><p>注册码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7B76313B70726F3BE5BDAC20E585B33B313B73796E313333323040676D61696C2E636F6D3B3B3B7D</span><br></pre></td></tr></table></figure><h2 id="6、-Terminator-分屏终端"><a href="#6、-Terminator-分屏终端" class="headerlink" title="6、[ Terminator ] 分屏终端"></a>6、[ Terminator ] 分屏终端</h2><p>5分钟入手Terminator<br><a href="https://www.jianshu.com/p/cee2de32ca28">https://www.jianshu.com/p/cee2de32ca28</a></p><h2 id="7、-GIMP及其插件-Ubuntu安装图片处理工具"><a href="#7、-GIMP及其插件-Ubuntu安装图片处理工具" class="headerlink" title="7、[ GIMP及其插件 ] Ubuntu安装图片处理工具"></a>7、[ GIMP及其插件 ] Ubuntu安装图片处理工具</h2><h3 id="1-GIMP"><a href="#1-GIMP" class="headerlink" title="1. ﻿GIMP"></a>1. ﻿GIMP</h3><p>linux上很多工程使用的专业软件的缺失真心是硬伤, 阻挡了一大批的喜爱者. 虽然Linux的发行版桌面做的越来越炫，基础的软件也都能找的替代品，其的开源性给软件的发展带来了很大的助力。但是解决专业软件的移植目前仍没有大规模的进行，很多软件只有win和mac版的.</p><p>比如对于图像处理软件，在Win上，Photoshop是不二的选择，但是做为一位程序员，Linux是我的不二选择，但是鱼和熊掌真得不可兼得吗?</p><p>不见得，因为有wine–牛B中的战斗机，其对于部分的DLL进行了重写，进而在linux下模拟出了windows的应用运行环境，让我们使用很多优秀非跨平台软件成了可能，真可谓条条大路通罗马.</p><p>但linux对于程序员来说是最为优秀的。真心的希望在今后的程序员时光中，能为开源的环境出一份力。</p><p>GIMP是开源的图像处理软件，在wiki上有详细的<a href="http://zh.wikipedia.org/wiki/Gimp%E3%80%82">http://zh.wikipedia.org/wiki/Gimp。</a></p><p>主页：<a href="http://www.gimp.org/">http://www.gimp.org/</a></p><p><img src="20200310152258067_856621678.png" alt="GIMP_UI"></p><h3 id="2-安装GIMP"><a href="#2-安装GIMP" class="headerlink" title="2. ﻿安装GIMP"></a>2. ﻿安装GIMP</h3><p>目前的GIMP中都已经包含了GIMP的源, 我们可以直接使用apt-get安装</p><h4 id="2-1-安装GIMP"><a href="#2-1-安装GIMP" class="headerlink" title="2.1 ﻿安装GIMP"></a>2.1 ﻿安装GIMP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gimp</span><br></pre></td></tr></table></figure><h4 id="2-2-安装插件"><a href="#2-2-安装插件" class="headerlink" title="2.2 ﻿安装插件"></a>2.2 ﻿安装插件</h4><p>GIMP Plugin Registry 包涵众多插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gimp-plugin-registry gimp-data-extras</span><br></pre></td></tr></table></figure><p>当然也可以按照需要安装其他一些附属的包</p><table><thead><tr><th>插件</th><th>描述</th></tr></thead><tbody><tr><td>gimp-data-extras</td><td>刷子/调色板/渐变色的GIMP插件集</td></tr><tr><td>gimp-gmic</td><td>用于《GREYC魔术图像转换软件》的GIMP插件</td></tr><tr><td>gimp-gutenprint</td><td>GIMP的打印插件</td></tr><tr><td>gimp-plugin-registry</td><td>GIMP的可选扩展库</td></tr><tr><td>gvfs-backends</td><td>用户空间虚拟文件系统-后端</td></tr><tr><td>xcftools</td><td>命令行工具，用于XCF文件的额外数据</td></tr><tr><td>gimp-gap</td><td>gif动态图制作插件</td></tr><tr><td>mathmap</td><td>制作德罗斯特效应插件</td></tr></tbody></table><h2 id="wine"><a href="#wine" class="headerlink" title="[ wine ]"></a>[ wine ]</h2><p>安装后 输入文本框无法显示 解决方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winetricks riched20</span><br></pre></td></tr></table></figure><p>网络差时可以直接下载文件放入系统目录中</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ubuntu常用软件&lt;/p&gt;
&lt;!-- toc --&gt;</summary>
    
    
    
    <category term="Ubuntu系统" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/Ubuntu%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Ubuntu" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/Ubuntu/"/>
    
    <category term="系统安装" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Qt_Tcp_文件发送项目.md</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/11/%E7%BC%96%E7%A8%8B/Qt_Tcp_%E6%96%87%E4%BB%B6%E5%8F%91%E9%80%81%E9%A1%B9%E7%9B%AE/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/11/%E7%BC%96%E7%A8%8B/Qt_Tcp_%E6%96%87%E4%BB%B6%E5%8F%91%E9%80%81%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-08-10T18:24:00.141Z</published>
    <updated>2020-08-14T06:02:41.123Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f175249b80ee9137f140ebe758683dcdf33b61184907bfd2045322b3c274c431">0ab0694274b0ea15e18c1c468ee002c52313eeebb569f43dd9bfb2569d84acb1915e3b77a7925591f1edfa5248c52e5705c383aa32bbc3e1215db1428898e8596d5106b6039cbf9e07746f4ff17ed88909f47345ce2d5cbf8a495d33933c0f4c2859e5be905f5f3b748fc30c1b19bd591f47c4b92d99d4e4f3f9022cc665928de285cf76b60403447d292a540328244e521f9638b11ec96aacfd4ccb837e692f156b183b66e54f6a59290acd7a37fadcfd154d55a165817b8e197d29dc5e61ebe9660033de1dcfae9b93f74637cae45a9194dfbc5ddc4e4b220fc0a391127317c9e8848ef99ec8e80ae1dcadbdb0c90d6d788bb03232c184022edd6f468fabfc677072e15708e2dd9d3de349042d75d6fa95bb007b06ea56c99ea06a405b0fedd796b58d4890013ac0039bfc5f5dbf27d63bdddbcb8120b065467945b7231e58db139d4e246287e8e2340f8617f906df2fcd9eb52824ad9422a698baa4b480ec7ca4a60e437528274a9b414e2b0b075fa8314a8b2ca18017a162f2e4fe8ef62fb357b771877ca944f9b7ff22b5b0b8f7dde0a0c773de57b14431909df2c01452e6e964e1d0c205f3f5f0eb2585d0b019e08d9880d92c3aa4026e11943cdbf0c70a4c4c8eb216d87bfce9823bca86f6afb87890f74247e591894828ae89cc802e15cc132cfb9bac7d7877c06a2c09fd9e4c04669d90178dd35300e09e2bc381f58616d46981975186a89e2d1c5479a14e36031a42578fb787a383283d2a92d8e9f95c4acfb7401a77eb9d524c3046a860e422fccb3ed02aa96bd8d89c473ba3ea0ac13b3ff8232eeacfd9cc72251db5b536acfcea74bbf92c31a35c8df32c90d568559b1a93d40e69697251063f6b2cac9c8304f6e3e0f05824a547976da2d0fadb9054f256a062c52eafb0631efaea9f2219ff951c8a86bce0b216255e45b2ed519a0a8702457019acc493d53c7ae31033ee14ceb7f46c32dd1a262079750285518c37610694e37437f090cd2c75b407e86547a64e092227a62f9829342840f19d965b3b2335fcb829e1b734d2377bcc6585074c7528383bcfb8fd949069de8dbe0cef94ed794aedc742a56a8756746f64316812128819fae47537b6c74f55d6098b200cb7d2a07f19bc6833daa1dbb32445f342c352a90884e484a7c9c3581a7baec372bb2e9c1eec560fca26bf6e3e369b4a016a07be97567f405a48af33345b9357722fd447c3f525f5e820eea0388ceb5fc7a0cb7836cb4ebf28581c6d385fd77f93f0c1d4903283e0ac762406ced2a2765fa44b6fce5d7770baccaace1376634a55b087efb84d99622e51975f3011ae51b07ca7b40c2ed08afdc84fceb92a16144f654f00206816e7bcb9d2090e3288669e58b78b718ed145c962ec8695b3c8e50e639ec48e8eec011a6e0a2af5b76da519ebcf9ab7c9c448e70641ffb2bbdfccf4042a8a135bc560a9be6ec1561bb7f000c4885a7fa62fa9ab87ad882fd498cdaa491cc4cc241a58fbc85d34f358afb6ac35ec64eee3afd91f78ed1bf9787b629e8c9d49167e75416516cc1257a8e1370d75768fdbbf593b123a6240113a25b0e1956193ea78fe164f94dab31e914b9b20e7127233f77c893c9de26cb299955e714b1217d6b23d86cbfbe7ac5b4f8bc8ceff5299ea9eff584a42fef3118ee92460bd0f1589fa87baf979dd560e37478d58827f32be13db6e3d3646fb3d24110cf92d4507cb338ac6354ab2ab5830f8d09a7ef6f18ccc62aa3a64ac6eb30b8ccb6efd0dad290ccd9b853b9a4e69e7d641067a2b8d3062766bd4bf00db5ee28f45a8776fbb8011b0ecb4b5e77d98b97161ff332a6e6b4ac04e562e0c9de1fde692eefe1445c276dc6806e6b3ab60584157b6f65b421ff6a51c7b1bf39a5a2111d59c13573a89c07b6414a3bac221aeca39df9943084be85d463070c99452aad90356e51bfd3633077ce44332a353a0abe7ee55ac4af3404b1183df2bddd80ad23fb266086ab27bf2e6e655a0e7767a739589407073c071041bc39ce8c4ce0a9fd641f6be309befa8f7e8c788fbb8067af816a97d7fe767eb85c618fb6b547a0732c4bbca9525b086fc2f3d7a512eca4e9732b803a0d20bd440679de906d41e5d0e99f000e5ea6eb6914a3d8db22f76937cd5e81f32556353e7b077e12df401b17beab21ee90d7f9c380bf9f78af6b804b3cc0268e348a29ff2a038cb71b9b9c5718e559fcb784ec67cac746003e5cd22d9a8821beb84409b194fabda3e01a2a676f0eb6a3df5d0ae44142c0e1aa545a649abd643842586f358e66ea2c35cb70e79378aac57f5cd308abbe5a09564e0cc1d3bc8651dd22348a1e4b0a6887510fb54327db27b73a0f45c067157c9bfe77a6a8b41cb52d7ee2e948a132f47bbc0209bd63222541ece3dd054768f6896f6064e1f7d0e8752d8cf00b26b480848b7800f384d5a67923d28341a79726a911cc634b23db35394028fe3a1ed8f727f6f530bdae19a459d7c25c863637f6e9160baf8426c12b9f7f9297374b191923162f886035d413740c3cf49215fa4d6ff8d7c2b255314cb5c54774404e6507eaf32e616272f465f84c4eff7faa067eaf4177d5cd43bda0922e13f4fac77902bc6a7113095a7ca5fac7890ef4d52bf6aa677f33066564968084cc6417687e65cc9db65a6aba519c8b025ae00c78b2eca42fd2bcdd9288c0af9af16dad8df161649953c196862657bd76d708df6c82c5e20d800c3ce0ef96c0281ca9ff8df4c9126eff33144727860341c5519de56b804d90297270dca0ce663215a5a6ad45990a155aef619b7cc278dc25221e92af113a6c79de225e17c7fbff2b1f45a2f47706576da52a6ce563281aeb05778d15a8aa8048e6295cb77911aa3f645e17d2821f8669f6766c27c1c2d5a74a7933047bb11d1f4b57b6be503d341569d1421690c443a2dd10d9c231cc308485d85fa638022d425a351e5a1993d9bbc515aded23d3f777449d5d5d3bf8e670d012406ccccaaa8a44174238f569643ae43dabc88aa074dacd11fa99b79b2bfb4d56f7b75a76a1a396f0a1f640b446bf6842fc461e70560ad29dc7f8ad07b4a48c01d3e31bbc2a4d00695b8b8b6fd10f0fea578cfafeed72ec47e040deb98b4d5e6dab9c9f2e64eb60683128a5eb5d008e1ecf255b4c94d624b7233b76b9b0979c1475593cfa527ef57b2fd457762f263c658e49b42c46668698cc174d752355c0d88bb266d141238b5955bb66fe23537900e5e1553ea967d7e424fea825b0684d17b2155382c8c3d7a7de1e93e1dbae4eff37106310f7d6b39bf38250512e18b2323adec26ce152e40e1050f16d9b4da14a759c1582ce0dead9189f1d7d3db1958e720186279665dc535187264c3958f393eff41be6f</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">咦，这是一篇加密文章，好像需要输入密码才能查看呢！</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>不停更新的学习资料网站</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/10/%E4%B8%8D%E5%81%9C%E6%9B%B4%E6%96%B0%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E7%BD%91%E7%AB%99/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/10/%E4%B8%8D%E5%81%9C%E6%9B%B4%E6%96%B0%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E7%BD%91%E7%AB%99/</id>
    <published>2020-08-10T12:26:58.988Z</published>
    <updated>2020-08-21T07:55:39.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PyQt"><a href="#PyQt" class="headerlink" title="PyQt"></a>PyQt</h1><p>PyQt5中文教程，翻译自 zetcode 这个教程比较好的地方是，能讲解每一段代码的含义。</p><p><a href="https://maicss.gitbooks.io/pyqt5/content/">https://maicss.gitbooks.io/pyqt5/content/</a></p><h1 id="博客技巧"><a href="#博客技巧" class="headerlink" title="博客技巧"></a>博客技巧</h1><p><a href="https://anclark.github.io/2019/03/28/Hexo/%E6%8E%A8%E8%8D%90%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/">https://anclark.github.io/2019/03/28/Hexo/%E6%8E%A8%E8%8D%90%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</a></p><h1 id="优秀的笔记"><a href="#优秀的笔记" class="headerlink" title="优秀的笔记"></a>优秀的笔记</h1><p><a href="https://wujun234.github.io/">https://wujun234.github.io/</a></p><h1 id="蓝牙学习"><a href="#蓝牙学习" class="headerlink" title="蓝牙学习"></a>蓝牙学习</h1><h2 id="经典蓝牙"><a href="#经典蓝牙" class="headerlink" title="经典蓝牙"></a>经典蓝牙</h2><ul><li>LMP <a href="https://www.cnblogs.com/libs-liu/p/9496440.html">https://www.cnblogs.com/libs-liu/p/9496440.html</a></li></ul><h1 id="FreeRTOS-学习"><a href="#FreeRTOS-学习" class="headerlink" title="FreeRTOS 学习"></a>FreeRTOS 学习</h1><p><a href="https://suda-morris.github.io/2018/05/30/freertos/">https://suda-morris.github.io/2018/05/30/freertos/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PyQt&quot;&gt;&lt;a href=&quot;#PyQt&quot; class=&quot;headerlink&quot; title=&quot;PyQt&quot;&gt;&lt;/a&gt;PyQt&lt;/h1&gt;&lt;p&gt;PyQt5中文教程，翻译自 zetcode 这个教程比较好的地方是，能讲解每一段代码的含义。&lt;/p&gt;
&lt;p&gt;&lt;a href=</summary>
      
    
    
    
    <category term="日常" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="学习资料" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    <category term="网站" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Bluetooth学习笔记_BLE_基础知识点1</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/Bluetooth/Bluetooth%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_BLE_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B91/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/Bluetooth/Bluetooth%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_BLE_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B91/</id>
    <published>2020-08-09T13:01:30.000Z</published>
    <updated>2020-08-18T12:21:06.523Z</updated>
    
    <content type="html"><![CDATA[<p>Bluetooth学习笔记 【BLE 基础知识点 1】</p><p>这里是我搜集的一些关于 BLE 的基本概念 和 说明。</p><a id="more"></a><h1 id="BLE-知识点"><a href="#BLE-知识点" class="headerlink" title="BLE 知识点"></a>BLE 知识点</h1><h2 id="1、蓝牙协议栈层次"><a href="#1、蓝牙协议栈层次" class="headerlink" title="1、蓝牙协议栈层次"></a>1、蓝牙协议栈层次</h2><p><img src="20200421174522083_1602102894.png" alt="蓝牙协议栈层次"></p><h2 id="2、BLE低功耗蓝牙核心协议层详解（Bluetooth-Core）"><a href="#2、BLE低功耗蓝牙核心协议层详解（Bluetooth-Core）" class="headerlink" title="2、BLE低功耗蓝牙核心协议层详解（Bluetooth Core）"></a>2、BLE低功耗蓝牙核心协议层详解（Bluetooth Core）</h2><ul><li><p>1、物理层（Physical Layer，简写 PHY）：PHY层用来指定BLE所用的无线频段，调制解调方式和方法等。是1Mbps自适应跳频的GFSK射频，工作于免许可证的2.4GHz ISM（工业、科学与医疗）频段。PHY层做得好不好，直接决定整个BLE芯片的功耗，灵敏度以及selectivity等射频指标。</p></li><li><p>2、链路层（Link Layer，简写 LL）：LL层是整个BLE协议栈的核心，也是BLE协议栈的难点和重点。LL层要做的事情非常多，比如具体选择哪程度 个射频通道进行通信，怎么识别空中数据包，具体在哪个时间点把数据包发送出去，怎么保证数据的完整性，ACK如何接收，如何进行重传，以及如何对链路进行管理和控制等等。LL层只负责把数据发出去或者收回来，对数据进行怎样的解析则交给上面的GAP或者ATT。</p></li><li><p>3、主机控制接口层（Host Controller Interface，简写 HCI）：HCI是可选的，HCI主要用于2颗芯片实现BLE协议栈的场合，用来规范两者之间的通信协议和通信命令等。</p></li><li><p>4、通用访问配置文件层（Generic access profile，简写GAP）：GAP是对LL层payload（有效数据包）如何进行解析的两种方式中的一种，而且是最简单的那一种。GAP简单的对LL payload进行一些规范和定义，因此GAP能实现的功能极其有限。GAP目前主要用来进行广播，扫描和发起连接等。</p></li><li><p>5、逻辑链路控制及自适应协议层（Logical Link Control and Adaptation Protocol，简写 L2CAP）：L2CAP对LL进行了一次简单封装，LL只关心传输的数据本身，L2CAP就要区分是加密通道还是普通通道，同时还要对连接间隔进行管理。</p></li><li><p>6、安全管理层（Security Manager，简写 SM）：SMP用来管理BLE连接的加密和安全的，如何保证连接的安全性，同时不影响用户的体验，这些都是SMP要考虑的工作。</p></li><li><p>7、属性协议层（Attribute protocol，简写 ATT）：简单来说，ATT层用来定义用户命令及命令操作的数据，比如读取某个数据或者写某个数据。BLE协议栈中，开发者接触最多的就是ATT。BLE引入了attribute概念，用来描述一条一条的数据。Attribute除了定义数据，同时定义该数据可以使用的ATT命令，因此这一层被称为ATT层。</p></li><li><p>8、通用属性配置文件层（Generic Attribute profile，简写 GATT）：GATT用来规范attribute中的数据内容，并运用group（分组）的概念对attribute进行分类管理。没有GATT，BLE协议栈也能跑，但互联互通就会出问题，也正是因为有了GATT和各种各样的应用profile，BLE摆脱了ZigBee等无线协议的兼容性困境，成了出货量最大的2.4G无线通信产品。</p></li></ul><h2 id="3、蓝牙协议组成"><a href="#3、蓝牙协议组成" class="headerlink" title="3、蓝牙协议组成"></a>3、蓝牙协议组成</h2><p><img src="20200421175058834_1797307865.png" alt="蓝牙协议组成"></p><p>蓝牙协议体系中的协议按SIG的关注程度分为四层：</p><p>（1）核心协议：BaseBand、LMP、L2CAP、SDP；</p><p>（2）电缆替代协议：RFCOMM；</p><p>（3）电话传送控制协议：TCS-Binary、AT命令集；</p><p>（4）选用协议：PPP、UDP/TCP/IP、OBEX、WAP、vCard、vCal、IrMC、WAE。</p><p>除上述协议层外，规范还定义了主机控制器接口（HCI），它为基带控制器、连接管理器、硬件状态和控制寄存器提供命令接口。在上图中可见，HCI位于L2CAP的下层，但HCI也可位于L2CAP上层。</p><p>蓝牙核心协议由SIG制定的蓝牙专用协议组成。绝大部分蓝牙设备都需要核心协议（加上无线部分），而其他协议则根据应用的需要而定。总之，电缆替代协议、电话控制协议和被采用的协议在核心协议基础上构成了面向应用的协议。</p><h2 id="4、蓝牙基本架构"><a href="#4、蓝牙基本架构" class="headerlink" title="4、蓝牙基本架构"></a>4、蓝牙基本架构</h2><p><img src="20200421175138264_383466804.png" alt="蓝牙基本架构"></p><p>4.1底层硬件模块</p><p>（1）无线射频模块（Radio）：蓝牙最底层，带微带天线，负责数据接收和发送。</p><p>（2）基带模块（BaseBand）：无线介质访问约定。提供同步面向连接的物理链路（SCO）和异步无连接物理链路（ACL），负责跳频和蓝牙数据及信息帧传输，并提供不同层次的纠错功能（FEC和CTC）。</p><p>（3）链路控制模块（LC）：蓝牙数据包的编码和解码。</p><p>（4）链路管理模块（LM）：负责创建、修改和发布逻辑链接，更新设备间物理链接参数，进行链路的安全和控制。</p><p>（5）主机控制器接口（HCI）：是软硬件接口部分，由基带控制器、连接管理器、控制和事件寄存器等组成；软件接口提供了下层硬件的统一命令，解释上下层消息和数据的传递。硬件接口包含UART、SPI和USB等。</p><p>4.2.中间协议层</p><p>（1）逻辑链路控制与适配协议（L2CAP）：蓝牙协议栈的基础，也是其他协议实现的基础。向上层提供面向连接和无连接的数据封装服务；采用了多路技术、分割和重组技术、组提取技术来进行协议复用、分段和重组、认证服务质量、组管理等行为。</p><p>（2）音视频发布传输协议（AVDTP）和音视频控制传输协议（AVCTP）：二者主要用于Audio/Video在蓝牙设备中传输的协议，前者用于描述传输，后者用于控制信号交换的格式和机制。</p><p>（3）服务发现协议（SDP）：蓝牙技术框架至关重要一层，所有应用模型基础。动态的查询设备信息和服务类型，建立一条对应的服务通信通道，为上层提供发现可用的服务类型和属性协议信息。</p><p>（4）串口仿真协议（RFCOMM）：实现了仿真9针RS232串口功能，实现设备间的串行通信。</p><p>（5）二进制电话控制协议（TCS）：基于 ITU-T Q.931 建议的采用面向比特的协议，它定义了用于蓝牙设备之间建立语音和数据呼叫的控制信令（Call Control Signalling），并负责处理蓝牙设备组的移动管理过程。</p><p>4.3.蓝牙Profile</p><p>Bluetooth Profile是蓝牙设备间数据通信的无线接口规范。目前有四大类、十三种协议规则，厂商可以自定义规格。几种最常见的Profile文件：</p><p>（1）通用访问配置文件（GAP）：其他所有配置文件的基础，定义了在蓝牙设备间建立基带链路的通用方法，并允许开发人员根据GAP定义新的配置文件。包含所有蓝牙设备实施的功能，发现和连接设备的通用步骤，基本用户界面等通用操作。</p><p>（2）服务发现应用配置文件（SDAP）：描述应用程序如何用SDP发现远程设备服务，可与向/从其他蓝牙设备发送/接收服务查询的SDP连接。</p><p>（3）串行端口配置文件（SPP）：基于ETSI TS 07.10规格定义如何设置虚拟串行端口及如何连接两个蓝牙设备。速度可达128kb/s。</p><p>（4）通用对象交换配置文件（GOEP）：可以将任意对象（如图片、文档等）从一个设备传输到另一个设备。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Bluetooth学习笔记 【BLE 基础知识点 1】&lt;/p&gt;
&lt;p&gt;这里是我搜集的一些关于 BLE 的基本概念 和 说明。&lt;/p&gt;</summary>
    
    
    
    <category term="Bluetooth学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/Bluetooth%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Bluetooth" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/Bluetooth/"/>
    
    <category term="ESP32" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP32/"/>
    
    <category term="学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IDF" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/IDF/"/>
    
  </entry>
  
  <entry>
    <title>Bluetooth学习笔记_模板</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/Bluetooth/Bluetooth%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%A8%A1%E6%9D%BF/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/Bluetooth/Bluetooth%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-08-09T13:00:30.000Z</published>
    <updated>2020-08-18T12:16:06.910Z</updated>
    
    <content type="html"><![CDATA[<p>Bluetooth学习笔记 【模板】</p><p>之前是在其他博客平台写了一些文章，现在打算移植到自己的的平台上，所以使用此模板进行复制。</p><a id="more"></a><!-- toc --><h2 id="一、启用ets-printf函数"><a href="#一、启用ets-printf函数" class="headerlink" title="一、启用ets_printf函数"></a>一、启用ets_printf函数</h2><p>欢迎关注我的博客和github呀~ 希望能够和各路大佬一起讨论技术问题~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Bluetooth学习笔记 【模板】&lt;/p&gt;
&lt;p&gt;之前是在其他博客平台写了一些文章，现在打算移植到自己的的平台上，所以使用此模板进行复制。&lt;/p&gt;</summary>
    
    
    
    <category term="Bluetooth学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/Bluetooth%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Bluetooth" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/Bluetooth/"/>
    
    <category term="ESP32" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP32/"/>
    
    <category term="学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IDF" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/IDF/"/>
    
  </entry>
  
  <entry>
    <title>在 Window 系统上安装 ESP-IDF 环境的简单方法</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP32%E5%AD%A6%E4%B9%A0/%E5%9C%A8%20Window%20%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%20ESP-IDF%20%E7%8E%AF%E5%A2%83/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP32%E5%AD%A6%E4%B9%A0/%E5%9C%A8%20Window%20%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%20ESP-IDF%20%E7%8E%AF%E5%A2%83/</id>
    <published>2020-08-09T12:10:00.000Z</published>
    <updated>2020-08-18T12:16:37.794Z</updated>
    
    <content type="html"><![CDATA[<p>这里来介绍一下 Windows 环境下，使用 CMake 直接进行编译的方法。（不需要再下载 Mingw32 或者 ESP-IDF 工具安装器啦~）这里附带：<a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/windows-setup.html#using-the-command-prompt">官网说明</a></p><a id="more"></a><!-- toc --><h2 id="安装软件工具"><a href="#安装软件工具" class="headerlink" title="安装软件工具"></a>安装软件工具</h2><p>git <a href="https://www.jianshu.com/p/bebba0d8038e">安装教程</a><br>python <a href="https://docs.python.org/zh-cn/3.7/using/windows.html#installation-steps">安装教程</a></p><h2 id="使用-git-下载-ESP-IDF"><a href="#使用-git-下载-ESP-IDF" class="headerlink" title="使用 git 下载 ESP-IDF"></a>使用 git 下载 ESP-IDF</h2><p><code>git clone --recursive https://github.com/espressif/esp-idf.git</code></p><h2 id="安装-ESP-IDF"><a href="#安装-ESP-IDF" class="headerlink" title="安装 ESP-IDF"></a>安装 ESP-IDF</h2><p>在 ESP-IDF 路径下 打开 cmd 命令窗口，输入：<br><code>install.bat</code><br><img src="https://img-blog.csdnimg.cn/20200606010837327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="cmd 命令窗口 安装IDF"><br>等待安装完成之后 根据提示输入 <code>export.bat</code> 即可在该窗口下使用 IDF 了。<br><img src="https://img-blog.csdnimg.cn/20200606011416783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="配置 IDF 环境"></p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>推荐配合使用 VSCode 进行编辑，在使用了 <code>export.bat</code> 命令添加路径的 cmd 命令窗口中输入 <code>code .</code> 即可打开 VScode 并且环境变量能够被继承到 VScode 编辑器中。可以直接在 VScode 的 terminal 中，在工程路径下使用 <code>idf.py</code> 工具进行 <code>make</code>、<code>flash</code>、<code>clean</code>等操作，实现 Windows 系统上的 ESP32 开发。<br><img src="https://img-blog.csdnimg.cn/20200606011516919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="编译"></p><p><img src="https://img-blog.csdnimg.cn/20200606012719182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="烧录下载"></p><p><img src="https://img-blog.csdnimg.cn/20200606012750474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="运行"></p><h1 id="Bug-解决"><a href="#Bug-解决" class="headerlink" title="Bug 解决"></a>Bug 解决</h1><p>目前发现 在 windows 环境下 VSCode 编译器中 无法正常的使用 <code>idf.py menuconfig</code> 菜单的上下键切换功能，也就是无法进行配置。但是这个问题有一个简单的解决方法，可以使用 <code>start cmd</code>命令召唤出新的 cmd 窗口，再使用 <code>idf.py menuconfig</code> 就可以使用方向键控制 menu 菜单了。</p><p><img src="https://img-blog.csdnimg.cn/20200606013544319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="菜单配置"></p><p>好啦 ESP-IDF 的简单安装方法就介绍完毕了~ 希望大家多多和我交流呀~ O(∩_∩)O哈哈~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里来介绍一下 Windows 环境下，使用 CMake 直接进行编译的方法。（不需要再下载 Mingw32 或者 ESP-IDF 工具安装器啦~）这里附带：&lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/windows-setup.html#using-the-command-prompt&quot;&gt;官网说明&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ESP32" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/ESP32/"/>
    
    
    <category term="ESP32" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP32/"/>
    
    <category term="IDF" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/IDF/"/>
    
    <category term="Windows" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>setjump_and_longjump</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/%E7%BC%96%E7%A8%8B/setjump_and_longjump%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/%E7%BC%96%E7%A8%8B/setjump_and_longjump%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2020-08-09T11:22:00.000Z</published>
    <updated>2020-08-18T11:54:18.654Z</updated>
    
    <content type="html"><![CDATA[<p>setjump_and_longjump</p><h2 id="setjump和longjump函数及使用注意事项，C语言setjump和longjump函数详解"><a href="#setjump和longjump函数及使用注意事项，C语言setjump和longjump函数详解" class="headerlink" title="setjump和longjump函数及使用注意事项，C语言setjump和longjump函数详解"></a>setjump和longjump函数及使用注意事项，C语言setjump和longjump函数详解</h2><p>前面已经阐述过，对错误处理而言，goto 语句只能是在函数的局部作用域内跳转，而不能实现跨函数跳转。但在实际错误处理中，经常会遇到这样的场景：在一个深度嵌套的函数调用中发生了错误，需要放弃当前任务，从多层函数调用中返回，并且在较高层级的函数中继续执行（或许是在 main() 函数中）。要做到这一点，可以让每个函数都返回一个状态值，由函数的调用者检查并做相应处理。</p><a id="more"></a><p>很显然，遇到这种场景，goto 语句就显得无能为力了，而 setjmp 宏和 longjmp 函数组合就提供了这一功能，它们能够提供一种在程序中实现“非本地局部跳转”（non-local goto）的机制。其原型定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int setjmp(jmp_buf env);</span><br><span class="line">void longjmp(jmp_buf env, int value);</span><br></pre></td></tr></table></figure><p>从上面的原型定义中可以看出，setjmp 宏与 longjmp 函数都使用 jmp_buf 结构作为形参以保存程序当前的堆栈环境，它们的调用关系是这样的：</p><p>程序首先需要调用 setjmp 宏函数来初始化 jmp_buf 结构体变量 env，并将当前的堆栈环境信息存入 env 中，为以后调用 longjmp 函数恢复原来环境信息时使用。如果是直接调用 setjmp，那么它的返回值为 0；如果由于调用 longjmp 函数而调用 setjmp，那么它的返回值为非 0。由此可见，setjmp 宏函数能返回两次：</p><ul><li>第一次是初始化时，返回值为 0。</li><li>第二次则是在遇到 longjmp 函数调用后，longjmp 函数将使 setjmp 发生第二次返回，返回值由 longjmp 函数的第二个参数给出，返回值为非 0。</li></ul><p>相对于 setjmp 函数用于保存程序的运行时的当前堆栈环境，longjmp 函数则用于恢复在先前程序中调用 setjmp 函数时所保存的堆栈环境。当调用 longjmp 函数时，它会根据变量 env 所保存的堆栈环境来恢复先前的环境。与此同时，longjmp 函数的 value 参数值会被 setjmp 函数返回，程序继续得以执行。如下面的示例代码所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;setjmp.h&gt;</span></span></span><br><span class="line">jmp_buf buf;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F2</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"F2()\n"</span>);</span><br><span class="line">    longjmp(buf,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F1</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    F2();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"F1()\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> jmpret = setjmp(buf);</span><br><span class="line">    <span class="keyword">if</span>(!jmpret)</span><br><span class="line">    &#123;</span><br><span class="line">        F1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"继续执行main\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>运行结果为：F2()继续执行main</code></pre><p>从上面的代码中可以看出，对 goto 语句而言，setjmp 宏与 longjmp 函数不仅能够实现跨函数的全局跳转，而且其错误处理方式也比 goto 语句优雅得多。但是，在使用 setjmp 宏与 longjmp 函数进行错误处理时，必须注意如下两点。</p><ul><li><p>1 setjmp 宏与 longjmp 函数组合使用时，它们必须有严格的先后执行顺序。<br>也就是说，必须先调用 setjmp 来初始化 jmp_buf 结构体变量 env 之后，才能够调用 longjmp 函数来恢复到先前被保存的堆栈环境（即程序执行点）。如果在 setjmp 调用之前执行 longjmp 函数，那么将导致程序的执行流变得不可预测，很容易导致程序崩溃而退出。</p></li><li><p>2 longjmp函数必须在setjmp的作用域之内。<br>在一个函数中使用 setjmp 来初始化一个全局变量（jmp_buf buf）buf 之后，只要这个函数没有被返回，那么在其他任何地方都可以通过 longjmp 调用来跳转到 setjmp 的下一条语句执行。也就是说，setjmp 将发生调用处的局部堆栈环境保存在一个 jmp_buf 结构体变量 env 中，只要主调函数中对应的内存未曾释放，在调用 longjmp 的时候就可以根据已保存的 jmp_buf 参数恢复到 setjmp 的地方执行。</p></li></ul><p>其实，从上面的程序示例代码中不难看出，如果说 goto 语句使程序变得难以阅读，那么 setjmp 宏与 longjmp 函数组合这种非局部跳转会让整个代码的糟糕程度增加一个数量级，因为它能在程序中的任意多个函数间传递控制。因此，应当谨慎使用它们，尽可能避免在实际编码中使用 setjmp 宏与 longjmp 函数组合。尽管如此，在编写信号处理器时，它们偶尔还是会派上用场的。</p><p>最后，需要注意的是，无论使用什么样的错误处理方式，都不要忘记发现程序中错误的最好方法其实是执行程序，对代码进行逐条跟踪，这样可以观察数据在函数中的流动，同时检查出类似于上溢和下溢错误、数据转换错误、NULL 指针错误、错误的内存单元、用 = 代替 ==、运算优先级错误、逻辑运算等错误。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;setjump_and_longjump&lt;/p&gt;
&lt;h2 id=&quot;setjump和longjump函数及使用注意事项，C语言setjump和longjump函数详解&quot;&gt;&lt;a href=&quot;#setjump和longjump函数及使用注意事项，C语言setjump和longjump函数详解&quot; class=&quot;headerlink&quot; title=&quot;setjump和longjump函数及使用注意事项，C语言setjump和longjump函数详解&quot;&gt;&lt;/a&gt;setjump和longjump函数及使用注意事项，C语言setjump和longjump函数详解&lt;/h2&gt;&lt;p&gt;前面已经阐述过，对错误处理而言，goto 语句只能是在函数的局部作用域内跳转，而不能实现跨函数跳转。但在实际错误处理中，经常会遇到这样的场景：在一个深度嵌套的函数调用中发生了错误，需要放弃当前任务，从多层函数调用中返回，并且在较高层级的函数中继续执行（或许是在 main() 函数中）。要做到这一点，可以让每个函数都返回一个状态值，由函数的调用者检查并做相应处理。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C语言" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266开发学习笔记_ws2812三原色灯</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_ws2812%E4%B8%89%E5%8E%9F%E8%89%B2%E7%81%AF/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_ws2812%E4%B8%89%E5%8E%9F%E8%89%B2%E7%81%AF/</id>
    <published>2020-08-09T10:07:30.000Z</published>
    <updated>2020-08-18T12:17:08.704Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266 开发学习笔记_By_GYC 【spi方式驱动 ws2812 三原色灯（稳定优化）】</p><p>本章介绍ESP8266 IDF 框架下 如何使用 骚操作 的使用SPI总线，发送更高精度的脉冲信号，ws2812作为控制芯片三色灯的使用方法，实现三原色显示灯带。在研究过程中，发现ESP8266的引脚响应速度有些慢，输出2.5us才能够翻转一次，而ws2812的控制电平分辨率要求在百纳秒级，所以需要其他方法来输出控制信号才能保证灯光稳定。本次选用SPI信号输出口，使灯光达到了稳定。</p><a id="more"></a><!-- toc --><h2 id="一、驱动ws2812遇到的问题"><a href="#一、驱动ws2812遇到的问题" class="headerlink" title="一、驱动ws2812遇到的问题"></a>一、驱动ws2812遇到的问题</h2><p>在淘宝上偶然看见有只需要一个引脚就能高速的控制三原色全彩LED灯，这让我很感兴趣，就买下来回来尝试，结果到手当天就遇到了很严重的问题，根据手册的说明写了一下简单的驱动程序，灯亮是能亮但是只有一个颜色，没有办法像网上说的那样能够自由的调节颜色，搞得我很是崩溃，还以为自己的编程水平出了问题，明明代码逻辑已经没有什么问题了，却还是不能正常显示，我就喊朋友来帮忙驱动一下，他用stm32的开发板，十几分钟就从网上扣下源码给我驱动了，代码逻辑和我的相差无几。</p><p>那么确定不是代码的问题了，就要找找其他的问题，比如我正在研究的单片机ESP8266。放到示波器上显示GPIO引脚的输出电平可以发现，引脚的实际输出速度并不像程序设计的那样，实际操作时ESP8266的管脚每2.5us（0.4MHz）才能够进行一次有效的翻转，而ws2812的控制电平要求精度在百ns级别，普通的GPIO管脚并不能达到这样的速度，而stm32的引脚翻转速度远大于ESP8266的，其I/O口驱动电路的响应速度有2M、10M、50M可选，轻松就能达到百纳秒的精度。所以stm32能够轻松的驱动ws2812而ESP8266只能通过骚操作来实现。</p><h2 id="二、可能的方案"><a href="#二、可能的方案" class="headerlink" title="二、可能的方案"></a>二、可能的方案</h2><p>1、特殊GPIO</p><p>一般如stm32主频比较高的单片机，可以直接通过驱动GPIO引脚，控制引脚的翻转，实现对ws2812的控制。虽然ESP8266的GPIO翻转速度无法达到期望的速度，但是根据网上其他人的分享，发现ESP8266的GPIO0的翻转速度和响应速度都比片上其他的GPIO快，可以作为ws2812的驱动引脚。经过测试，发现配合寄存器操作的GPIO0确实能够驱动ws2812、并且能够显示色彩进行调节。不过这种方法稳定性较低，不知道是我使用的芯片问题还是普遍存在，用GPIO0驱动的ws2812灯圈（8个）不稳定，偶尔就会一个灯珠颜色错误。这让我很是难受。</p><p>2、使用pwm驱动</p><p>PWM，周期设置为3MHz，发送0就把占空比设置为33%，发送1就把占空比设置为66%。也是一种很有创意的驱动方式。可惜的是ESP8266的PWM功能是通过定时器用GPIO翻转模拟的，它的PWM 周期范围是：1000us (1KHz) ~ 10000us (100Hz)，达不到要求。</p><p>3、使用SPI方案（本次使用）</p><p>可以注意到，将SPI的时钟调整为8MHz，发送一字节是1us，一个比特是0.125us，给ws2812发送逻辑0即可以通过SPI总线发送11000000b来实现（0.25us高电平，0.75us低电平），发送逻辑1即可以通过SPI总线发送11111100b来实现（0.75us高电平，0.25低电平）。通过这种方式驱动的灯光稳定可靠。能够保证灯光不会出现闪烁或者某个灯珠颜色跳变的情况。本次要介绍的ws2812驱动就是使用这种控制方式来实现的。</p><p>TODO: 低电平时间0.25us是硬件规定的低电平最小时间，如果能增大一点会更稳定，可以把控制引脚高低的数据改成数据流，比如 </p><p>TL：1110000000b （0.375us[0.4-0.025] 高电平，0.875us[0.85+0.025] 低电平） 9位 共1.125us</p><p>TH：1111110000b （0.75us [0.8-0.05] 高电平，0.5us [0.45+0.05] 低电平）9位 共1.125us</p><p>高低电平的数据组合组成一长串的 spi 数据，可以使控制更加稳定。</p><h2 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h2><p>首先根据ESP8266 的资源信息确认需要用到的引脚。</p><p><img src="ESP8266%E5%BC%95%E8%84%9A%E5%9B%BE.jpeg" alt="image"></p><p> 根据上图所示，ESP8266在nodemcu上的SPI引脚是D5-D8、我们可以通过初始化控制禁用CS和MISO使能，只使用MOSI作为WS2812的输出引脚。设置SPI的时钟频率（SPI clock frequency）为8MHz，使一个字节周期为1.25us。</p><p>spi引脚初始化函数如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ws2812_spi_mode_init</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//must use the ESP8266 GPIO13 as the hspi pin to drive WS2812B RGB LED!!!</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ESP_LOGI(<span class="string">"WS2812"</span>, <span class="string">"ws2812 init gpio"</span>);</span><br><span class="line"></span><br><span class="line">    ESP_LOGI(<span class="string">"WS2812"</span>, <span class="string">"init hspi"</span>);</span><br><span class="line">    <span class="keyword">spi_config_t</span> spi_config;</span><br><span class="line">    <span class="comment">// Load default interface parameters</span></span><br><span class="line">    <span class="comment">// CS_EN:1, MISO_EN:1, MOSI_EN:1, BYTE_TX_ORDER:1, BYTE_TX_ORDER:1, BIT_RX_ORDER:0, BIT_TX_ORDER:0, CPHA:0, CPOL:0</span></span><br><span class="line">    spi_config.interface.val = SPI_DEFAULT_INTERFACE;</span><br><span class="line">    <span class="comment">// Load default interrupt enable</span></span><br><span class="line">    <span class="comment">// TRANS_DONE: true, WRITE_STATUS: false, READ_STATUS: false, WRITE_BUFFER: false, READ_BUFFER: false</span></span><br><span class="line">    spi_config.intr_enable.val = SPI_MASTER_DEFAULT_INTR_ENABLE;</span><br><span class="line">    <span class="comment">// Cancel hardware cs</span></span><br><span class="line">    spi_config.interface.cs_en = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// MISO pin is used for DC</span></span><br><span class="line">    spi_config.interface.miso_en = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// CPOL: 1, CPHA: 1</span></span><br><span class="line">    spi_config.interface.cpol = <span class="number">1</span>;</span><br><span class="line">    spi_config.interface.cpha = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// Set SPI to master mode</span></span><br><span class="line">    <span class="comment">// 8266 Only support half-duplex</span></span><br><span class="line">    spi_config.mode = SPI_MASTER_MODE;</span><br><span class="line">    <span class="comment">// Set the SPI clock frequency division factor</span></span><br><span class="line">    spi_config.clk_div = SPI_8MHz_DIV;</span><br><span class="line">    <span class="comment">// Register SPI event callback function</span></span><br><span class="line">    spi_config.event_cb = spi_event_callback;</span><br><span class="line">    spi_init(HSPI_HOST, &amp;spi_config);</span><br><span class="line"></span><br><span class="line">    ESP_LOGI(<span class="string">"WS2812"</span>, <span class="string">"init over"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，这里虽然没有用到，但是你需要设置spi的事件回调函数，即使他是空的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> IRAM_ATTR <span class="title">spi_event_callback</span><span class="params">(<span class="keyword">int</span> event, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event) &#123;</span><br><span class="line">        <span class="keyword">case</span> SPI_INIT_EVENT: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SPI_TRANS_START_EVENT: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SPI_TRANS_DONE_EVENT: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SPI_DEINIT_EVENT: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备工作做好之后，我们就要编写数据发送函数了。网上其他的例程里面常常把数据发送函数分为位发送、字节发送、像素点发送三层，层层调用，这种逻辑非常的便于阅读。但是在引脚响应速度并不那么快的单片机上，这种结构并不能保证时序的稳定性，因此，此处我直接略去了前两个过程，直接提供了一个像素数据发送的函数。避免函数切换、SPI重新启动引起的时序不稳定问题。</p><p>这个函数在结构上还有待优化，待我闲下来的时候再重构一下，先提供一个能够使用的版本，也希望有高手能够分享这个程序的简化版本。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">WS2812BSend_24bit</span><span class="params">(<span class="keyword">uint8_t</span> R, <span class="keyword">uint8_t</span> G, <span class="keyword">uint8_t</span> B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> GRB=G&lt;&lt;<span class="number">16</span>|R&lt;&lt;<span class="number">8</span>|B;</span><br><span class="line">  <span class="keyword">uint8_t</span> data_buf[<span class="number">24</span>];</span><br><span class="line">  <span class="keyword">uint8_t</span> *p_data=data_buf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//能用　等待优化!</span></span><br><span class="line">    <span class="keyword">uint8_t</span> mask = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">uint8_t</span> <span class="keyword">byte</span> = G;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (mask) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">byte</span> &amp; mask ) &#123;*p_data = <span class="number">0xFC</span>;<span class="comment">/*11111100b;*/</span>&#125; <span class="keyword">else</span> &#123;*p_data = <span class="number">0XC0</span>;<span class="comment">/*11000000b;*/</span>&#125;</span><br><span class="line">        mask &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        p_data++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     mask = <span class="number">0x80</span>;</span><br><span class="line">     <span class="keyword">byte</span> = R;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (mask) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">byte</span> &amp; mask ) &#123;*p_data = <span class="number">0xFC</span>;<span class="comment">/*11111100b;*/</span>&#125; <span class="keyword">else</span> &#123;*p_data = <span class="number">0XC0</span>;<span class="comment">/*11000000b;*/</span>&#125;</span><br><span class="line">        mask &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        p_data++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     mask = <span class="number">0x80</span>;</span><br><span class="line">     <span class="keyword">byte</span> = B;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (mask) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">byte</span> &amp; mask ) &#123;*p_data = <span class="number">0xFC</span>;<span class="comment">/*11111100b;*/</span>&#125; <span class="keyword">else</span> &#123;*p_data = <span class="number">0XC0</span>;<span class="comment">/*11000000b;*/</span>&#125;</span><br><span class="line">        mask &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        p_data++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span>* p_8_data;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      p_8_data=(data_buf+(i*<span class="number">4</span>));</span><br><span class="line">      <span class="keyword">uint8_t</span> temp;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">      &#123;</span><br><span class="line">        temp=p_8_data[j];</span><br><span class="line">        p_8_data[j]=p_8_data[<span class="number">3</span>-j];</span><br><span class="line">        p_8_data[<span class="number">3</span>-j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> *spi_buf=(<span class="keyword">uint32_t</span>*)data_buf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">spi_trans_t</span> trans = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    trans.mosi = spi_buf;</span><br><span class="line">    trans.bits.mosi = <span class="number">24</span>*<span class="number">8</span>;</span><br><span class="line">    <span class="comment">//ETS_INTR_LOCK();  </span></span><br><span class="line">    spi_trans(HSPI_HOST, trans);     </span><br><span class="line">    <span class="comment">//ETS_INTR_UNLOCK();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较麻烦的是，我这里每次传输了192（24*8）bit，由于这是32位的单片机，他是以32bit为单位进行传输的，而且每次都是从低位开始传输。由于ESP8266是小端字节序（与我们的阅读习惯不一致），所以在设置传输的时候需要将数据反一下，保证数据输出的顺序是我们想要的顺序。</p><p>以unsigned int value = 0x12345678为例，分别看看在两种字节序下其存储情况</p><p>|内存地址       |小端模式存放内容   |大端模式存放内容|<br>|：——-：    |：——-：    |：——-：|<br>|0x4000         |0x78|            |0x12|<br>|0x4001            |0x56|            |0x34|<br>|0x4002            |0x34|            |0x56|<br>|0x4003            |0x12|            |0x78|</p><p>有了如上函数，我们就可以轻松的点亮ws2812三原色灯珠了。</p><p>ws2812具体的协议可以参考技术规格书（<a href="https://wenku.baidu.com/view/25f176db482fb4daa48d4ba1.html?rec_flag=default&amp;sxts=1561280682919%EF%BC%89%EF%BC%8C">https://wenku.baidu.com/view/25f176db482fb4daa48d4ba1.html?rec_flag=default&amp;sxts=1561280682919），</a></p><p>使用到的主要内容如下：</p><p><img src="%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F1.png" alt="image"><br> <br><img src="%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F2.png" alt="image"> </p><p>需要注意的是 要保证电源稳定，因为电源问题我遇到了 意外的灯光闪烁、多个灯一起点亮时产生颜色偏差 的问题，更换了供电线和使用5V给模块供电之后，颜色显示完全稳定和正常了。保证硬件良好是软件调试好软件的关键。</p><p>四、测试程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIXEL_MAX 4 <span class="comment">//the total numbers of LEDs you are used in your project</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span> rBuffer[PIXEL_MAX]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> gBuffer[PIXEL_MAX]=&#123;<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>&#125;;</span><br><span class="line"><span class="keyword">uint8_t</span> bBuffer[PIXEL_MAX]=&#123;<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WS2812_Test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//初始化 HSPI 作为数据输出引脚</span></span><br><span class="line">  ws2812_spi_mode_init();</span><br><span class="line">  <span class="comment">//刷新显示4个LED灯</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;PIXEL_MAX;i++)</span><br><span class="line">  &#123;  </span><br><span class="line">    WS2812BSend_24bit(rBuffer[i],gBuffer[i],bBuffer[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用我github上写好的库函数进行测试：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">app_main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SDK version:%s\n"</span>, esp_get_idf_version());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"WS2812 Demo\n"</span>);</span><br><span class="line"></span><br><span class="line">    WS2812_Init();        <span class="comment">//初始化</span></span><br><span class="line">    rainbowCycle(<span class="number">10</span>);     <span class="comment">//彩虹环</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果 </p><p><img src="%E6%95%88%E6%9E%9C.png" alt="image"></p><p>五、还没结束<br>目前这个项目还未完全完成，还存在一些优化空间，希望大家能够多多和我交流，写出更好的程序。O(∩_∩)O哈哈~</p><p>在此特别感谢“半颗心脏”大佬对我项目的关注，互相学习啦。</p><p>我的源文件和头文件已经上传至我的github上（<a href="https://github.com/gengyuchao%EF%BC%89%EF%BC%8C%E6%AC%A2%E8%BF%8E%E5%A4%A7%E5%AE%B6%E5%85%B3%E6%B3%A8%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%92%8Cgithub%E5%91%80%E3%80%82">https://github.com/gengyuchao），欢迎大家关注我的博客和github呀。</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ESP8266 开发学习笔记_By_GYC 【spi方式驱动 ws2812 三原色灯（稳定优化）】&lt;/p&gt;
&lt;p&gt;本章介绍ESP8266 IDF 框架下 如何使用 骚操作 的使用SPI总线，发送更高精度的脉冲信号，ws2812作为控制芯片三色灯的使用方法，实现三原色显示灯带。在研究过程中，发现ESP8266的引脚响应速度有些慢，输出2.5us才能够翻转一次，而ws2812的控制电平分辨率要求在百纳秒级，所以需要其他方法来输出控制信号才能保证灯光稳定。本次选用SPI信号输出口，使灯光达到了稳定。&lt;/p&gt;</summary>
    
    
    
    <category term="ESP8266开发学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IDF" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/IDF/"/>
    
    <category term="ESP8266" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP8266/"/>
    
    <category term="WS2812" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/WS2812/"/>
    
  </entry>
  
  <entry>
    <title>IT各职位-中英文对照</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/English/IT%E5%90%84%E8%81%8C%E4%BD%8D-%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/English/IT%E5%90%84%E8%81%8C%E4%BD%8D-%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7/</id>
    <published>2020-08-09T09:47:00.000Z</published>
    <updated>2020-08-18T12:16:17.331Z</updated>
    
    <content type="html"><![CDATA[<p>中英文缩写对照</p><h1 id="IT各职位中英文对照如下："><a href="#IT各职位中英文对照如下：" class="headerlink" title="IT各职位中英文对照如下："></a>IT各职位中英文对照如下：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1、FE – Front End 前端工程师</span><br><span class="line"></span><br><span class="line">2、BE – Back End 后端工程师</span><br><span class="line"></span><br><span class="line">3、OP – Operation 运维工程师</span><br><span class="line"></span><br><span class="line">4、TS – Technology Support 技术支持</span><br><span class="line"></span><br><span class="line">5、UI – User Interface 用户界面设计师</span><br><span class="line"></span><br><span class="line">6、QA – Quality Assurance 测试工程师</span><br><span class="line"></span><br><span class="line">7、DBA – Database Administrator 数据库</span><br><span class="line"></span><br><span class="line">8、PM – Product &amp; Marketing 产品经理</span><br><span class="line"></span><br><span class="line">9、UE(UX) – User Experience 用户体验设计师</span><br><span class="line"></span><br><span class="line">10、UER – User Experience Research 用户研究</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;中英文缩写对照&lt;/p&gt;
&lt;h1 id=&quot;IT各职位中英文对照如下：&quot;&gt;&lt;a href=&quot;#IT各职位中英文对照如下：&quot; class=&quot;headerlink&quot; title=&quot;IT各职位中英文对照如下：&quot;&gt;&lt;/a&gt;IT各职位中英文对照如下：&lt;/h1&gt;&lt;figure class=</summary>
      
    
    
    
    <category term="English" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/English/"/>
    
    
    <category term="English" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Command</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3/Command/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3/Command/</id>
    <published>2020-08-09T09:10:47.150Z</published>
    <updated>2020-08-09T09:13:36.583Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="09fca65c35da708d0d10d7f50fc62bb32226ef4ff3dca43eafba0aa4179d61df">1e3dfbf7f1771c067d37a46eb42c5cd109ae897454b73b10e5dade021515283fd784b3ddf8ec571603904e69536d3380edc2444b845a54c00aef974ae7d8e93a8935047321229c7fb2355100ec2cb4f1bc751f3c9abf6f92a447b59b49b8ac224fd7296bf56bc3329c427a218d9b0c15934f8ee6f7126a8dbe555bc1041a918901b2ef933fba5dd5f8869b69c3f7dbe7eb5729a0ab723dcde9e0a6c69069ab0cc8725464a175a5da1cdbb22463cafa2b289bdcee35c69cb5e1be899c2758f57898e550924e61420e154ded7c4a21516c96bd4fa48b070c805b2725dc3bb929666ed55a700e3f24b74f9f2ad78310e32ef71edb29a8c80d9395e47dcf429dbcde751ee854a1f68bd850e8c78f9d03bfb089884a20b0044129fde9eb2ea73b6f8456e184aca9a5faf03f3d4818f2a9e76b184d1d17735351301463d6bb37755e7fa3be78ed37590b4f39be77ae9e358de911d36b96581621e374dacb33cbf337344e42c8da16051194191a8a4127b435d648c8de0fb48992ffd6e5aa740ecdbe976d5c25b4a409f860739b200a901b6f6b44a82ccfd775aa52b78d74a76ec4019e3130b0b043bf284600e888cf20fb5cbccb3e34b59069c01984c07b35d553d210c60191402f6b6ab37df379d8eac46171932ea6839ead8b7d00afe3a6b90ee86141d4a8a64c3113a208c9650dc5d47c369b7ee93d288d953d19e196dcbfcf8827458ecedc8464f10a5eb0b3dbfc9b0f209926e3ffa0d6842fa371d62fffa1ff27860c28514d6f7d0407095c456bd84364681b1fb3fdcb44390eda5ef6f67671083381f4adb3675f91e88cf1bdea19646e270561e66558222bcbfb4c396b0c1f3a5a0e65eb0f85dec8c2470bed6c17911dc7aecd9dc97d629114c8f9ac425c661bcce337b7b943b3ce09afef13a37b51def6b7ca9a653527ca43a2aaf9a985a633b605c9e6515737cfabcd37573a37d5fa23134560c9adf22e648421642b180267385d4fb7d670641cb183d1849493a7ab2534acffd5c25f1472966320e088471e462ace01b34025b516c723355e550d93c4ac3f8291877f87fb0f5a00e7cd50de372948182e7c8e1190d1dba7a1f742f4c16ec2d357d159b417a2b606f0d3abf48915f70145fef42c0e096bf76b2a083b7e8472d5381c0904e7b23e9b0c7c72ccaafd4151c5ede0c0f9c8d7ddba0aeaab7dcffb9e695a0d8a27c2399f7dc2cd8a9907037dc6198eec6cdf67e468347c7ab8bc3ff098b8ce131920b43601169179bfc65ccd1bdb01880b397b86cd141603ece98c6f178e7d14c4abf336289cffa44aa85edf2441f216d4ed8726d3527c1cdc65f349c6534b439b394efec4fe528dab435c9d2d9f3a50176b7fd8d687fcacd9fc386a9e4239e5ef30d0cee57a0e27ee21306913f225d7125c8bffe8bebff48545a4215ca91cdd4fa9c484535014701dd809226cbe80d4e301a6f3a86624f9f4d4fdd4cf88aa3dc6febdbc982f5b42c1b9d998925d15ad5bf556c65d77a9b8b6c35377e9c94ae8692157c796d4b861979c409907dd896d5b415cff91e5c28ac77cc8f179bed23c8c2fb89ceac495189db13665fbe4f8a9a6dc753e2d5bb95d82ec3a3c4681ea2cdd5ae19acfe6a98f37f091f20dcd6b9422e2561190a3b945820b0d5317b501c4d732eb619926384f0b29ce360e18af46bb936979c6809b408d6eb198dd89a25b6b1d9c818c74215b1745447682b0fcfdb0081e00d5ab1561bbf44b85bbc452acd964b049be6e464ee72d8cced32c0c3757062c4c15ed3058d9ace8717b1f3f2b04a7fe4213775205d7643a35a3832421373271fb86ed935ab501a85dabe3b3d81f0fdcc14adfa6503852ecf055baed12bd20c36952e9f4ce1a21936faeda6aacb438c2ea8c25bc27176f92b25a4b1180a6d033e763820d53f3dd02b99da3ed6cdffadabfe4590c03d2c6a3ee9334cf61b6646b1595d8685667d25f0f8933efc5e65cfbac5a7d94ecd80ffc43d6376ae8eea67e523ee9a3c9699c966894a15b78daa51981c7c23991516f70f0f5e38e73517808ac0e624bf2acfa6d4877cb421b05e0d72f934f622895e3e1e77e7fb7773001d1edf81ee83126e6fa77f376ffaa504c7941abc9da54b83ff97662243b8b40c634610cc8f555b994327960e420bbe5b7e9807958b70c74f82809590dab8186217d2cba7da9a583c687985ec7e68a9c4a220fc03904a3078671ce5d80142ec09d2738405fa3d50acdedb3c5feba6c99aeef2373a53d9b7ee7e51f87bb81baa0d7a823a3f4eab157fe7aa210f8ce638e044f739e4a7b3b2a555efb9381995d6d400aaff939ed94149bfee7947f42b131df45cdf08d10c6aa3e2078daec62f0e0843bf0b1508876d4e926401577e8de9b98f6b12f022412a629251a72b6808fb59a46cdc9d795d3b8a51ce18dcb6d840153b0ed3a745dd202eac92bfb52ed57b9215c8515aca4517a05fcf53884cf87b4f5f3a057ff1cdd94cfda3a7d5c52c040489469df225268b5268573e48794469a57b32e2a1f8ba02dfb0a99f051f191f29043da2257ae2fec7e9cf215655e7d2f1804db84b3266dcd30d19a0c1d5ab1293afb9e82dc8157c7a4479ad08efc4fef3eb6d466081c20079872d3818d7fd462574cd67520b79fd6216cec5efa55cea564de45f29460e8ce78f4a05544b6d84de40eaf60881e7614c63249fdc93d27601c11821b818a4cc9e4ff689b92a3746aeb41eb7b493487c42cb0a355b169f659da3e92ffeb41942831fe7cc778dcd10ca0890077d5ead0816f72b142adbe413dc3223e9f54ad6bacb7ef9da33022f2631574795aac05f568f636c9f0cc51d1590d28b7626162e266c32b261e8a620ebe1ac0b66075fb1e213933363c671af92d3f5afcea6ddd45b23ef1ef9ded813f622d05897d98616068fd2e201ce9d124ac58c478a59354d31e7d80b5eca34cfc7a40c6dadc2bccc708b15cb1b458923c99a1f97d65ed7bd97783177706f66fc41fdd15917ab3df243794fc433c81d605332246872ff9e5d3d622e7010f269bcea7e5d50522f96f7e9dd4c3224b3111c5ce0a449e3b9ac568dcd7f394f10a0e780ab436f5b51232e48fdb7e47b3705022fbaf35f80ad239306d384e274e0f8f7cc9afd7256b331dc43b81d6473c939870cceefe5c25162cc580486db792c3627478fcf9042c5d571f971f6f3defb8fd2531c735a84c4df5975261dbbfc7ff8f3b864383accce92317dc2a57140192fbe9db800f708502eba43e7a0dd0373bb5e4fabab87b0cb2bb086797546b5978004fc3e4daafeddc6e333ced0522be310e9dd027fdc117c8a3350ab148afa7c18d082e6f2f537d5e4e7a2e85e97288b7bb7df7db04d03ad530f37049a92b970dd6bddebca8597b91485998ced1bced07cc3c4d06d9877ef24fb23d20b660e595796bd25ad438b6c45bb0c3ca1749213c0aebe50e518f7a806c9a5854fab3d66abf42b58ee8a9ad86188e9c882dea6f23f9678bdb104d857f588960881a5913e46672353f8bfcb3979533b070188c6b16f37955c8f1bf3e0073a2cf3444182cddb9380f36b3f9fff41be9c9f06cbd25d750771fd91ff02a15e5646b576316c5eb3fa137e6eb2077ba676c71b5cb0185b84e96ebf862d2e86a522ca585e66ff024c5ab09e23f0cba58a45824cde09f35b2ddf537d17b6dd475f3e263c15b61d82a1263614823be12ac04ad2f769db14186244c510aa0ef25e398943d143cb3f81fe60e4010a37eee6df302c03443563bc79a2ef0a85b8aad124194daae22375f68ccdf3ce8def7c636b7b51ea895874babd309b12267c94a5337f4f4c663be8c56b2c001d2955c9b75684efc79d5325cc85eeb1fa5def42dc8cbd14f30c3315aeb8b82dfcd7c2a21a9356028ad542baf8c593784065f3418cdbfc4a0a63ce9ad0aabb25900c638ce270f2832e13612412d42626c7d5bbb02ef1b0c1b532c10d20c4c96e86e2681046aeaf69ca00a162bd2711827a1b13e75710c736e366266e93b53738a707815a4868337f283c5de3007951feb311687e8c9879c6f79c9bf08dc46e430b68f5cf6d649eff339f0f5aedc5f6c34aaed5b7af4b2e0</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">咦，这是一篇加密文章，好像需要输入密码才能查看呢！</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>加密测试</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</id>
    <published>2020-08-09T08:25:46.187Z</published>
    <updated>2020-08-09T08:46:47.041Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="71c7f7f3eb903c1e805603b4a54c01e70ec837feee54a6307078f73600b659ac">30f9441527159f8159e2d4625ba88cec4610fb964a4efc54c5dbbb1ffba01fa59c338013fa05bcfbec8b59b5e6a9fb2fd20da0c17f7b9795f0943b8085d614b0a52eff59008b167faf4d835269fbca055666789069c3feb377ba4e22bd86f228e2f9ddd52411c8f2f355df6aaa4b64ce4232ba58448cf9ea5c85b5a60638c7f125497845cb1750f32052820c15758bffeb3b7c01eba610e125330a179b1256e0d25b85b86610153dfff9c7d1edfededebad5998f980ec26cf463fab484306d101a5a2f31ea160007a9d58865e5ccb881da19c7d5e63a985fb5abb509d8247d1edbc038bc77bd38288ec878da40a1e3e71ac151e41a20789f921b94a7c418fdd922e3e2d11f66cf4c39b10479f573dbf443193c847b0ba43fb5e4cc10b0c4b2fca4ef8f5fc2bd431f46fd09fc413ac3946ab1716c2dd401d1172474e0a5f9334e</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">咦，这是一篇加密文章，好像需要输入密码才能查看呢！</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ESP8266开发学习笔记_BH1750光强传感器</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_BH1750%E5%85%89%E5%BC%BA%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_BH1750%E5%85%89%E5%BC%BA%E4%BC%A0%E6%84%9F%E5%99%A8/</id>
    <published>2020-08-09T08:19:30.000Z</published>
    <updated>2020-08-18T12:16:50.843Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266 开发学习笔记_By_GYC 【BH1750光强传感器】</p><p>BH1750是一个光强传感器，能够对环境光强度进行量化，转化为环境中的光强度lux。它是使用IIC总线进行通信，通过读取寄存器来获得传感器的真实数据。我们常说的智能调光，就要用到此类传感器，因为这个传感器的精度还是很不错的，可以使用这个传感器作为反馈，将环境光照度稳定在一个期望的数值。本章主要介绍在 ESP8266 上使用 IIC 总线驱动 BH1750 光强传感器的方法。通过PID稳定环境光强度的内容将在后面介绍。</p><a id="more"></a><!-- toc --><h2 id="一、BH1750是什么"><a href="#一、BH1750是什么" class="headerlink" title="一、BH1750是什么"></a>一、BH1750是什么</h2><p>BH1750是一个光强传感器，能够对环境光强度进行量化，转化为环境中的光强度lux。它是使用IIC总线进行通信，通过读取寄存器来获得传感器的真实数据。我们常说的智能调光，就要用到此类传感器，因为这个传感器的精度还是很不错的，可以使用这个传感器作为反馈，将环境光照度稳定在一个期望的数值。本章只介绍环境光传感器的驱动，通过PID稳定环境光强度的内容将在后面介绍。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zczAuYmRzdGF0aWMuY29tLzcwY0Z1SFNoX1ExWW54R2twb1dLMUhGNmhoeS9pdC91PTMxNjU5NDkwOCwxNjM3Nzg5MTEwJmZtPTI2JmdwPTAuanBn" alt="image"></p><h2 id="二、驱动原理-amp-代码"><a href="#二、驱动原理-amp-代码" class="headerlink" title="二、驱动原理&amp;代码"></a>二、驱动原理&amp;代码</h2><p>BH1750是使用IIC总线进行驱动的，IIC协议仅用4根线 VCC、GND、SCL 、SDA 就可以实现数据的交互，在BH1750传感器中还有一个位（AD0）是来控制不同地址的，置不同的电平可以改变传感器内部的地址，方便用来在IIC总线上做设备扩展。</p><p>关于IIC<br>IIC驱动我己经介绍过多次了，很多设备都使用IIC协议进行通信，但是他们实现的代码略有差异，有些只用到了部分功能，有些则是用到了全部的功能，有些通信速率高，有些通信速率低，但他们都是IIC协议，基本原理不变，规则不变。接下来我就针对这个传感器编写了适应的IIC驱动（C++语言版本）。（PS：获取以后有机会写一个完整的软件IIC驱动可以应对所有传感器而不需要特别写一个）</p><p>IIC类文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IIC_Device</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">gpio_num_t</span> sda_io_num; <span class="comment">//I2C_MASTER_SDA_GPIO</span></span><br><span class="line">    <span class="keyword">gpio_num_t</span> scl_io_num; <span class="comment">//I2C_MASTER_SCL_GPIO</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    IIC_Device(<span class="keyword">gpio_num_t</span> sda_io, <span class="keyword">gpio_num_t</span> scl_io)</span><br><span class="line">    :sda_io_num(sda_io),scl_io_num(scl_io)</span><br><span class="line">    &#123;</span><br><span class="line">        gpio_init(sda_io_num,scl_io_num);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   IIC GPIO初始化函数</span></span><br><span class="line"><span class="comment">    *   参数：sda_io_num SDA引脚，scl_io_num SCL引脚</span></span><br><span class="line"><span class="comment">    *   返回结果 ：成功</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">esp_err_t</span> <span class="title">gpio_init</span><span class="params">(<span class="keyword">gpio_num_t</span> sda_io, <span class="keyword">gpio_num_t</span> scl_io)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">IIC_Start</span><span class="params">(<span class="keyword">void</span>)</span></span>;    <span class="comment">//IIC 开始信号</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">IIC_Stop</span><span class="params">(<span class="keyword">void</span>)</span></span>;     <span class="comment">//IIC 结束信号</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   IIC等待应答函数</span></span><br><span class="line"><span class="comment">    *   返回1--应答出错</span></span><br><span class="line"><span class="comment">    *   返回0--应答正确</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">uint8_t</span> <span class="title">IIC_Wait_Ask</span><span class="params">(<span class="keyword">void</span>)</span></span>;        </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   写一个字节</span></span><br><span class="line"><span class="comment">    *   参数：要写入的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">IIC_WriteByte</span><span class="params">(<span class="keyword">uint8_t</span> data)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   读一个字节</span></span><br><span class="line"><span class="comment">    *   返回值：读出的字节</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">uint8_t</span> <span class="title">IIC_ReadByte</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   发送Ack 应答信号</span></span><br><span class="line"><span class="comment">    *   参数：是否应答 1-&gt;NOACK  0-&gt;Ack</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>    <span class="title">SendACK</span><span class="params">(<span class="keyword">uint8_t</span> ack)</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>IIC实现函数： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   IIC GPIO初始化函数</span></span><br><span class="line"><span class="comment"> *   参数：sda_io_num SDA引脚，scl_io_num SCL引脚</span></span><br><span class="line"><span class="comment"> *   返回结果 ：成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">esp_err_t</span> <span class="title">IIC_Device::gpio_init</span><span class="params">(<span class="keyword">gpio_num_t</span> sda_io_num, <span class="keyword">gpio_num_t</span> scl_io_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">gpio_config_t</span> io_conf;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"init BH1750 i2c\n"</span>);</span><br><span class="line">    <span class="comment">// disable interrupt</span></span><br><span class="line">    io_conf.intr_type = GPIO_INTR_DISABLE;</span><br><span class="line">    <span class="comment">// set as output mode</span></span><br><span class="line">    io_conf.mode = GPIO_MODE_OUTPUT_OD;</span><br><span class="line">    <span class="comment">// bit mask of the pins that you want to set</span></span><br><span class="line">    io_conf.pin_bit_mask = (<span class="number">1U</span>LL &lt;&lt; sda_io_num) | (<span class="number">1U</span>LL &lt;&lt; scl_io_num);</span><br><span class="line">    <span class="comment">// disable pull-down mode</span></span><br><span class="line">    io_conf.pull_down_en = GPIO_PULLDOWN_DISABLE;</span><br><span class="line">    <span class="comment">// disable pull-up mode</span></span><br><span class="line">    io_conf.pull_up_en = GPIO_PULLUP_ENABLE;</span><br><span class="line">    <span class="comment">// configure GPIO with the given settings</span></span><br><span class="line">    ESP_ERROR_CHECK(gpio_config(&amp;io_conf));</span><br><span class="line">    ESP_ERROR_CHECK(gpio_set_level(sda_io_num, <span class="number">1</span>));</span><br><span class="line">    ESP_ERROR_CHECK(gpio_set_level(scl_io_num, <span class="number">1</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nBH1750_SDA_GPIO:%d  BH1750_SCL_GPIO:%d"</span>, sda_io_num, scl_io_num);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> ESP_OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> *   IIC 开始信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Device::IIC_Start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gpio_set_direction(sda_io_num, GPIO_MODE_OUTPUT);   <span class="comment">//SDA_OUT();</span></span><br><span class="line">    I2C_MASTER_GPIO_OUT(sda_io_num, <span class="number">1</span>);                 <span class="comment">//IIC_SDA=1;</span></span><br><span class="line">    I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">1</span>);                 <span class="comment">//IIC_SCL=1;</span></span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    I2C_MASTER_GPIO_OUT(sda_io_num, <span class="number">0</span>);                 <span class="comment">//IIC_SDA=0;</span></span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">0</span>);                 <span class="comment">//IIC_SCL=0;</span></span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> *   IIC 结束信号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Device::IIC_Stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">1</span>);                 <span class="comment">//IIC_SCL=1;</span></span><br><span class="line">    I2C_MASTER_GPIO_OUT(sda_io_num, <span class="number">0</span>);                 <span class="comment">//IIC_SDA=0;</span></span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    I2C_MASTER_GPIO_OUT(sda_io_num, <span class="number">1</span>);                 <span class="comment">//IIC_SDA=1;</span></span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   IIC等待应答函数</span></span><br><span class="line"><span class="comment"> *   返回1--应答出错</span></span><br><span class="line"><span class="comment"> *   返回0--应答正确</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">IIC_Device::IIC_Wait_Ask</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    gpio_set_direction(sda_io_num, GPIO_MODE_INPUT);    <span class="comment">//SDA_IN();</span></span><br><span class="line"> </span><br><span class="line">    I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">1</span>);                 <span class="comment">//IIC_SCL=1;</span></span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span> (gpio_get_level(sda_io_num)) <span class="comment">//</span></span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">250</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            IIC_Stop();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">0</span>);                 <span class="comment">//IIC_SCL=0;</span></span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   写一个字节</span></span><br><span class="line"><span class="comment"> *   参数：要写入的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Device::IIC_WriteByte</span><span class="params">(<span class="keyword">uint8_t</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> i;</span><br><span class="line">    gpio_set_direction(sda_io_num, GPIO_MODE_OUTPUT);   <span class="comment">//SDA_OUT();</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">0</span>);             <span class="comment">//IIC_SCL=0;</span></span><br><span class="line">        delay_us(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (data &amp; <span class="number">0x80</span>)                                <span class="comment">//MSB,从高位开始一位一位传输</span></span><br><span class="line">            I2C_MASTER_GPIO_OUT(sda_io_num, <span class="number">1</span>);         <span class="comment">//IIC_SDA=1;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            I2C_MASTER_GPIO_OUT(sda_io_num, <span class="number">0</span>);         <span class="comment">//IIC_SDA=0;</span></span><br><span class="line">        I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">1</span>);             <span class="comment">//IIC_SCL=1;</span></span><br><span class="line">        delay_us(<span class="number">2</span>);</span><br><span class="line">        I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">0</span>);             <span class="comment">//IIC_SCL=0;</span></span><br><span class="line">        data &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   读一个字节</span></span><br><span class="line"><span class="comment"> *   返回值：读出的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">IIC_Device::IIC_ReadByte</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> data = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    I2C_MASTER_GPIO_OUT(sda_io_num, <span class="number">1</span>);                 <span class="comment">//IIC_SDA=1;</span></span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    gpio_set_direction(sda_io_num, GPIO_MODE_INPUT);    <span class="comment">//SDA_OUT();</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        data &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">0</span>);             <span class="comment">//IIC_SCL=0;</span></span><br><span class="line">        delay_us(<span class="number">2</span>);</span><br><span class="line">        I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">1</span>);             <span class="comment">//IIC_SCL=1;</span></span><br><span class="line">        delay_us(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (gpio_get_level(sda_io_num))                 <span class="comment">//</span></span><br><span class="line">            data = data | <span class="number">0x01</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            data = data &amp; <span class="number">0xFE</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">0</span>);                 <span class="comment">//IIC_SCL=0;</span></span><br><span class="line">    delay_us(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *   发送Ack 应答信号</span></span><br><span class="line"><span class="comment"> *   参数：是否应答 1-&gt;NOACK  0-&gt;Ack</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IIC_Device::SendACK</span><span class="params">(<span class="keyword">uint8_t</span> ack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gpio_set_direction(sda_io_num, GPIO_MODE_OUTPUT);   <span class="comment">//MPU_SDA_OUT();</span></span><br><span class="line">    gpio_set_level(scl_io_num, <span class="number">0</span>);                      <span class="comment">//MPU_IIC_SCL=0;</span></span><br><span class="line">    I2C_MASTER_GPIO_OUT(sda_io_num, ack);               <span class="comment">//SDA = ack;                  //写应答信号</span></span><br><span class="line">    I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">1</span>);                 <span class="comment">//SCL = 1;                    //拉高时钟线</span></span><br><span class="line">    delay_us(<span class="number">2</span>);                                        <span class="comment">//延时</span></span><br><span class="line">    I2C_MASTER_GPIO_OUT(scl_io_num, <span class="number">0</span>);                 <span class="comment">//SCL = 0;                    //拉低时钟线</span></span><br><span class="line">    delay_us(<span class="number">2</span>);                                        <span class="comment">//延时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BH1750驱动<br>本次所写的BH1750是 通过使用IIC类作为父类进行实现的。BH1750继承了IIC的特性，所以可以复用所有IIC中定义的功能。</p><p>本次编写的驱动库中，支持对传感器测量精度的控制和传感器值得读取。</p><p>光强传感器类定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BH1750_Device</span> :</span> <span class="keyword">public</span> IIC_Device</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">uint8_t</span> SlaveAddress = <span class="number">0x46</span>; <span class="comment">//定义器件在IIC总线中的从地址,根据ALT  ADDRESS地址引脚不同修改</span></span><br><span class="line">                                 <span class="comment">//ALT  ADDRESS引脚接地时地址为0xA6，接电源时地址为0x3A</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">uint8_t</span> BUF[<span class="number">8</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">//接收数据缓存区</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   通过IIC向BH1750发送数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BH1750_SendByte</span><span class="params">(<span class="keyword">uint8_t</span> data)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   通过IIC读取BH1750数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">uint8_t</span> <span class="title">BH1750_RecvByte</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   向BH1750目标地址写数据</span></span><br><span class="line"><span class="comment">     *   参数：目标地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Single_Write_BH1750</span><span class="params">(<span class="keyword">uint8_t</span> REG_Address)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   连续读出BH1750内部数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Multiple_Read_BH1750</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">float</span> data = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   BH1750运行的精度模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BH1750_MODE currect_mode = BH1750_FAST_MODE;</span><br><span class="line"> </span><br><span class="line">    BH1750_Device(<span class="keyword">gpio_num_t</span> sda_io_num, <span class="keyword">gpio_num_t</span> scl_io_num) : IIC_Device(sda_io_num, scl_io_num)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化BH1750，根据需要请参考pdf进行修改****</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   读取BH1750传感器数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">read_data</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  设置BH1750 的精度模式 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_mode</span><span class="params">(BH1750_MODE mode)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">esp_err_t</span> <span class="title">delay_ms</span><span class="params">(<span class="keyword">uint32_t</span> time)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>光强传感器函数实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   通过IIC向BH1750发送数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BH1750_Device::BH1750_SendByte</span><span class="params">(<span class="keyword">uint8_t</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IIC_WriteByte(data);</span><br><span class="line">    IIC_Wait_Ask();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   通过IIC读取BH1750数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">BH1750_Device::BH1750_RecvByte</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IIC_ReadByte();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   向BH1750目标地址写数据</span></span><br><span class="line"><span class="comment"> *   参数：目标地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BH1750_Device::Single_Write_BH1750</span><span class="params">(<span class="keyword">uint8_t</span> REG_Address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IIC_Start();                    <span class="comment">//起始信号</span></span><br><span class="line">    BH1750_SendByte(SlaveAddress);  <span class="comment">//发送设备地址+写信号</span></span><br><span class="line">    BH1750_SendByte(REG_Address);   <span class="comment">//内部寄存器地址，请参考中文pdf22页</span></span><br><span class="line">    <span class="comment">//BH1750_SendByte(REG_data);    //内部寄存器数据，请参考中文pdf22页</span></span><br><span class="line">    IIC_Stop();                     <span class="comment">//发送停止信号</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   连续读出BH1750内部数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BH1750_Device::Multiple_Read_BH1750</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> i;</span><br><span class="line">    IIC_Start();                            <span class="comment">//起始信号</span></span><br><span class="line">    BH1750_SendByte(SlaveAddress | <span class="number">0x01</span>);   <span class="comment">//发送设备地址+读信号</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)                 <span class="comment">//连续读取6个地址数据，存储中BUF</span></span><br><span class="line">    &#123;</span><br><span class="line">        BUF[i] = BH1750_RecvByte();         <span class="comment">//BUF[0]存储0x32地址中的数据</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SendACK(<span class="number">1</span>);                     <span class="comment">//最后一个数据需要回NOACK</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            SendACK(<span class="number">0</span>);                     <span class="comment">//回应ACK</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    IIC_Stop(); <span class="comment">//停止信号</span></span><br><span class="line">    delay_ms(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  初始化BH1750，根据需要请参考pdf进行修改****</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BH1750_Device::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    delay_ms(<span class="number">10</span>);</span><br><span class="line">    Single_Write_BH1750(<span class="number">0x01</span>);  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  设置BH1750 的精度模式 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BH1750_Device::set_mode</span><span class="params">(BH1750_MODE mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    currect_mode = mode;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   读取BH1750传感器数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">BH1750_Device::read_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span>   temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>     dis_data = <span class="number">0</span>; <span class="comment">//变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (currect_mode == BH1750_FAST_MODE)</span><br><span class="line">    &#123;</span><br><span class="line">        Single_Write_BH1750(<span class="number">0x01</span>); <span class="comment">// power on</span></span><br><span class="line">        Single_Write_BH1750(<span class="number">0x13</span>); <span class="comment">// L- resolution mode</span></span><br><span class="line">        delay_ms(<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (currect_mode == BH1750_ACCURATE_MODE)</span><br><span class="line">    &#123;</span><br><span class="line">        Single_Write_BH1750(<span class="number">0x01</span>); <span class="comment">// power on</span></span><br><span class="line">        Single_Write_BH1750(<span class="number">0x10</span>); <span class="comment">// H- resolution mode</span></span><br><span class="line">        delay_ms(<span class="number">180</span>);             <span class="comment">//延时180ms</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Multiple_Read_BH1750(); <span class="comment">//连续读出数据，存储在BUF中</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//printf("BUF = %d,%d,%d,%d,%d,%d,%d,%d",BUF[0],BUF[1],BUF[2],BUF[3],BUF[4],BUF[5],BUF[6],BUF[7]);</span></span><br><span class="line"> </span><br><span class="line">    dis_data = BUF[<span class="number">0</span>];</span><br><span class="line">    dis_data = (dis_data &lt;&lt; <span class="number">8</span>) + BUF[<span class="number">1</span>]; <span class="comment">//合成数据</span></span><br><span class="line"> </span><br><span class="line">    temp = (<span class="keyword">float</span>)dis_data / <span class="number">1.2</span>;</span><br><span class="line">    data = temp;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，BH1750光强传感器有三种精度，一种精度较低（4lx），但是可以转换速度快，每18ms就能够完成一次光强转换；另两种种转换精度高（0.5lx 1lx），但是转换速度低180ms（手册上写120ms~180ms）才能完成一次光强转换。</p><p>此外该传感器还有两种读取方式，一种是连续读取，该模式电源一直处于打开状态，还有一种是单次读取模式，此模式每次读取结束之后都会自动关闭电源，以达到节能的目的。</p><p>本次驱动中并没有写这一部分，只分了快速连续模式和精确连续模式，或许以后用到会再进行完善，或者如果大家有兴趣可以添加这部分简单的代码推送到我的github仓库，我会将好的代码merge进去。</p><h2 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h2><p>最近写博客的质量下降的很厉害，我自己也有感觉到，但是最近实在是太累了，每天很晚才回到家中。每天都在学习没有接触过得新鲜知识，感觉没有太多的精力去对以前的项目做博客分享这些事情，但我还是会坚持下去的，毕竟这是自己喜欢的事情。现在是凌晨1:30分，我已经困倦不堪，希望等我下一次闲下来的时候能够好好地再梳理一下我想要分享的这些东西。</p><p>本次项目的例程在我的github仓库上：<a href="https://github.com/gengyuchao/ESP8266_example/tree/master/project_BH1750">https://github.com/gengyuchao/ESP8266_example/tree/master/project_BH1750</a> 欢迎大家来我的博客评论和给我留言，或者给我的github项目点星星，提issue，提交pull request。把更多更好更有趣的知识传递下去。O(∩_∩)O哈哈~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ESP8266 开发学习笔记_By_GYC 【BH1750光强传感器】&lt;/p&gt;
&lt;p&gt;BH1750是一个光强传感器，能够对环境光强度进行量化，转化为环境中的光强度lux。它是使用IIC总线进行通信，通过读取寄存器来获得传感器的真实数据。我们常说的智能调光，就要用到此类传感器，因为这个传感器的精度还是很不错的，可以使用这个传感器作为反馈，将环境光照度稳定在一个期望的数值。本章主要介绍在 ESP8266 上使用 IIC 总线驱动 BH1750 光强传感器的方法。通过PID稳定环境光强度的内容将在后面介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="ESP8266开发学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IDF" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/IDF/"/>
    
    <category term="ESP8266" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP8266/"/>
    
  </entry>
  
  <entry>
    <title>Qt 中无法使用搜狗输入法解决方法</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/Ubuntu%E7%B3%BB%E7%BB%9F/Qt%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E8%A7%A3%E5%86%B3/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/Ubuntu%E7%B3%BB%E7%BB%9F/Qt%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E8%A7%A3%E5%86%B3/</id>
    <published>2020-08-09T07:59:18.961Z</published>
    <updated>2020-08-18T12:17:41.003Z</updated>
    
    <content type="html"><![CDATA[<p>解决Qt中无法使用搜狗输入法的方法</p><p>在 Ubuntu 系统中使用 Qt 发现有的系统无法使用搜狗等中文输入法，该方法用于解决搜狗输入法不能在 Qt 等软件中使用的问题。<br>（题外话：Ubuntu 19 的 VS Code 软件不能使用搜狗输入法是 Ubuntu 软件商店安装包的问题，只能从 VS Code 官网重新下载安装解决。）</p><a id="more"></a><!-- toc --><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-编译-fcitx-qt5-源码"><a href="#1-编译-fcitx-qt5-源码" class="headerlink" title="1. 编译 fcitx-qt5 源码"></a>1. 编译 fcitx-qt5 源码</h3><h4 id="1-1-编译-fcitx-qt-需要-cmake，安装-cmake-命令，如果已经安装，请略过"><a href="#1-1-编译-fcitx-qt-需要-cmake，安装-cmake-命令，如果已经安装，请略过" class="headerlink" title="1.1 编译 fcitx-qt 需要 cmake，安装 cmake 命令，如果已经安装，请略过;"></a>1.1 编译 fcitx-qt 需要 cmake，安装 cmake 命令，如果已经安装，请略过;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br></pre></td></tr></table></figure><h4 id="1-2-安装-fcitx-libs-dev"><a href="#1-2-安装-fcitx-libs-dev" class="headerlink" title="1.2 安装 fcitx-libs-dev;"></a>1.2 安装 <code>fcitx-libs-dev</code>;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fcitx-libs-dev</span><br></pre></td></tr></table></figure><h4 id="1-3-设置qmake的环境变量，这一步很重要且环境变量的值因人而异"><a href="#1-3-设置qmake的环境变量，这一步很重要且环境变量的值因人而异" class="headerlink" title="1.3 设置qmake的环境变量，这一步很重要且环境变量的值因人而异"></a>1.3 设置qmake的环境变量，这一步很重要且环境变量的值因人而异</h4><p> 1.3.1. 首先确定你的Qt的安装目录，我这里是~/software/Qt5.6.0/，你的或者可能在/home/&lt;用户名&gt;/Qt5.6.0/<br> 1.3.2.<br>  <code>export PATH=&quot;/5.6/gcc_64/bin&quot;:$PATH</code></p><h4 id="1-4-下载fcitx-libs-源码"><a href="#1-4-下载fcitx-libs-源码" class="headerlink" title="1.4 下载fcitx-libs 源码"></a>1.4 下载fcitx-libs 源码</h4><p> 1.4.1<br>  原文的 <code>git clone git@github.com:fcitx/fcitx-qt5.git</code> 不可行，需要修改为<code>https://github.com/fcitx/fcitx-qt5</code><br> 1.4.2.<br>  <code>git clone https://github.com/fcitx/fcitx-qt5</code></p><h4 id="1-5-编译-fcitx-qt5"><a href="#1-5-编译-fcitx-qt5" class="headerlink" title="1.5 编译 fcitx-qt5"></a>1.5 编译 fcitx-qt5</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd fcitx-qt5</span><br><span class="line">cmake .</span><br><span class="line">make </span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="2-拷贝-so-文件"><a href="#2-拷贝-so-文件" class="headerlink" title="2. 拷贝 so 文件"></a>2. 拷贝 so 文件</h3><h4 id="2-1找到文件"><a href="#2-1找到文件" class="headerlink" title="2.1找到文件"></a>2.1找到文件</h4><p>编译完成后，需要把编译得到的 libfcitxplatforminputcontextplugin.so 拷贝到 Qt5.5 安装目录的 Tools/QtCreator/bin/plugins/platforminputcontexts 或 Qt5.6 安装目录的 Tools/QtCreator/lib/Qt/plugins/platforminputcontexts，注意：两个目录根据你的Qt版本而定，Qt安装目录因人而异。</p><h4 id="2-2复制："><a href="#2-2复制：" class="headerlink" title="2.2复制："></a>2.2复制：</h4><p>Qt 5.5：cp platforminputcontext/libfcitxplatforminputcontextplugin.so /Tools/QtCreator/bin/plugins/platforminputcontexts<br>Qt 5.6：cp platforminputcontext/libfcitxplatforminputcontextplugin.so /Tools/QtCreator/lib/Qt/plugins/platforminputcontexts<br>我这里是：cp platforminputcontext/libfcitxplatforminputcontextplugin.so ~/software/Qt5.6.0/Tools/QtCreator/lib/Qt/plugins/platforminputcontexts</p><h3 id="3-添加额外的环境变量"><a href="#3-添加额外的环境变量" class="headerlink" title="3. 添加额外的环境变量"></a>3. 添加额外的环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;export XMODIFIERS&#x3D;@im&#x3D;fcitx&#39; &gt;&gt; .bashrc </span><br><span class="line">echo &#39;export QT_IM_MODULE&#x3D;fcitx&#39; &gt;&gt; .bashrc</span><br></pre></td></tr></table></figure><p>大功告成！</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>说明：本人系统为 Ubuntu 16.04 LTS 英文版 ，遇到的问题基本和原文一样</p><h3 id="1-安装CMake失败"><a href="#1-安装CMake失败" class="headerlink" title="1. 安装CMake失败"></a>1. 安装CMake失败</h3><p>问题描述：sudo apt-get install cmake 执行到 92 % 时提示下载失败，原因是找不到 IP 地址。<br>问题解决：觉得应该是安装包源的问题，于是修改了系统默认的源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System Settings -&gt; Software &amp; Updates -&gt; Ubuntu Software -&gt; Download from 从原来的 China 改为 Main server，最后再</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install cmake</span><br></pre></td></tr></table></figure><h3 id="2-CMake-错误"><a href="#2-CMake-错误" class="headerlink" title="2. CMake 错误"></a>2. CMake 错误</h3><p>问题描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CMake Error at CMakeLists.txt:8 (find_package):</span><br><span class="line">Could not find a package configuration file provided by &quot;ECM&quot; (requested</span><br><span class="line">  version 1.4.0) with any of the following names:</span><br><span class="line">    ECMConfig.cmake</span><br><span class="line">    ecm-config.cmake</span><br><span class="line">  Add the installation prefix of &quot;ECM&quot; to CMAKE_PREFIX_PATH or set &quot;ECM_DIR&quot;</span><br><span class="line">  to a directory containing one of the above files.  If &quot;ECM&quot; provides a</span><br><span class="line">  separate development package or SDK, be sure it has been installed.</span><br><span class="line">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure><p>解决方法：<br>2.1. 到这个页面 <a href="https://launchpad.net/ubuntu/+source/extra-cmake-modules/1.4.0-0ubuntu1">https://launchpad.net/ubuntu/+source/extra-cmake-modules/1.4.0-0ubuntu1</a> 下载 extra-cmake-modules_1.4.0.orig.tar.xz<br>2.2. 解压后编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd extra-cmake-modules-1.4.0</span><br><span class="line">cmake .</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="3-安装-extra-cmake-modules-1-4-0-失败"><a href="#3-安装-extra-cmake-modules-1-4-0-失败" class="headerlink" title="3. 安装 extra-cmake-modules-1.4.0 失败"></a>3. 安装 extra-cmake-modules-1.4.0 失败</h3><p>问题描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$:~&#x2F;Downloads&#x2F;extra-cmake-modules-1.4.0$ cmake .</span><br><span class="line">CMake Warning at tests&#x2F;CMakeLists.txt:28 (find_package):</span><br><span class="line">  Could not find a package configuration file provided by &quot;Qt5LinguistTools&quot;</span><br><span class="line">  with any of the following names:</span><br><span class="line">    Qt5LinguistToolsConfig.cmake</span><br><span class="line">    qt5linguisttools-config.cmake</span><br><span class="line">  Add the installation prefix of &quot;Qt5LinguistTools&quot; to CMAKE_PREFIX_PATH or</span><br><span class="line">  set &quot;Qt5LinguistTools_DIR&quot; to a directory containing one of the above</span><br><span class="line">  files.  If &quot;Qt5LinguistTools&quot; provides a separate development package or</span><br><span class="line">  SDK, be sure it has been installed.</span><br><span class="line">-- Looking for Sphinx Documentation Builder...</span><br><span class="line">-- Sphinx Documentation Builder not found - documentation will not be built (see http:&#x2F;&#x2F;sphinx-doc.org&#x2F;)</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: &#x2F;home&#x2F;cposture&#x2F;Downloads&#x2F;extra-cmake-modules-1.4.0</span><br></pre></td></tr></table></figure><p>解决方法：<br>设置 CMAKE_PREFIX_PATH 环境变量 为 qtbase 目录（&lt;Qt安装目录&gt;/5.6/Src/qtbase/），我这里为：<br>export CMAKE_PREFIX_PATH=”~/software/Qt5.6.0/5.6/Src/qtbase/“<br>如果还是不行，则修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CMAKE_PREFIX_PATH&#x3D;&quot;&#x2F;home&#x2F;cposture&#x2F;software&#x2F;Qt5.6.0&#x2F;5.6&#x2F;gcc_64&#x2F;lib&#x2F;cmake&#x2F;&quot;</span><br></pre></td></tr></table></figure><h3 id="4-缺少-xkbcommon-包"><a href="#4-缺少-xkbcommon-包" class="headerlink" title="4. 缺少 xkbcommon 包"></a>4. 缺少 xkbcommon 包</h3><p>问题描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> -- Found PkgConfig: &#x2F;usr&#x2F;bin&#x2F;pkg-config (found version &quot;0.26&quot;) </span><br><span class="line">-- Could NOT find XKBCommon_XKBCommon (missing:  XKBCommon_XKBCommon_LIBRARY XKBCommon_XKBCommon_INCLUDE_DIR) </span><br><span class="line">CMake Error at &#x2F;usr&#x2F;share&#x2F;cmake-2.8&#x2F;Modules&#x2F;FindPackageHandleStandardArgs.cmake:108 (message):</span><br><span class="line">  Could NOT find XKBCommon (missing: XKBCommon_LIBRARIES XKBCommon) (Required is at least version &quot;0.5.0&quot;)</span><br></pre></td></tr></table></figure><p>解决方法：<br>2.1. 到 <a href="http://xkbcommon.org/">http://xkbcommon.org/</a> 下载最新版的 xkbcommon<br>2.2. 解压后，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bison</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr --libdir&#x3D;&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu --disable-x11</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;解决Qt中无法使用搜狗输入法的方法&lt;/p&gt;
&lt;p&gt;在 Ubuntu 系统中使用 Qt 发现有的系统无法使用搜狗等中文输入法，该方法用于解决搜狗输入法不能在 Qt 等软件中使用的问题。&lt;br&gt;（题外话：Ubuntu 19 的 VS Code 软件不能使用搜狗输入法是 Ubuntu 软件商店安装包的问题，只能从 VS Code 官网重新下载安装解决。）&lt;/p&gt;</summary>
    
    
    
    <category term="Ubuntu" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/Ubuntu/"/>
    
    <category term="搜狗输入法" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
    <category term="Qt" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>系统使用技巧</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/Ubuntu%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/Ubuntu%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2020-08-09T07:59:18.961Z</published>
    <updated>2020-08-18T12:17:45.310Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="141a670852f456cfc20bc9726930b48a2e9de0c5dc16607d3f90e6fa3047a966"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">咦，这是一篇加密文章，好像需要输入密码才能查看呢！</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ESP8266开发学习笔记_DHT11温湿度传感器</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_DHT11%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_DHT11%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/</id>
    <published>2020-08-09T06:19:30.000Z</published>
    <updated>2020-08-18T12:16:56.790Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266 开发学习笔记_By_GYC 【DHT11 温湿度传感器】</p><p>本章介绍ESP8266 IDF 框架下 如何使用GPIO口进行单总线时序模拟，介绍DHT11温湿度传感器的使用方法，实现对温湿度的采集。</p><a id="more"></a><!-- toc --><h2 id="一、准备材料"><a href="#一、准备材料" class="headerlink" title="一、准备材料"></a>一、准备材料</h2><p>①开发板：NodeMcu （ESP8266）</p><p>②环境：Ubuntu 18.04 、 ESP-IDF 操作系统（ ESP8266_RTOS_SDK V3.2）</p><p>③传感器：DHT11</p><p>④辅助材料：杜邦线、面包板</p><h2 id="二、硬件连接"><a href="#二、硬件连接" class="headerlink" title="二、硬件连接"></a>二、硬件连接</h2><p><img src="https://img-blog.csdnimg.cn/2019072500470952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="原理图"></p><p>DHT11的硬件只包含三个引脚，分别是VCC、GND和数据输出引脚DATA。其模块输入电压VCC的输入范围是3.3V~5V。采样周期为1秒。传感器接3.3V电源、GND和ESP8266的GPIO5，信号引脚DATA接5kΩ上拉电阻，完成DHT11的硬件系统。</p><p><img src="https://img-blog.csdnimg.cn/2019072500560647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="链接图"></p><h2 id="三、软件编程"><a href="#三、软件编程" class="headerlink" title="三、软件编程"></a>三、软件编程</h2><p>DHT11能够使用单总线传输协议与ESP8266进行通信。其中ESP8266作为主机，DHT11作为从机。主机给传感器DHT11发送起始信号，收到从机应答信号后初始化成功，能够进行数据传输。</p><p>DHT11回复响应信号后，会发送40bit的传感器数据，包括两个字节的湿度数据（一个字节整数、一个字节小数），两个字节的温度数据整数（一个字节整数、一个字节小数），最后是一个字节的校验和数据。通过求和校验的数据将会作为最后发送的数据。</p><p><img src="https://img-blog.csdnimg.cn/20190724232031971.png" alt="DHT11 通信时序图"></p><p>本次例程是基于EPS8266 IDF的example “project_template” 进行开发，直接在模板基础上进行新内容的添加。</p><h3 id="1、修改工程名"><a href="#1、修改工程名" class="headerlink" title="1、修改工程名"></a>1、修改工程名</h3><p>首先，将MakeFile中模板中的工程名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROJECT_NAME :&#x3D; project_template</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROJECT_NAME :&#x3D; project_DHT11</span><br></pre></td></tr></table></figure><h3 id="2、添加组件"><a href="#2、添加组件" class="headerlink" title="2、添加组件"></a>2、添加组件</h3><p>然后添加工程组件文件夹 dht11_driver 到自己工程的 components （组件） 下</p><p>（PS：本次首先提供C++版本的驱动，工程中C++的具体使用方法可以参考我的系列博客内容）</p><h3 id="3、编程"><a href="#3、编程" class="headerlink" title="3、编程"></a>3、编程</h3><p>修改user_main.c 为 user_main.cpp</p><p>添加 dht11驱动的头文件 “dht11_driver.hpp”</p><p>为 void app_main(void) 函数添加修饰符 extern “C” 如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"esp_system.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dht11_driver.hpp"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//生成 DHT11 的实例化对象</span></span><br><span class="line"><span class="function">DHT_Sensor <span class="title">my_DHT11</span><span class="params">(GPIO_NUM_5,DHT11)</span></span>;</span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * FunctionName : app_main</span></span><br><span class="line"><span class="comment"> * Description  : entry of user application, init user function here</span></span><br><span class="line"><span class="comment"> * Parameters   : none</span></span><br><span class="line"><span class="comment"> * Returns      : none</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">app_main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SDK version:%s\n"</span>, esp_get_idf_version());</span><br><span class="line">    my_DHT11.DHTInit();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        my_DHT11.DHTRead();</span><br><span class="line">        ESP_LOGI(<span class="string">"DHT11"</span>,<span class="string">"DHT: Temperature*100 =  %d *C, Humidity*100 = %d %% (GPIO%d)"</span>,</span><br><span class="line">                (<span class="keyword">int</span>) (my_DHT11.Sensor_Data.temperature * <span class="number">100</span>), (<span class="keyword">int</span>) (my_DHT11.Sensor_Data.humidity * <span class="number">100</span>), my_DHT11.data_pin);</span><br><span class="line"> </span><br><span class="line">        vTaskDelay(<span class="number">1000</span> / portTICK_RATE_MS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、反馈结果"><a href="#4、反馈结果" class="headerlink" title="4、反馈结果"></a>4、反馈结果</h3><p><img src="https://img-blog.csdnimg.cn/20190725001130535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="打印反馈"></p><h3 id="5、核心代码"><a href="#5、核心代码" class="headerlink" title="5、核心代码"></a>5、核心代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//温湿度传感器数据读取（并将数据写入到传入指针）</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DHT_Sensor::DHTRead</span><span class="params">(DHT_Sensor_Data* output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> laststate = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> checksum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> data[<span class="number">100</span>];</span><br><span class="line"> data[<span class="number">0</span>] = data[<span class="number">1</span>] = data[<span class="number">2</span>] = data[<span class="number">3</span>] = data[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">gpio_num_t</span> pin = (<span class="keyword">gpio_num_t</span>)data_pin;</span><br><span class="line"> </span><br><span class="line">    gpio_set_direction(pin,GPIO_MODE_OUTPUT);</span><br><span class="line"> <span class="comment">// Wake up device, 250ms of high</span></span><br><span class="line"> </span><br><span class="line">gpio_set_level(pin, <span class="number">1</span>);</span><br><span class="line"> sleepms(<span class="number">250</span>);</span><br><span class="line"> <span class="comment">// Hold low for 20ms</span></span><br><span class="line"> gpio_set_level(pin, <span class="number">0</span>);</span><br><span class="line"> sleepms(<span class="number">20</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// High for 40ns</span></span><br><span class="line"> gpio_set_level(pin, <span class="number">1</span>);</span><br><span class="line"> delay_us(<span class="number">40</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Set DHT_PIN pin as an input</span></span><br><span class="line"> gpio_set_direction(pin,GPIO_MODE_INPUT); <span class="comment">//GPIO_DIS_OUTPUT(pin);</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// wait for pin to drop?</span></span><br><span class="line"> <span class="keyword">while</span> (gpio_get_level(pin) == <span class="number">1</span> &amp;&amp; i &lt; DHT_MAXCOUNT) &#123;</span><br><span class="line"> delay_us(<span class="number">1</span>);</span><br><span class="line"> i++;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span>(i == DHT_MAXCOUNT)</span><br><span class="line"> &#123;</span><br><span class="line"> DHT_DEBUG(<span class="string">"DHT: Failed to get reading from GPIO%d, dying\r\n"</span>, pin);</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// read data</span></span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; DHT_MAXTIMINGS; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">// Count high time (in approx us)</span></span><br><span class="line"> counter = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (gpio_get_level(pin) == laststate)</span><br><span class="line"> &#123;</span><br><span class="line"> counter++;</span><br><span class="line"> delay_us(<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">if</span> (counter == <span class="number">1000</span>)</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">laststate = gpio_get_level(pin);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (counter == <span class="number">1000</span>)</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="comment">// store data after 3 reads</span></span><br><span class="line"> <span class="keyword">if</span> ((i&gt;<span class="number">3</span>) &amp;&amp; (i%<span class="number">2</span> == <span class="number">0</span>)) &#123;</span><br><span class="line"> <span class="comment">// shove each bit into the storage bytes</span></span><br><span class="line"> data[j/<span class="number">8</span>] &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span> (counter &gt; DHT_BREAKTIME)</span><br><span class="line"> data[j/<span class="number">8</span>] |= <span class="number">1</span>;</span><br><span class="line"> j++;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">if</span> (j &gt;= <span class="number">39</span>) &#123;</span><br><span class="line">checksum = (data[<span class="number">0</span>] + data[<span class="number">1</span>] + data[<span class="number">2</span>] + data[<span class="number">3</span>]) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    DHT_DEBUG(<span class="string">"DHT%s: %02x %02x %02x %02x [%02x] CS: %02x (GPIO%d)\r\n"</span>,</span><br><span class="line">              sensor_type==DHT11?<span class="string">"11"</span>:<span class="string">"22"</span>,</span><br><span class="line">              data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>], data[<span class="number">3</span>], data[<span class="number">4</span>], checksum, pin);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (data[<span class="number">4</span>] == checksum) &#123;</span><br><span class="line"><span class="comment">// checksum is valid</span></span><br><span class="line">output-&gt;temperature = scale_temperature(data);</span><br><span class="line">output-&gt;humidity = scale_humidity(data);</span><br><span class="line"> </span><br><span class="line">DHT_DEBUG(<span class="string">"DHT: Temperature*100 =  %d *C, Humidity*100 = %d %% (GPIO%d)\n"</span>,</span><br><span class="line">          (<span class="keyword">int</span>) (output-&gt;temperature * <span class="number">100</span>), (<span class="keyword">int</span>) (output-&gt;humidity * <span class="number">100</span>), pin);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">DHT_DEBUG(<span class="string">"DHT: Checksum was incorrect after %d bits. Expected %d but got %d (GPIO%d)\r\n"</span>,</span><br><span class="line">                j, data[<span class="number">4</span>], checksum, pin);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DHT_DEBUG(<span class="string">"DHT: Got too few bits: %d should be at least 40 (GPIO%d)\r\n"</span>, j, pin);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>驱动DHT11主要就是遵从时序图，按照时序图中规定的时序控制和读取单线的DHT11传感器数据，最终通过原始数据换算得到最终的温湿度数据的值。</p><p>本次的工程我会开源到自己的github上（<a href="https://github.com/gengyuchao%EF%BC%89%EF%BC%8C%E6%AC%A2%E8%BF%8E%E5%A4%A7%E5%AE%B6%E6%9D%A5%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E4%BA%A4%E6%B5%81%E5%91%80%E3%80%82">https://github.com/gengyuchao），欢迎大家来和我一起交流呀。</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ESP8266 开发学习笔记_By_GYC 【DHT11 温湿度传感器】&lt;/p&gt;
&lt;p&gt;本章介绍ESP8266 IDF 框架下 如何使用GPIO口进行单总线时序模拟，介绍DHT11温湿度传感器的使用方法，实现对温湿度的采集。&lt;/p&gt;</summary>
    
    
    
    <category term="ESP8266开发学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IDF" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/IDF/"/>
    
    <category term="ESP8266" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP8266/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266开发学习笔记_OLED屏幕的IIC驱动</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_OLED%E5%B1%8F%E5%B9%95%E7%9A%84IIC%E9%A9%B1%E5%8A%A8/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_OLED%E5%B1%8F%E5%B9%95%E7%9A%84IIC%E9%A9%B1%E5%8A%A8/</id>
    <published>2020-08-09T05:19:30.000Z</published>
    <updated>2020-08-18T12:17:03.517Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266 开发学习笔记_By_GYC 【OLED屏幕的IIC驱动】</p><p>在我之前的文章中简单介绍过oled的IIC驱动程序，包括SSD1306芯片手册的一些内容，并参考了Arduino大神的代码，将OLED在Arduino上的的驱动改写为了能够应用于ESP8266 RTOS SDK的C语言版本，并作为我的常用库使用。在发现ESP8266可以使用C++编程之后我决定将 ThingPulse 的OLED驱动库（c++版本）完整的进行移植，让我能够在SDK中也能够方便的使用。</p><p>最近我也在研究应用在stm32单片机的FreeRtos操作系统，所以本次OLED的驱动也考虑了在其他FreeRtos操作系统中的适配，可以方便的通过宏定义配置的方式，直接应用在支持FreeRtos操作系统的单片机上。</p><p>（目前库中仅支持ESP8266 IDF版本和STM32F103 FreeRTOS及 STM32F103 无操作系统版本。 如果使用其他系列单片机 通信协议还是需要自己修改的）。</p><a id="more"></a><!-- toc --><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>|—|<br>|ESP8266_RTOS_SDK V3.0  （ESP-IDF Style）|<br>|STM32F103裸机|<br>|STM32F103 FreeRtos操作系统版本|</p><p>user_config 用户配置<br>使用宏定义在“user_oled_config.h”中使用不同的使用方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ESP8266_IDF <span class="comment">// ESP-IDF支持 （默认启用FreeRtos支持）</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STM32F103 <span class="comment">// Stm32支持</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USE_FreeRTOS <span class="comment">// FreeRTOS支持</span></span></span><br></pre></td></tr></table></figure><p>如果您不使用FreeRTOS操作系统，则需要自己覆盖millis（）函数。</p><p>I2C使用方法<br>使用IIC方式驱动OLED屏幕的方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SSD1306I2C.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">SSD1306I2C <span class="title">display</span><span class="params">(ADDRESS, SCL, SDA)</span></span>;</span><br></pre></td></tr></table></figure><p>对于 esp8266-idf</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SSD1306I2C <span class="title">display</span><span class="params">(<span class="number">0x3c</span>,GPIO_NUM_5,GPIO_NUM_4)</span></span>;<span class="comment">// OLED_Address SCL SDA</span></span><br></pre></td></tr></table></figure><p>对于 stm32</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SSD1306I2C  <span class="title">display</span><span class="params">(<span class="number">0x3c</span>, GPIO_Pin_10, GPIO_Pin_11)</span></span>; <span class="comment">//OLED_Address SCL SDA</span></span><br></pre></td></tr></table></figure><p>API接口</p><p>显示控制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化显示</span></span><br><span class="line"><span class="keyword">void</span> init（）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放显示器使用的内存</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">end</span>（）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环初始化</span></span><br><span class="line"><span class="keyword">void</span> resetDisplay（<span class="keyword">void</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次通过I2C连接到显示器</span></span><br><span class="line"><span class="keyword">void</span> reconnect（<span class="keyword">void</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开显示屏</span></span><br><span class="line"><span class="keyword">void</span> displayOn（<span class="keyword">void</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭显示屏</span></span><br><span class="line"><span class="keyword">void</span> displayOff（<span class="keyword">void</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除本地像素缓冲区</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">clear</span>（<span class="keyword">void</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将缓冲区写入显示内存</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">display</span>（<span class="keyword">void</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒置显示模式</span></span><br><span class="line"><span class="keyword">void</span> invertDisplay（<span class="keyword">void</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正常显示模式</span></span><br><span class="line"><span class="keyword">void</span> normalDisplay（<span class="keyword">void</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置显示对比度</span></span><br><span class="line"><span class="comment">//真正的低亮度和对比度：对比度= 10，预充电= 5，comdetect = 0</span></span><br><span class="line"><span class="comment">//正常亮度和对比度：对比度= 100</span></span><br><span class="line"><span class="keyword">void</span> setContrast（<span class="keyword">uint8_t</span> contrast，<span class="keyword">uint8_t</span> precharge = <span class="number">241</span>，<span class="keyword">uint8_t</span> comdetect = <span class="number">64</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问的便捷方法</span></span><br><span class="line"><span class="keyword">void</span> setBrightness（<span class="keyword">uint8_t</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//翻转显示屏</span></span><br><span class="line"><span class="keyword">void</span> flipScreenVertically（）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制镜像的屏幕</span></span><br><span class="line"><span class="keyword">void</span> mirrorScreen（）;</span><br></pre></td></tr></table></figure><p>像素绘图 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/ *绘图功能* /</span><br><span class="line"><span class="comment">//设置所有像素操作的颜色</span></span><br><span class="line"><span class="keyword">void</span> setColor（OLEDDISPLAY_COLOR color）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在给定位置绘制一个像素</span></span><br><span class="line"><span class="keyword">void</span> setPixel（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从位置0到位置1绘制一条线</span></span><br><span class="line"><span class="keyword">void</span> drawLine（<span class="keyword">int16_t</span> x0，<span class="keyword">int16_t</span> y0，<span class="keyword">int16_t</span> x1，<span class="keyword">int16_t</span> y1）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在给定位置绘制矩形的边框</span></span><br><span class="line"><span class="keyword">void</span> drawRect（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">int16_t</span> <span class="built_in">width</span>，<span class="keyword">int16_t</span> <span class="built_in">height</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充矩形</span></span><br><span class="line"><span class="keyword">void</span> fillRect（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">int16_t</span> <span class="built_in">width</span>，<span class="keyword">int16_t</span> <span class="built_in">height</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆的边框</span></span><br><span class="line"><span class="keyword">void</span> drawCircle（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">int16_t</span> radius）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填圈</span></span><br><span class="line"><span class="keyword">void</span> fillCircle（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">int16_t</span> radius）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//水平画一条线</span></span><br><span class="line"><span class="keyword">void</span> drawHorizo​​ntalLine（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">int16_t</span> length）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//垂直画一个林</span></span><br><span class="line"><span class="keyword">void</span> drawVerticalLine（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">int16_t</span> length）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制一个圆形进度条，其外部尺寸由宽度和高度给定。进步是</span></span><br><span class="line"><span class="comment">// 0到100之间的无符号字节值</span></span><br><span class="line"><span class="keyword">void</span> drawProgressBar（<span class="keyword">uint16_t</span> x，<span class="keyword">uint16_t</span> y，<span class="keyword">uint16_t</span> <span class="built_in">width</span>，<span class="keyword">uint16_t</span> <span class="built_in">height</span>，<span class="keyword">uint8_t</span> progress）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以内部图像格式绘制位图</span></span><br><span class="line"><span class="keyword">void</span> drawFastImage（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">int16_t</span> <span class="built_in">width</span>，<span class="keyword">int16_t</span> <span class="built_in">height</span>，<span class="keyword">const</span> <span class="keyword">uint8_t</span> * <span class="built_in">image</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//画一个XBM</span></span><br><span class="line"><span class="keyword">void</span> drawXbm（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">int16_t</span> <span class="built_in">width</span>，<span class="keyword">int16_t</span> <span class="built_in">height</span>，<span class="keyword">const</span> <span class="keyword">char</span> * xbm）;</span><br></pre></td></tr></table></figure><p>文字操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> drawString（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">String</span> <span class="built_in">text</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在给定位置绘制一个最大宽度的字符串。</span></span><br><span class="line"><span class="comment">//如果给定的String宽于指定的宽度</span></span><br><span class="line"><span class="comment">//文本将被包装到空格或短划线的下一行</span></span><br><span class="line"><span class="keyword">void</span> drawStringMaxWidth（<span class="keyword">int16_t</span> x，<span class="keyword">int16_t</span> y，<span class="keyword">int16_t</span> maxLineWidth，<span class="keyword">String</span> <span class="built_in">text</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回带有当前值的const char *的宽度</span></span><br><span class="line"><span class="comment">//字体设置</span></span><br><span class="line"><span class="keyword">uint16_t</span> getStringWidth（<span class="keyword">const</span> <span class="keyword">char</span> * <span class="built_in">text</span>，<span class="keyword">uint16_t</span> length）;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const char版本的Convencience方法</span></span><br><span class="line"><span class="keyword">uint16_t</span> getStringWidth（<span class="keyword">String</span> <span class="built_in">text</span>）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定相对于哪个锚点</span></span><br><span class="line"><span class="comment">//文字被渲染。可用常数：</span></span><br><span class="line"><span class="comment">// TEXT_ALIGN_LEFT，TEXT_ALIGN_CENTER，TEXT_ALIGN_RIGHT，TEXT_ALIGN_CENTER_BOTH</span></span><br><span class="line"><span class="keyword">void</span> setTextAlignment（OLEDDISPLAY_TEXT_ALIGNMENT textAlignment）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置当前字体。可用的默认字体</span></span><br><span class="line"><span class="comment">// ArialMT_Plain_10，ArialMT_Plain_16，ArialMT_Plain_24</span></span><br><span class="line"><span class="comment">//或者使用http://oleddisplay.squix.ch上的字体工具创建一个</span></span><br><span class="line"><span class="keyword">void</span> setFont（<span class="keyword">const</span> <span class="keyword">uint8_t</span> * fontData）;</span><br></pre></td></tr></table></figure><p>由于这个库本身是由 ThingPulse 开发而来，我再此就不做过多的说明，功能研究请移步 ThingPulse 网站，我仅将移植好的原代码放在我的github仓库中（<a href="https://github.com/gengyuchao/oled_ssd1306%EF%BC%89">https://github.com/gengyuchao/oled_ssd1306）</a> 如果有需要可以自己下载研究，有任何问题欢迎与我交流讨论。我会把以后遇到的问题在博客中进行补充说明。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ESP8266 开发学习笔记_By_GYC 【OLED屏幕的IIC驱动】&lt;/p&gt;
&lt;p&gt;在我之前的文章中简单介绍过oled的IIC驱动程序，包括SSD1306芯片手册的一些内容，并参考了Arduino大神的代码，将OLED在Arduino上的的驱动改写为了能够应用于ESP8266 RTOS SDK的C语言版本，并作为我的常用库使用。在发现ESP8266可以使用C++编程之后我决定将 ThingPulse 的OLED驱动库（c++版本）完整的进行移植，让我能够在SDK中也能够方便的使用。&lt;/p&gt;
&lt;p&gt;最近我也在研究应用在stm32单片机的FreeRtos操作系统，所以本次OLED的驱动也考虑了在其他FreeRtos操作系统中的适配，可以方便的通过宏定义配置的方式，直接应用在支持FreeRtos操作系统的单片机上。&lt;/p&gt;
&lt;p&gt;（目前库中仅支持ESP8266 IDF版本和STM32F103 FreeRTOS及 STM32F103 无操作系统版本。 如果使用其他系列单片机 通信协议还是需要自己修改的）。&lt;/p&gt;</summary>
    
    
    
    <category term="ESP8266开发学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IDF" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/IDF/"/>
    
    <category term="ESP8266" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP8266/"/>
    
    <category term="OLED" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/OLED/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266开发学习笔记_使用C++进行嵌入式编程</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E4%BD%BF%E7%94%A8C++%E8%BF%9B%E8%A1%8C%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E4%BD%BF%E7%94%A8C++%E8%BF%9B%E8%A1%8C%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2020-08-09T04:19:30.000Z</published>
    <updated>2020-08-18T12:17:14.319Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266 开发学习笔记_By_GYC 【使用C++进行嵌入式编程】</p><p>由于C++具有封装、继承与多态的优秀特性，所以我将很多项目封装成了类方便调用，本部分会简单介绍一下如何在ESP8266中使用C++进行编程和一些注意事项。</p><a id="more"></a><!-- toc --><h2 id="一、简单的开始"><a href="#一、简单的开始" class="headerlink" title="一、简单的开始"></a>一、简单的开始</h2><p>我们使用的交叉编译工具链本身就支持C++，而且在官方的makefile里也写了C++编译相关的支持，所以对于用户来说，使用C++语言对ESP8266进行编程相当的容易，只需要将源文件的后缀改为“*.cpp” 、头文件改为 “*.hpp” ,或者直接添加“*.cpp” 、 “*.hpp”文件就可以实现使用C++语言编程。</p><p><img src="https://img-blog.csdnimg.cn/20190712104348834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/20190712104406246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><h2 id="二、主函数文件使用C-编程"><a href="#二、主函数文件使用C-编程" class="headerlink" title="二、主函数文件使用C++编程"></a>二、主函数文件使用C++编程</h2><p>同样的原理，在main文件夹下，将user_main.c 改为 user_main.cpp 。文件中就可以使用C++的各种关键字和语法了。</p><p>不过在user_main文件中，仅仅是支持C++编译还是不够的。因为编译器需要找到app_main这个函数作为用户程序入口。直接编译会报错找不到app_main函数。</p><p><img src="https://img-blog.csdnimg.cn/20190712102606482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p>基于此情况，我们需要给 app_main 函数加上 extern “C” 来告诉编译器，这个函数使用C语言风格编译，启动程序就能够正常的找到用户程序的入口了。</p><p>问题产生的原因和解决的原理如下：</p><p>此部分引用 作者：obatmg 的描述，详细原文链接为：<a href="https://blog.csdn.net/u014783685/article/details/84973067">https://blog.csdn.net/u014783685/article/details/84973067</a> </p><p>C++编译器在将cpp文件编译成库时，导出的函数名会改变，成员函数会通过加一些元素变成全局函数，如果这时候我们需要用C语言调用C++的函数，就会遇到C语言程序无法根据用户提供的函数名寻找到C++库中导出的真实函数名的问题，C++库中导出的真实函数名是由编译器决定的，这个时候就需要用到extern关键字。 </p><p>extern “C”的含义就是告诉编译器，下面的函数使用C风格来编译，C语言编译时就不会修改函数名，因为没有重载，类，命名空间等这些概念，函数名是唯一的，而C++因为有类、命名空间、函数重载这些概念，所以函数名可能是相同的，所以C++编译器会修改函数名，使得两个相同函数名的函数在调用时不会产生冲突。<br>——————— </p><p>使用 extern “C” 来告诉编译器 之后，我们就可以正常的进行编译和使用了。</p><p><img src="https://img-blog.csdnimg.cn/20190712105113141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><h2 id="三、为什么使用C"><a href="#三、为什么使用C" class="headerlink" title="三、为什么使用C++"></a>三、为什么使用C++</h2><p>使用C++具有封装、继承与多态的优秀特性，我可以将很多项目封装成类，做成各种通用接口，方便在其他项目中调用。</p><p>使用C++类的概念，我可以构建各种子模块，通过添加类的方式添加新的功能，实现快速高灵活性的开发。</p><p>后面介绍的一些项目中也常常用到C++语言，所以在这里先做一个总结和说明，来记录和介绍我在ESP8266 IDF框架中使用C++的方法。我自己开发的小项目会上传到 我的github仓库上（<a href="https://github.com/gengyuchao%EF%BC%89%EF%BC%8C%E6%AC%A2%E8%BF%8E%E5%A4%A7%E5%AE%B6%E5%85%B3%E6%B3%A8%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%92%8Cgithub%E3%80%82%E5%A6%82%E6%9E%9C%E6%9C%89%E4%BB%BB%E4%BD%95%E6%84%8F%E8%A7%81%E5%92%8C%E5%BB%BA%E8%AE%AE%EF%BC%8C%E5%B8%8C%E6%9C%9B%E5%A4%A7%E5%AE%B6%E5%A4%9A%E5%A4%9A%E5%92%8C%E6%88%91%E4%BA%A4%E6%B5%81%E5%91%80O(%E2%88%A9_%E2%88%A9)O">https://github.com/gengyuchao），欢迎大家关注我的博客和github。如果有任何意见和建议，希望大家多多和我交流呀O(∩_∩)O</a>~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ESP8266 开发学习笔记_By_GYC 【使用C++进行嵌入式编程】&lt;/p&gt;
&lt;p&gt;由于C++具有封装、继承与多态的优秀特性，所以我将很多项目封装成了类方便调用，本部分会简单介绍一下如何在ESP8266中使用C++进行编程和一些注意事项。&lt;/p&gt;</summary>
    
    
    
    <category term="ESP8266开发学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IDF" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/IDF/"/>
    
    <category term="ESP8266" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP8266/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266开发学习笔记_浮点数打印支持</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E7%AC%94%E8%AE%B0_%E6%B5%AE%E7%82%B9%E6%95%B0%E6%89%93%E5%8D%B0%E6%94%AF%E6%8C%81/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E7%AC%94%E8%AE%B0_%E6%B5%AE%E7%82%B9%E6%95%B0%E6%89%93%E5%8D%B0%E6%94%AF%E6%8C%81/</id>
    <published>2020-08-09T03:10:00.000Z</published>
    <updated>2020-08-18T12:17:28.161Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266 开发学习笔记_By_GYC 【更新 ets_printf 函数 使ESP_IDF 能够支持浮点数打印】</p><p>在我们日常的开发过程中，经常使用到的一个功能就是串口打印功能。在ESP8266的IDF框架中，提供了类似控制台的printf操作，可以向串口打印一些信息，但是ESP8266的printf函数被封装经过了简化，不支持浮点数的格式控制符%f。IDF框架中拥有ets_printf函数可以替代封装的printf函数，这个函数在SDK中有源码，可以供我们学习和修改。这篇文章就是总结一下我自己对ESP-IDF工程中的ets_printf.c文件的修改，以实现在ESP8266系统中ets_printf对浮点数的格式控制符的支持。</p><a id="more"></a><!-- toc --><h2 id="一、启用ets-printf函数"><a href="#一、启用ets-printf函数" class="headerlink" title="一、启用ets_printf函数"></a>一、启用ets_printf函数</h2><p>使用ets_printf函数需要在工程配置里设置一下，在linux终端工程目录下输入</p><p>make menuconfig</p><p>进入工程配置页面</p><p> 选择Component config选项卡  Enter进入 修改ESP8266工程宏定义配置</p><p>选择ESP8266-specific选项 Enter进入</p><p> 选择 Using new ets_vprintf instead of rom code 选项 按下“空格”勾选。</p><p>最后选择  &lt; Save &gt; Enter 确认 ,</p><p>然后一直选择&lt; Exit &gt;退出配置页。</p><p>至此，ets_printf.c 文件中的内容就生效，替换了原来rom中的ets_printf函数了。</p><h2 id="二、修改ets-printf函数"><a href="#二、修改ets-printf函数" class="headerlink" title="二、修改ets_printf函数"></a>二、修改ets_printf函数</h2><p>官方库里提供的ets_printf函数仍然不支持浮点数的格式控制符，但是源码已经给出了，我们可以在源码基础上修改，使它支持格式控制符“%f”</p><p>浮点数的格式控制包括“f”、“0”、“.”、数字几个操作，其中“0”、“.”和数字控制符都已经在格式控制系统内了，我们只需要写“f”对应的函数，并作为分支插入格式控制处理的switch结构里就可以了。</p><p>编写的过程参照了%d的格式处理过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">case &#39;d&#39;:</span><br><span class="line">         attr.value.val32 &#x3D; va_arg(va, int);</span><br><span class="line">         if (attr.value.val32 &lt; 0) &#123;</span><br><span class="line">            ets_putc(&#39;-&#39;);</span><br><span class="line">            attr.value.val32 &#x3D; -attr.value.val32;</span><br><span class="line">         &#125;</span><br><span class="line">         ets_printf_int(&amp;attr, 10);</span><br><span class="line">         break;</span><br></pre></td></tr></table></figure><p> 由%d的 处理我发现需要在attr结构体里添加double型的变量，用来缓存变参数列表里的float或者double类型的变量。</p><p> 原结构体类型是下面这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef union _val_cache &#123;</span><br><span class="line">    uint8_t         val8;</span><br><span class="line">    int32_t         val32;</span><br><span class="line">    uint32_t        val32u;</span><br><span class="line">    const char      *valcp;</span><br><span class="line">&#125; val_cache_t;</span><br></pre></td></tr></table></figure><p> 添加double类型的变量valfloat作为浮点数的缓存变量。新结构体类型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef union _val_cache &#123;</span><br><span class="line">    uint8_t         val8;</span><br><span class="line">    int32_t         val32;</span><br><span class="line">    uint32_t        val32u;</span><br><span class="line">    const char      *valcp;</span><br><span class="line">    double           valfloat;</span><br><span class="line">&#125; val_cache_t;</span><br></pre></td></tr></table></figure><p>接下来，我们就可以在扫描格式控制的函数里，仿照%d的格式控制方式添加%f的格式控制了</p><p>涉及到的函数是</p><p>int ets_vprintf(const char *fmt, va_list va)</p><p>在遍历扫描的switch里添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">case &#39;f&#39;:</span><br></pre></td></tr></table></figure><p>在确定了本次所有格式控制操作之后的执行将数值写入打印缓存的switch操作里添加对应的float打印操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">    attr.value.valfloat = va_arg(va, <span class="keyword">double</span>);</span><br><span class="line">    <span class="keyword">if</span> (attr.value.valfloat &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ets_putc(<span class="string">'-'</span>);</span><br><span class="line">        attr.value.valfloat = -attr.value.valfloat;</span><br><span class="line">    &#125;</span><br><span class="line">    ets_printf_float(&amp;attr);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>首先获取可变参列表里的double数据，判断是否为负，并把绝对值传递给专门的float打印函数。</p><p>专门的float型数据打印处理函数ets_printf_float(&amp;attr)是我自己根据这套打印结构的特点写的，参照了int型数据的处理过程，内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLOAT_decimals_MAX_NUM 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VFLOAT_STR_MAX 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ets_printf_float</span><span class="params">(<span class="keyword">val_attr_t</span> * <span class="keyword">const</span> attr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[VFLOAT_STR_MAX];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> offset = VFLOAT_STR_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int32_t</span> integer=attr-&gt;value.valfloat;</span><br><span class="line">    <span class="keyword">double</span> decimals = (attr-&gt;value.valfloat-integer);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (attr-&gt;precision!=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;attr-&gt;precision;i++) &#123;</span><br><span class="line">            decimals=decimals*<span class="number">10.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        integer=decimals;</span><br><span class="line">        <span class="keyword">if</span>(decimals-integer&gt;<span class="number">0.5</span>)<span class="comment">//末位四舍五入</span></span><br><span class="line">            integer++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;attr-&gt;precision;i++) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> c = integer % <span class="number">10</span>;</span><br><span class="line">            buf[--offset] = c + <span class="string">'0'</span>;</span><br><span class="line">            integer /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i =<span class="number">0</span>; i&lt;FLOAT_decimals_MAX_NUM;i++) &#123;</span><br><span class="line">            decimals=decimals*<span class="number">10.0</span>;</span><br><span class="line">            <span class="keyword">int</span> digit=decimals;</span><br><span class="line">            <span class="keyword">if</span>((decimals-(digit))==<span class="number">0.0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        integer=decimals;</span><br><span class="line">        <span class="keyword">if</span>(decimals-integer&gt;<span class="number">0.5</span>)</span><br><span class="line">            integer++;</span><br><span class="line">        <span class="keyword">for</span> (; i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> c = integer % <span class="number">10</span>;</span><br><span class="line">            buf[--offset] = c + <span class="string">'0'</span>;</span><br><span class="line">            integer /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buf[--offset] = <span class="string">'.'</span>;</span><br><span class="line"></span><br><span class="line">    integer=attr-&gt;value.valfloat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (integer != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (; integer &gt; <span class="number">0</span>; integer /= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> c = integer % <span class="number">10</span>;</span><br><span class="line">                buf[--offset] = c + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        buf[--offset] = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fill_num(attr)) &#123;</span><br><span class="line">        <span class="keyword">char</span> fill_data = isfill_0(attr) ? <span class="string">'0'</span> : <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> len = fill_num(attr) - (VFLOAT_STR_MAX - offset);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> left = fill_num(attr) &gt; (VFLOAT_STR_MAX - offset) ? len : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isfill_left(attr)) &#123;</span><br><span class="line">            ets_printf_ch_mutlti(fill_data, left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ets_printf_buf(&amp;buf[offset], VFLOAT_STR_MAX - offset);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isfill_left(attr)) &#123;</span><br><span class="line">            fill_data = <span class="string">' '</span>;</span><br><span class="line">            ets_printf_ch_mutlti(fill_data, left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ets_printf_buf(&amp;buf[offset], VFLOAT_STR_MAX - offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个函数就可以实现ESP8266的浮点数打印操作了。其他地方完全不用修改的。其中我设置了小数点后最大位数为9位，最大字符长度为20位，如果需要超过这个长度的数据打印，可以修改此处宏定义。（实际上double型的数据可以很长很长……）</p><p>有一点需要注意的是，格式控制符中有效数字个数包括小数点。这是和计算机中的printf格式控制保持一致的。</p><h2 id="三、直接使用"><a href="#三、直接使用" class="headerlink" title="三、直接使用"></a>三、直接使用</h2><p>对于不关注技术实现细节的小伙伴可以直接下载我写好的文件，直接替换掉components/esp8266/source路径下原来的ets_printf.c文件即可实现浮点数的打印。</p><p>文件在我的github上（<a href="https://github.com/gengyuchao%EF%BC%89%E3%80%82">https://github.com/gengyuchao）。</a></p><p>欢迎关注我的博客和github呀~ 希望能够和各路大佬一起讨论技术问题~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ESP8266 开发学习笔记_By_GYC 【更新 ets_printf 函数 使ESP_IDF 能够支持浮点数打印】&lt;/p&gt;
&lt;p&gt;在我们日常的开发过程中，经常使用到的一个功能就是串口打印功能。在ESP8266的IDF框架中，提供了类似控制台的printf操作，可以向串口打印一些信息，但是ESP8266的printf函数被封装经过了简化，不支持浮点数的格式控制符%f。IDF框架中拥有ets_printf函数可以替代封装的printf函数，这个函数在SDK中有源码，可以供我们学习和修改。这篇文章就是总结一下我自己对ESP-IDF工程中的ets_printf.c文件的修改，以实现在ESP8266系统中ets_printf对浮点数的格式控制符的支持。&lt;/p&gt;</summary>
    
    
    
    <category term="ESP8266开发学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IDF" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/IDF/"/>
    
    <category term="ESP8266" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP8266/"/>
    
    <category term="浮点数打印" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E6%B5%AE%E7%82%B9%E6%95%B0%E6%89%93%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266开发学习笔记_Ubuntu系统安装</title>
    <link href="https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E7%AC%94%E8%AE%B0_Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>https://github.com/gengyuchao/gengyuchao.github.io/2020/08/09/ESP8266%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ESP8266%E7%AC%94%E8%AE%B0_Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</id>
    <published>2020-08-09T02:10:00.000Z</published>
    <updated>2020-08-18T12:17:19.534Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266 开发学习笔记_By_GYC 【虚拟机Ubuntu系统的安装】</p><p>本来是想最后有时间再写这篇博客的，奈何皂滑弄人，昨天晚上在写上一篇还未出世的博客文章的时候，手滑更新了一下ubuntu系统，再加之前几天更新了主机的显卡驱动，我的Ubuntu虚拟机挂了，驱动不兼容在无法加载登陆界面。虽然通过一些骚操作能够进入桌面系统，但已经不是最好的Linux体验了，所以打算重新安装最新版本的Ubuntu系统，重新搭建一下开发环境。正好填一下自己留的坑，记录一下这次虚拟机Ubuntu系统搭建的过程。</p><a id="more"></a><!-- toc --><h2 id="一、获取最新稳定版本的Ubuntu系统安装包。"><a href="#一、获取最新稳定版本的Ubuntu系统安装包。" class="headerlink" title="一、获取最新稳定版本的Ubuntu系统安装包。"></a>一、获取最新稳定版本的Ubuntu系统安装包。</h2><p>百度Ubuntu 第一个条目就是Ubuntu系统的官方下载</p><p><img src="https://img-blog.csdnimg.cn/20190623142753161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p>选择稳定版本的Download</p><p><img src="https://img-blog.csdnimg.cn/2019062314284421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p>等待迅雷下载完成</p><p><img src="https://img-blog.csdnimg.cn/20190623142947242.png" alt="image"></p><p>打开VM虚拟机-&gt;创建一个新的虚拟机</p><p><img src="https://img-blog.csdnimg.cn/20190623151805307.png" alt="image"></p><p>选择典型虚拟机 </p><p><img src="https://img-blog.csdnimg.cn/20190623151825321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p> 使用光盘镜像安装 文件定位到我们刚刚下载的Ubuntu安装包（*.iso文件）</p><p><img src="https://img-blog.csdnimg.cn/20190623151859130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p> 给你的系统起个名字 填入自己想要的用户名和密码</p><p><img src="https://img-blog.csdnimg.cn/201906231537126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/20190623153644139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p>因为我可能会存比较多的文件，Linux磁盘大小设置为40G ，拆分为多个文件</p><p><img src="https://img-blog.csdnimg.cn/20190623153753285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p>根据自己的电脑情况，自定义一下硬件： </p><p><img src="https://img-blog.csdnimg.cn/20190623154135991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/20190623154203984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p>最后点击完成，等待简易安装自动完成 就可以了。</p><p><img src="https://img-blog.csdnimg.cn/20190623154326666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/20190623154419412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/20190623164448322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><h3 id="二、软件安装"><a href="#二、软件安装" class="headerlink" title="二、软件安装 "></a>二、软件安装 </h3><h3 id="1、默认软件"><a href="#1、默认软件" class="headerlink" title="1、默认软件"></a>1、默认软件</h3><p>安装好后系统会推荐你安装一些软件，你可以根据自己的需要或者兴趣点击进行安装。</p><p><img src="https://img-blog.csdnimg.cn/20190623164928661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><h3 id="2、安装VM-Tools"><a href="#2、安装VM-Tools" class="headerlink" title="2、安装VM Tools"></a>2、安装VM Tools</h3><p>因为是在VM虚拟机中，所以需要安装VM Tools，方便虚拟机和主机文件互传等操作。</p><p>emmmm 我一不留神，VM Tools自己装好了，如果你的虚拟机没有帮你完成，可以在虚拟机选项卡上右击手动选择安装VMware Tools。</p><h3 id="3、切换软件安装源"><a href="#3、切换软件安装源" class="headerlink" title="3、切换软件安装源"></a>3、切换软件安装源</h3><p><img src="https://img-blog.csdnimg.cn/20190623174238595.png" alt="image"></p><p>因为国外网络访问速度问题，推荐大家切换最适合自己的软件安装镜像，ubuntu系统中就直接提供了这些功能，我们可以很快的通过图形界面进行切换，切换合适的镜像之后，下载速度基本可以达到满速。</p><p><img src="https://img-blog.csdnimg.cn/20190623174319710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/20190623174434529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmd5dWNoYW8=,size_16,color_FFFFFF,t_70" alt="image"></p><p>常用命令 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h3 id="4、代码编辑器-VSCode"><a href="#4、代码编辑器-VSCode" class="headerlink" title="4、代码编辑器 VSCode"></a>4、代码编辑器 VSCode</h3><p>只需要在终端中敲入一行代码</p><p>sudo snap install code –classic</p><p><img src="https://img-blog.csdnimg.cn/20190623182519345.png" alt="image"></p><h3 id="5、git"><a href="#5、git" class="headerlink" title="5、git"></a>5、git</h3><p>要给系统安装git，使用如下命令，方便后续和github连接获取仓库中的文件</p><p>sudo apt install git</p><h3 id="6、其他软件"><a href="#6、其他软件" class="headerlink" title="6、其他软件"></a>6、其他软件</h3><p>遇到再更新。</p><p>至此我们就在windows系统下安装完成了Ubuntu版本的Linux环境了。 </p><h2 id="三、接下来"><a href="#三、接下来" class="headerlink" title="三、接下来"></a>三、接下来</h2><p>接下来我会再Ubuntu系统上安装ESP8266的交叉工具链，配置ESP-IDF开发环境。在下一篇博文中单独列出。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ESP8266 开发学习笔记_By_GYC 【虚拟机Ubuntu系统的安装】&lt;/p&gt;
&lt;p&gt;本来是想最后有时间再写这篇博客的，奈何皂滑弄人，昨天晚上在写上一篇还未出世的博客文章的时候，手滑更新了一下ubuntu系统，再加之前几天更新了主机的显卡驱动，我的Ubuntu虚拟机挂了，驱动不兼容在无法加载登陆界面。虽然通过一些骚操作能够进入桌面系统，但已经不是最好的Linux体验了，所以打算重新安装最新版本的Ubuntu系统，重新搭建一下开发环境。正好填一下自己留的坑，记录一下这次虚拟机Ubuntu系统搭建的过程。&lt;/p&gt;</summary>
    
    
    
    <category term="ESP8266开发学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/categories/ESP8266%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ESP32" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP32/"/>
    
    <category term="学习笔记" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ESP8266" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/ESP8266/"/>
    
    <category term="Ubuntu" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/Ubuntu/"/>
    
    <category term="系统安装" scheme="https://github.com/gengyuchao/gengyuchao.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
